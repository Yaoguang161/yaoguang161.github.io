<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昨日晴空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.isk.ink/"/>
  <updated>2021-11-11T15:18:21.515Z</updated>
  <id>http://blog.isk.ink/</id>
  
  <author>
    <name>Asakiii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XML的使用</title>
    <link href="http://blog.isk.ink/2021/10/30/XML%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://blog.isk.ink/2021/10/30/XML%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2021-10-30T01:59:43.000Z</published>
    <updated>2021-11-11T15:18:21.515Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MMXML简介"><a href="#MMXML简介" class="headerlink" title="MMXML简介"></a>MMXML简介</h1><p>XML被设计来传输和存储数据</p><p>HTML被设计用来显示数据</p><h1 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h1><ul><li>类似于HTML的标记语言</li><li>设计宗旨是传输数据,而不是显示数据</li><li>XML不是HTML的代替<ul><li>XML被设计用来传输和存储数据</li><li>HTML用来显示数据</li></ul></li><li>XML各种应用程序之间进行数据传输的最常用的工具.</li></ul><h1 id="XML用途"><a href="#XML用途" class="headerlink" title="XML用途"></a>XML用途</h1><ol><li><p>XML把数据从HTML分离</p></li><li><p>XML简化数据共享</p></li><li><p>XML简化数据传输</p></li><li><p>XML简化平台变更</p></li><li><p>XML使您的数据更有用</p></li><li><p>XML用于创建新的互联网语言</p></li></ol><h1 id="XML语法规则"><a href="#XML语法规则" class="headerlink" title="XML语法规则"></a>XML语法规则</h1><h2 id="XML文档必须有根元素"><a href="#XML文档必须有根元素" class="headerlink" title="XML文档必须有根元素"></a>XML文档必须有根元素</h2><p>XML必须包含根元素,它是其他元素的父元素.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">child</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">subchild</span>&gt;</span><span class="tag">&lt;/<span class="name">subchild</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML声明"><a href="#XML声明" class="headerlink" title="XML声明"></a>XML声明</h2><p>XML声明文件的可选部分,如果存在需要放在文档的第一行.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML大小写敏感"><a href="#XML大小写敏感" class="headerlink" title="XML大小写敏感"></a>XML大小写敏感</h2><h2 id="XML必须正确嵌套"><a href="#XML必须正确嵌套" class="headerlink" title="XML必须正确嵌套"></a>XML必须正确嵌套</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>这里是嵌套内容<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML属性必须加引号"><a href="#XML属性必须加引号" class="headerlink" title="XML属性必须加引号"></a>XML属性必须加引号</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">note</span> <span class="attr">date</span>=<span class="string">&quot;12/11/2007&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="实体引用"><a href="#实体引用" class="headerlink" title="实体引用"></a>实体引用</h2><p>在XML中一些字符拥有特殊的意义</p><p>如果把字符 ‘&lt;’放在XML元素中,会发生错误,这是因为解析器会把它当做新元素的开始.</p><p>这个会产出XML错误:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary &lt; 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了避免这个错误,请用实体引用来代替字符 “&lt;” 字符:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">message</span>&gt;</span>if salary <span class="symbol">&amp;lt;</span> 1000 then<span class="tag">&lt;/<span class="name">message</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注释：</strong>在 XML 中，只有字符 “&lt;” 和 “&amp;” 确实是非法的。大于号是合法的，但是用实体引用来代替它是一个好习惯。</p><h2 id="在-XML-中，空格会被保留"><a href="#在-XML-中，空格会被保留" class="headerlink" title="在 XML 中，空格会被保留"></a>在 XML 中，空格会被保留</h2><h2 id="XML语法-属性"><a href="#XML语法-属性" class="headerlink" title="XML语法-属性"></a>XML语法-属性</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;student id&#x3D;&quot;100&quot;&gt;</span><br><span class="line">    &lt;name&gt;Tom&lt;&#x2F;name&gt;</span><br><span class="line">&lt;&#x2F;student&gt;</span><br></pre></td></tr></table></figure><p>(1)属性值用双引号 <strong>“</strong> 或单引号 <strong>‘</strong> 分隔，如果属性值中有单引号，则用双引号分隔；如果有双引号，则用单引号分隔。那么如果属性值中既有单引号还有双引号怎么办？这种要使用实体（转义字符，类似于html中的空格符），XML 有 5 个预定义的实体字符，如下：</p><p><img src= "/img/loading.gif" data-lazy-src="https://www.runoob.com/wp-content/uploads/2018/03/20160526222841679.png" alt="img"></p><p>(2)一个元素可以有多个属性，它的基本格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;元素名 属性名1&#x3D;&quot;属性值1&quot; 属性名2&#x3D;&quot;属性值2&quot;&gt;</span><br></pre></td></tr></table></figure><p>(3)特定的属性名称在同一个元素标记中只能出现一次</p><p>(4)属性值不能包括 &lt;,&gt;,&amp;，如果一定要包含，也要使用实体</p><h1 id="XML元素"><a href="#XML元素" class="headerlink" title="XML元素"></a>XML元素</h1><h2 id="什么是XML元素"><a href="#什么是XML元素" class="headerlink" title="什么是XML元素?"></a>什么是XML元素?</h2><p>XML 元素指的是从（且包括）开始标签直到（且包括）结束标签的部分。</p><p>一个元素可以包含：</p><ul><li>其他元素</li><li>文本</li><li>属性</li><li>或混合以上所有…</li></ul><h2 id="XML命名规则"><a href="#XML命名规则" class="headerlink" title="XML命名规则"></a>XML命名规则</h2><p>XML 元素必须遵循以下命名规则：</p><ul><li>名称可以包含字母、数字以及其他的字符</li><li>名称不能以数字或者标点符号开始</li><li>名称不能以字母 xml（或者 XML、Xml 等等）开始</li><li>名称不能包含空格</li></ul><p>可使用任何名称，没有保留的字词。</p><h1 id="XML属性"><a href="#XML属性" class="headerlink" title="XML属性"></a>XML属性</h1><h2 id="XML属性必须加引号-1"><a href="#XML属性必须加引号-1" class="headerlink" title="XML属性必须加引号"></a>XML属性必须加引号</h2><p>属性值必须被引号包围,不过单引号和双引号都可以.还可以单引号和双引号一起使用,但是不能交叉.</p><p>以下三种方式都可以使用:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">或者可以</span><br><span class="line"><span class="tag">&lt;<span class="name">person</span> <span class="attr">sex</span>=<span class="string">&#x27;female&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果属性值本身包括双引号,可以使用单引号:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gangster</span> <span class="attr">name</span>=<span class="string">&#x27;George &quot;Shotgun&quot; Ziegler&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>或者可以使用字符实体:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">gangster</span> <span class="attr">name</span>=<span class="string">&quot;George <span class="symbol">&amp;quot;</span>Shotgun<span class="symbol">&amp;quot;</span> Ziegler&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="一个XML示例"><a href="#一个XML示例" class="headerlink" title="一个XML示例"></a>一个XML示例</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">breakfast_menu</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>$5.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Two of our famous Belgian Waffles with plenty of real maple syrup<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">calories</span>&gt;</span>650<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Strawberry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>$7.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with strawberries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Berry-Berry Belgian Waffles<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>$8.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Light Belgian waffles covered with an assortment of fresh berries and whipped cream<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">calories</span>&gt;</span>900<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>French Toast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>$4.50<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Thick slices made from our homemade sourdough bread<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">calories</span>&gt;</span>600<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">food</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Homestyle Breakfast<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">price</span>&gt;</span>$6.95<span class="tag">&lt;/<span class="name">price</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">description</span>&gt;</span>Two eggs, bacon or sausage, toast, and our ever-popular hash browns<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">calories</span>&gt;</span>950<span class="tag">&lt;/<span class="name">calories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">food</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">breakfast_menu</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MMXML简介&quot;&gt;&lt;a href=&quot;#MMXML简介&quot; class=&quot;headerlink&quot; title=&quot;MMXML简介&quot;&gt;&lt;/a&gt;MMXML简介&lt;/h1&gt;&lt;p&gt;XML被设计来传输和存储数据&lt;/p&gt;
&lt;p&gt;HTML被设计用来显示数据&lt;/p&gt;
&lt;h1 id=&quot;什么
      
    
    </summary>
    
    
    
      <category term="XML" scheme="http://blog.isk.ink/tags/XML/"/>
    
  </entry>
  
  <entry>
    <title>MySQL笔记</title>
    <link href="http://blog.isk.ink/2021/10/02/MySQL%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.isk.ink/2021/10/02/MySQL%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-02T10:10:02.000Z</published>
    <updated>2021-11-11T14:29:35.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="（一）数据库和SQL概述"><a href="#（一）数据库和SQL概述" class="headerlink" title="（一）数据库和SQL概述"></a>（一）数据库和SQL概述</h1><h2 id="1-1-数据库的好处"><a href="#1-1-数据库的好处" class="headerlink" title="1.1 数据库的好处"></a>1.1 数据库的好处</h2><ul><li>实现数据持久化</li><li>使用完整的管理系统统一管理，便于查询</li></ul><h2 id="1-2-数据库的概念"><a href="#1-2-数据库的概念" class="headerlink" title="1.2 数据库的概念"></a>1.2 数据库的概念</h2><ul><li><p>DB</p><p>数据库（database），存储数据的仓库，保存了一系列 <strong>有组织</strong> 的数据。</p></li><li><p>DBMS</p><p>数据库管理系统（Database Management System）。数据库是通过 DBMS 创建和操作的容器。</p><p>常见的数据库管理系统：MySql、Oracle、DB2、SqlServer</p></li><li><p>SQL</p><p>结构化查询语言（Structure Query Language），专门用来 <strong>与数据库通信</strong> 的语言。</p><p>SQL的优点</p><ol><li>是一门通用的语言，几乎所有DBMS都支持SQL。</li><li>简单易学。</li><li>==灵活使用，可进行非常复杂而又高级的数据库操作。==</li></ol></li></ul><h2 id="1-3-数据库结构特点"><a href="#1-3-数据库结构特点" class="headerlink" title="1.3 数据库结构特点"></a>1.3 数据库结构特点</h2><ol><li><p>将数据放在表中，表再放到库中。</p></li><li><p>一个数据库中可以有多个表，每个表有一个名字，用来标识自己。</p><p>表名具有唯一性。</p></li><li><p>表具有一些特性，这些特性定义了数据在表中如何存储，类似 java 中 “类” 的设计。</p></li><li><p>表由 <strong>列</strong> 组成，也称为 <strong>字段</strong>。所有表都是由一个或多个列组成的，每一列类似 java 中的 “对象”。</p></li></ol><h1 id="（二）MySQL的安装与使用"><a href="#（二）MySQL的安装与使用" class="headerlink" title="（二）MySQL的安装与使用"></a>（二）MySQL的安装与使用</h1><h2 id="2-1-MySQL-产品特点"><a href="#2-1-MySQL-产品特点" class="headerlink" title="2.1 MySQL 产品特点"></a>2.1 MySQL 产品特点</h2><blockquote><p>属于 MySQLAB 公司，后被 oracle 公司收购。</p></blockquote><p>优点：</p><ul><li>成本低：开源且免费使用</li><li>性能高：执行快</li><li>简单：易安装使用</li></ul><h2 id="2-2-DBMS分类"><a href="#2-2-DBMS分类" class="headerlink" title="2.2 DBMS分类"></a>2.2 DBMS分类</h2><p>分为两类</p><ul><li>基于共享文件系统的DBMS（Access）</li><li>基于客户机——服务器的DBMS（MySQL，Oracle、SqlServer）</li></ul><h2 id="2-3-MySQL版本"><a href="#2-3-MySQL版本" class="headerlink" title="2.3 MySQL版本"></a>2.3 MySQL版本</h2><ul><li>社区版（免费）</li><li>企业版（收费）</li></ul><h2 id="2-4-安装"><a href="#2-4-安装" class="headerlink" title="2.4 安装"></a>2.4 安装</h2><blockquote><p>略。</p></blockquote><h2 id="2-5-MySQL的使用"><a href="#2-5-MySQL的使用" class="headerlink" title="2.5 MySQL的使用"></a>2.5 MySQL的使用</h2><h3 id="1-MySQL服务的启动和停止"><a href="#1-MySQL服务的启动和停止" class="headerlink" title="1. MySQL服务的启动和停止"></a>1. MySQL服务的启动和停止</h3><ul><li><p>Windows10：Ctrl+Shift+Esc -&gt; 查看服务-&gt;点击，启动和停止服务</p></li><li><p>通过命令行CMD（<strong>管理员权限</strong>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动</span><br><span class="line">net stop [mysql服务名]</span><br><span class="line"># 停止</span><br><span class="line">net start [mysql服务名]Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-MySQL-的服务的登录和退出"><a href="#2-MySQL-的服务的登录和退出" class="headerlink" title="2. MySQL 的服务的登录和退出"></a>2. MySQL 的服务的登录和退出</h3><ul><li><p>方式一：通过 mysql 自带客户端，只限于 root 用户</p><p>（MySQL 5.5 Command Line Client）</p></li><li><p>方式二：通过 windows 自带的客户端</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录</span></span><br><span class="line">mysql [-h 主机名 -P 端口号] -u 用户名 -p密码</span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span> 或 ctrl+CCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>举例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 本地登录</span><br><span class="line">mysql -h localhost -P 3306 -U root -p</span><br><span class="line"># root用户快捷登录</span><br><span class="line">mysql -u root -p密码Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ul><h3 id="3-MySQL的常用命令"><a href="#3-MySQL的常用命令" class="headerlink" title="3.MySQL的常用命令"></a>3.MySQL的常用命令</h3><ol><li><p>查看当前所有的数据库</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>打开指定的数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 库名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看当前所在的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select database();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看当前库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看其他库的所有表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables from 库名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看表中的所有数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from 表名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>创建表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 表名(</span><br><span class="line">    列名 列类型,</span><br><span class="line">      列名 列类型,</span><br><span class="line">      ...</span><br><span class="line">);Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看表结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看服务器版本 方式一: 登录到 mysql 服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select version();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二：未登录到 mysql 服务端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql --version</span><br><span class="line">mysql -VCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h3 id="4-MySQL-语法规范"><a href="#4-MySQL-语法规范" class="headerlink" title="4. MySQL 语法规范"></a>4. MySQL 语法规范</h3><ol><li>不区分大小写，但是由规范，建议关键字大小写，表名、列名小写</li><li>每条命令用分号 <code>;</code> 结尾</li><li>每条命令根据需要，可以进行缩进或换行</li><li>注释<ul><li>单行注释：<code>#注释文字</code></li><li>单行注释：<code>-- 注释文字</code></li><li>多行注释：<code>/* 注释文字 */</code></li></ul></li></ol><h1 id="（三）DQL语言学习"><a href="#（三）DQL语言学习" class="headerlink" title="（三）DQL语言学习"></a>（三）DQL语言学习</h1><blockquote><p>DQL: DataBase Query Language（SQL分支：数据库查询语言）</p></blockquote><h2 id="1-基础查询"><a href="#1-基础查询" class="headerlink" title="1. 基础查询"></a>1. 基础查询</h2><h3 id="1-0-基本语法"><a href="#1-0-基本语法" class="headerlink" title="1.0 基本语法"></a>1.0 基本语法</h3><p>前置准备：myemployees 中各张表的数据解释</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">myemployees/employees  员工表</span><br><span class="line">  - employee_id        员工编号</span><br><span class="line">  - first_name         名</span><br><span class="line">  - last_name          姓</span><br><span class="line">  - email              邮箱</span><br><span class="line">  - phone_number       电话号码   </span><br><span class="line">  - job_id             工种编号</span><br><span class="line">  - salary             月薪</span><br><span class="line">  - commission_pct     奖金率</span><br><span class="line">  - manager_id         上级领导的员工编号</span><br><span class="line">  - department_id      部门编号</span><br><span class="line">  - hiredate           入职日期</span><br><span class="line"></span><br><span class="line">myemployees/departments  部门表</span><br><span class="line">     - department_id      部门编号</span><br><span class="line">     - department_name    部门名称</span><br><span class="line">     - manager_id         部门领导的员工编号</span><br><span class="line">  - location_id          位置编号</span><br><span class="line"></span><br><span class="line">myemployees/locations   位置表</span><br><span class="line">  - location_id            位置编号</span><br><span class="line">  - street_address      街道</span><br><span class="line">  - postal_code            邮编</span><br><span class="line">  - city                城市</span><br><span class="line">  - state_province        州</span><br><span class="line">  - country_id            国家编号</span><br><span class="line"></span><br><span class="line">myemployees/jobs        工种 </span><br><span class="line">  - job_id                工种编号                                 </span><br><span class="line">  - job_title              工种名称</span><br><span class="line">  - min_salary            最低工资</span><br><span class="line">  - max_salary            最高工资Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>基本查询语法：</p><p>着重号 <strong>``</strong> ，当字段名与已知 SQL 关键字重复，则可使用。一般情况也可使用。</p><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表 <span class="keyword">from</span> 表名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>查询列表可以是：表中的字段、常量值、表达式、函数</li><li>查询的结果是一个虚拟的表格</li></ol><p>当前操作切换到 myemployees 表：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">USE myemployees;</span><br><span class="line">&#96;&#96;&#96;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-1-查询表中的单个字段"><a href="#1-1-查询表中的单个字段" class="headerlink" title="1.1 查询表中的单个字段"></a>1.1 查询表中的单个字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees ;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-2-查询表中的多个字段"><a href="#1-2-查询表中的多个字段" class="headerlink" title="1.2 查询表中的多个字段"></a>1.2 查询表中的多个字段</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    salary,</span><br><span class="line">    email </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees ;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-3-查询表中的所有字段"><a href="#1-3-查询表中的所有字段" class="headerlink" title="1.3 查询表中的所有字段"></a>1.3 查询表中的所有字段</h3><p>方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="string">`employee_id`</span>,</span><br><span class="line">    <span class="string">`first_name`</span>,</span><br><span class="line">    <span class="string">`phone_number`</span>,</span><br><span class="line">    <span class="string">`commission_pct`</span>,</span><br><span class="line">    <span class="string">`manager_id`</span>,</span><br><span class="line">    <span class="string">`department_id`</span>,</span><br><span class="line">    <span class="string">`hiredate`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees ;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-4-查询常量值"><a href="#1-4-查询常量值" class="headerlink" title="1.4 查询常量值"></a>1.4 查询常量值</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">&#x27;Murphy&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-5-查询表达式"><a href="#1-5-查询表达式" class="headerlink" title="1.5 查询表达式"></a>1.5 查询表达式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span> % <span class="number">98</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-6-查询函数"><a href="#1-6-查询函数" class="headerlink" title="1.6 查询函数"></a>1.6 查询函数</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-7-起别名"><a href="#1-7-起别名" class="headerlink" title="1.7 起别名"></a>1.7 起别名</h3><p>关键字：<code>AS</code> 优点：</p><ul><li>便于理解</li><li>如果要查询的字段有重名的情况，使用别名可以区分开来</li></ul><p>方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="number">100</span>%<span class="number">98</span> <span class="keyword">AS</span> 结果;</span><br><span class="line"><span class="keyword">SELECT</span> last_name <span class="keyword">AS</span> 姓,first_name <span class="keyword">AS</span> 名 <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name 姓, first_name 名 <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例：查询 salary，显示结果为 out put</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary <span class="keyword">AS</span> <span class="string">&quot;out put&quot;</span> <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-8-去重-distinct"><a href="#1-8-去重-distinct" class="headerlink" title="1.8 去重(distinct)"></a>1.8 去重(distinct)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">关键字：distinct</span><br><span class="line">案例：查询员工表中涉及的所有部门编号</span><br><span class="line">&#96;&#96;&#96;sql</span><br><span class="line">SELECT DISTINCT department_id FROM employees;</span><br><span class="line">&#96;&#96;&#96;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-9-号的作用"><a href="#1-9-号的作用" class="headerlink" title="1.9 + 号的作用"></a>1.9 <code>+</code> 号的作用</h3><p>java 中的 + 号：</p><ul><li>运算符：两个操作数都是数值型</li><li>连接符，只要有一个为字符串</li></ul><p>mysql 中的 + 号： 仅仅只有一个功能：运算符</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 两个操作数都是数值型，则作加法运算</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">100</span>+<span class="number">90</span>; <span class="comment"># 190</span></span><br><span class="line"><span class="comment"># 其中有一个为字符型，试图将字符串数值转化成数值型.</span></span><br><span class="line"><span class="comment"># 如果转换成功，则继续做加法运算。</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;123&#x27;</span>+<span class="number">90</span>; <span class="comment"># 213</span></span><br><span class="line"><span class="comment"># 如果转换失败，则将字符串型转换成 0</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;abc&#x27;</span>+<span class="number">90</span>;  <span class="comment"># 90</span></span><br><span class="line"><span class="keyword">select</span> <span class="literal">null</span> + <span class="number">10</span>; 只要其中一个为 null,则结果肯定为 nullCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-10-CONCAT-连接符"><a href="#1-10-CONCAT-连接符" class="headerlink" title="1. 10. CONCAT 连接符"></a>1. 10. <code>CONCAT</code> 连接符</h3><p>案例：查询员工名和姓连接成一个字段，并显示为 姓名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>) <span class="keyword">AS</span> 结果; <span class="comment"># abcCopy to clipboardErrorCopied</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    <span class="keyword">CONCAT</span>(last_name, <span class="string">&quot; &quot;</span>, first_name) <span class="keyword">AS</span> 姓名</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-条件查询"><a href="#2-条件查询" class="headerlink" title="2. 条件查询"></a>2. 条件查询</h2><h3 id="2-0-基本语法"><a href="#2-0-基本语法" class="headerlink" title="2.0 基本语法"></a>2.0 基本语法</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> </span><br><span class="line">    查询列表</span><br><span class="line"><span class="keyword">from</span> </span><br><span class="line">    表名</span><br><span class="line"><span class="keyword">where</span> </span><br><span class="line">    筛选条件Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="2-1-按条件表达式"><a href="#2-1-按条件表达式" class="headerlink" title="2.1 按条件表达式"></a>2.1 按条件表达式</h3><p>条件运算符：&gt;, &lt;, 相等 =, 不等 &lt;&gt;, &gt;=, &lt;= 案例1：查询工资&gt;12000的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt; <span class="number">12000</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询部门编号不等于90的员工名和部门编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name <span class="keyword">AS</span> 名字,</span><br><span class="line">    department_id <span class="keyword">AS</span> 部门编号</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="string">`department_id`</span> &lt;&gt; <span class="number">90</span>Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="2-2-按逻辑表达式筛选"><a href="#2-2-按逻辑表达式筛选" class="headerlink" title="2.2 按逻辑表达式筛选"></a>2.2 按逻辑表达式筛选</h3><p>逻辑运算符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">and, or, not</span><br><span class="line">&amp;&amp;, ||, !Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例1：查询工资在10000-20000之间的员工名、工资、奖金</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    <span class="string">`last_name`</span> <span class="keyword">AS</span> 名字,</span><br><span class="line">    <span class="string">`salary`</span> <span class="keyword">AS</span> 工资,</span><br><span class="line">    <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>) <span class="keyword">AS</span> 奖金率 </span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &gt;= <span class="number">10000</span> <span class="keyword">AND</span> salary &lt;= <span class="number">20000</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询部门编号不是在90到110之间，或者工资高于15000的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    department_id &lt; <span class="number">90</span> <span class="keyword">OR</span> department_id &gt; <span class="number">110</span> <span class="keyword">OR</span> salary &gt; <span class="number">15000</span>Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="2-3-模糊查询"><a href="#2-3-模糊查询" class="headerlink" title="2.3 模糊查询"></a>2.3 模糊查询</h3><h4 id="1-LIKE"><a href="#1-LIKE" class="headerlink" title="1. LIKE"></a>1. LIKE</h4><ul><li>一般与通配符搭配使用</li><li>通配符： <code>%</code> 任意多个字符，包含 <code>0</code> 个字符 <code>_</code> 匹配任意单个字符</li><li>转义字符 <code>escape &lt;转义字符&gt;</code> 将指定字符设置为转义符号</li></ul><p>案例1：筛选员工名中包含字符a的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_name <span class="keyword">LIKE</span> <span class="string">&quot;%a%&quot;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询员工名中第三个字符为n，第五个字符为l的员工名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name <span class="keyword">AS</span> 员工名,</span><br><span class="line">    salary <span class="keyword">AS</span> 工资</span><br><span class="line"><span class="keyword">FROM</span> </span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_name <span class="keyword">LIKE</span> <span class="string">&quot;__n_l%&quot;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例3：查询员工名中第二个字符为_的员工名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    last_NAME <span class="keyword">LIKE</span> <span class="string">&quot;_$_%&quot;</span> ESCAPE <span class="string">&quot;$&quot;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="2-BETWEEN-AND"><a href="#2-BETWEEN-AND" class="headerlink" title="2. BETWEEN AND"></a>2. BETWEEN AND</h4><ul><li>提高简洁度</li><li>between a and b 包含[a,b]</li></ul><p>案例1：查询员工编号在100-120之间的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    *</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    <span class="comment"># employee_id &gt;=100 and employee_id &lt;= 120;</span></span><br><span class="line">    employee_id <span class="keyword">BETWEEN</span> <span class="number">100</span> <span class="keyword">AND</span> <span class="number">120</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="3-IN-关键字"><a href="#3-IN-关键字" class="headerlink" title="3. IN 关键字"></a>3. IN 关键字</h4><p>含义：判断某个字段是否属于 <code>in</code> 列表中的某一项 特点：</p><ul><li>使用 <code>in</code> 提高简洁度</li><li><code>in</code> 列表的值类型必须统一或兼容（’123’, 123）</li></ul><p>案例1：查询员工的工种编号 IT_PROT, AD_VP, AD_PRES 中的一个员工名和工种编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">    last_name,</span><br><span class="line">    job_id </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">where job_id = &#x27;IT_PROT&#x27; </span></span><br><span class="line"><span class="comment">    or job_id = &#x27;AD_VP&#x27; </span></span><br><span class="line"><span class="comment">    OR job_id = &#x27;AD_PRES&#x27; ; </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WHERE</span> </span><br><span class="line">    job_id <span class="keyword">IN</span> (<span class="string">&#x27;IT_PRO&#x27;</span>, <span class="string">&#x27;AD_VP&#x27;</span>, <span class="string">&#x27;AD_PRES&#x27;</span>)Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="4-IS-NULL-IS-NOT-NULL"><a href="#4-IS-NULL-IS-NOT-NULL" class="headerlink" title="4. IS NULL / IS NOT NULL"></a>4. IS NULL / IS NOT NULL</h4><p>案例1：查询没有奖金的员工名和奖金率</p><ul><li>=或&lt;&gt;不能判断等于null</li><li><code>is null</code>, <code>is not null</code> 可以</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name,</span><br><span class="line">    commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="5-安全等于-lt-gt"><a href="#5-安全等于-lt-gt" class="headerlink" title="5. 安全等于 &lt;=&gt;"></a>5. 安全等于 &lt;=&gt;</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name,</span><br><span class="line">    commission_pct</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    commission_pct &lt;=&gt; <span class="literal">NULL</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例：查询工资为 12000的员工信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    last_name,</span><br><span class="line">    salary</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    employees</span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">    salary &lt;=&gt; <span class="number">12000</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="6-is-null-和-lt-gt"><a href="#6-is-null-和-lt-gt" class="headerlink" title="6. is null 和 &lt;=&gt;"></a>6. is null 和 &lt;=&gt;</h4><ul><li><code>is null</code>: 仅仅可以判断null值，可读性高，建议使用</li><li><code>&lt;=&gt;</code> : 既可以判断null值，也可以判断普通数值，可读性差</li></ul><h2 id="3-排序查询"><a href="#3-排序查询" class="headerlink" title="3. 排序查询"></a>3. 排序查询</h2><h3 id="3-0-基本语法"><a href="#3-0-基本语法" class="headerlink" title="3.0 基本语法:"></a>3.0 基本语法:</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">    查询列表</span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">    表</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表 [<span class="keyword">ASC</span>|<span class="keyword">DESC</span>];Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>含义：</p><ul><li>asc 代表升序，desc代表降序，默认为升序</li><li>order by 子句中可以是单个字段、多个字段、表达式、函数、别名</li><li>order by 子句一般是放在查询语句最后面，但 limit子句除外。</li></ul><h3 id="3-1-一般升-降序排序"><a href="#3-1-一般升-降序排序" class="headerlink" title="3.1 一般升/降序排序"></a>3.1 一般升/降序排序</h3><p>案例1：查询员工信息，要求工资从高到底排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">DESC</span>;</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees <span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询部门编号&gt;=90的员工信息，按入职时间的先后进行排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id &gt;= <span class="number">90</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> hiredate <span class="keyword">ASC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-2-按表达式排序"><a href="#3-2-按表达式排序" class="headerlink" title="3.2 按表达式排序"></a>3.2 按表达式排序</h3><p>案例3：按年薪的高低显示员工的信息和年薪</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, salary * <span class="number">12</span>*(<span class="number">1</span>+ <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">ORDER BY salary * 12*(1+ IFNULL(commission_pct, 0)) DESC;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-3-按别名排序"><a href="#3-3-按别名排序" class="headerlink" title="3.3 按别名排序"></a>3.3 按别名排序</h3><p>案例4：按年薪的高低显示员工的信息和年薪</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *, salary * <span class="number">12</span>*(<span class="number">1</span>+ <span class="keyword">IFNULL</span>(commission_pct, <span class="number">0</span>)) <span class="keyword">AS</span> 年薪</span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line">ORDER BY 年薪 DESC;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-4-按函数排序"><a href="#3-4-按函数排序" class="headerlink" title="3.4 按函数排序"></a>3.4 按函数排序</h3><p>案例5：按姓名的长度显示姓名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(last_name) 字节长度, last_name, salary</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(last_name) <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-5-按多个字段排序"><a href="#3-5-按多个字段排序" class="headerlink" title="3.5 按多个字段排序"></a>3.5 按多个字段排序</h3><p>案例6：查询员工信息，要求先按工资升序，再按员工编号降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> salary <span class="keyword">ASC</span>, employee_id <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h1 id="（四）SQL常见函数"><a href="#（四）SQL常见函数" class="headerlink" title="（四）SQL常见函数"></a>（四）SQL常见函数</h1><h2 id="1-基础"><a href="#1-基础" class="headerlink" title="1. 基础"></a>1. 基础</h2><h3 id="1-1-概念"><a href="#1-1-概念" class="headerlink" title="1.1 概念"></a>1.1 概念</h3><p>将一组逻辑语句封装在方法中，对外暴露方法名。</p><p>SQL 提供给了我们内置函数，同时，我们也可以自定义函数。</p><h3 id="1-2-调用"><a href="#1-2-调用" class="headerlink" title="1.2 调用"></a>1.2 调用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 函数名(实参列表) [<span class="keyword">FROM</span> 表];Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="1-3-分类"><a href="#1-3-分类" class="headerlink" title="1.3 分类"></a>1.3 分类</h3><p>常见函数分为 <strong>单行函数</strong> 和 <strong>分组函数</strong></p><table><thead><tr><th>单行函数</th><th>分组函数</th></tr></thead><tbody><tr><td>字符函数</td><td><code>SUM</code></td></tr><tr><td>日期函数</td><td><code>AVG</code></td></tr><tr><td>数学函数</td><td><code>MAX</code></td></tr><tr><td>其他函数</td><td><code>MIN</code></td></tr><tr><td>流程控制函数</td><td><code>COUNT</code></td></tr></tbody></table><h2 id="2-字符函数"><a href="#2-字符函数" class="headerlink" title="2. 字符函数"></a><a href="https://docs.mphy.top/#/MySQL/ch04?id=_2-字符函数">2. 字符函数</a></h2><ol><li><p>LENGTH <code>LENGTH()</code> 获取参数的 <strong>字节</strong> 个数</p></li><li><p>CONCAT <code>CONCAT()</code> 拼接字符串</p></li><li><p>uppser、lower 示例：姓变大写，名变小写，拼接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">UPPER</span>(last_name),<span class="string">&#x27;_&#x27;</span>, <span class="keyword">LOWER</span>(first_name)) <span class="keyword">AS</span> 姓名 <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>SUBSTR、SUBSTRING 语法：</p><ul><li><p>SUBSTR(str, start, len)</p></li><li><p>SUBSTR(str, len) 注意：索引从1开始</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>, <span class="number">7</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUBSTR</span>(<span class="string">&#x27;李莫愁爱上了陆展元&#x27;</span>, <span class="number">1</span>, <span class="number">3</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CONCAT</span>(<span class="keyword">UPPER</span>(<span class="keyword">SUBSTR</span>(last_name, <span class="number">1</span>, <span class="number">1</span>)),<span class="string">&#x27;_&#x27;</span>, <span class="keyword">LOWER</span>(<span class="keyword">SUBSTR</span>(last_name, <span class="number">2</span>))) </span><br><span class="line"><span class="keyword">AS</span> 姓名 </span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ul></li><li><p>insert 返回子串第一次出现的位置，如果找不到则返回 0</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">INSTR</span>(<span class="string">&#x27;杨殷六侠不悔爱上了殷六侠&#x27;</span>, <span class="string">&#x27;殷八侠&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>TRIM</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="keyword">TRIM</span>(<span class="string">&#x27; 张翠山 &#x27;</span>)) <span class="keyword">AS</span> <span class="keyword">output</span>;<span class="comment">#9</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LENGTH</span>(<span class="string">&#x27; 张翠山 &#x27;</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;<span class="comment">#11</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">&#x27;aa&#x27;</span> <span class="keyword">FROM</span> <span class="string">&#x27;aaa张aaaaa翠aaa山aaaaaaaa&#x27;</span>) <span class="keyword">as</span> <span class="keyword">output</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>LPAD 用指定字符左填充至指定长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">LPAD</span>(<span class="string">&#x27;殷素素&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;*&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>RPAD 用指定字符右填充至指定长度</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> RPAD(<span class="string">&#x27;殷素素&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;*&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>REPLACE</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="string">&#x27;张无忌爱上了周芷若&#x27;</span>, <span class="string">&#x27;周芷若&#x27;</span>,<span class="string">&#x27;赵敏&#x27;</span>) <span class="keyword">AS</span> <span class="keyword">output</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h2 id="3-数学函数"><a href="#3-数学函数" class="headerlink" title="3. 数学函数"></a>3. 数学函数</h2><ol><li><p>round 四舍五入</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">ROUND</span>(<span class="number">-1.5</span>);</span><br><span class="line">重载：小数点后保留2位</span><br><span class="line"><span class="keyword">SELECT</span>    <span class="keyword">ROUND</span>(<span class="number">1.567</span>, <span class="number">2</span>);Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>ceil 向上取整，返回&gt;=该参数的最小整数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CEIL</span>(<span class="number">-1.2</span>) <span class="keyword">AS</span> 结果;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>floor 向下取整，返回&lt;=该参数的最大整数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">FLOOR</span>(<span class="number">-1.7</span>) <span class="keyword">AS</span> 结果;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>TRUNCATE 截断</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">TRUNCATE</span>(<span class="number">1.65</span>,<span class="number">1</span>) <span class="keyword">AS</span> 结果;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>mod 取余</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MOD</span>(<span class="number">19</span>,<span class="number">3</span>);Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-日期函数"><a href="#4-日期函数" class="headerlink" title="4. 日期函数"></a>4. 日期函数</h2><p>返回当前系统日期+时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">NOW</span>();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>返回当前系统日期，不包含时间</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">CURDATE</span>();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>获取指定部分，年、月、日、小时、分钟、秒</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(<span class="keyword">NOW</span>()) <span class="keyword">AS</span> 年;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">YEAR</span>(hiredate) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MONTH</span>(<span class="keyword">NOW</span>()) 月;</span><br><span class="line"><span class="keyword">SELECT</span> MONTHNAME(<span class="keyword">NOW</span>()) 月;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="5-其他函数"><a href="#5-其他函数" class="headerlink" title="5. 其他函数"></a>5. 其他函数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>(); <span class="comment">--当前数据库服务器的版本database当前打开的数据库</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">USER</span>();  <span class="comment">--当前用户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">PASSWORD</span>(<span class="string">&#x27;字符&#x27;</span>); <span class="comment">-- 返回该字符的密码形式md5(字符):返回该字符的md5</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">VERSION</span>(); </span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DATABASE</span>();Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="6-流程控制函数"><a href="#6-流程控制函数" class="headerlink" title="6. 流程控制函数"></a>6. 流程控制函数</h2><ol><li><p><code>IF</code> 函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">IF</span>(<span class="number">10</span>&gt;<span class="number">5</span>, <span class="string">&#x27;大&#x27;</span>, <span class="string">&#x27;小&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> last_name, commission_pct, <span class="keyword">IF</span>(commission_pct <span class="keyword">IS</span> <span class="literal">NULL</span>,<span class="string">&#x27;没奖金呵呵&#x27;</span>,<span class="string">&#x27;有奖金，哈哈&#x27;</span>)</span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p><code>CASE</code> 函数：类似 <code>switch-case</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">case 要判断的字段或者表达式</span><br><span class="line">WHEN 常量1 THEN 要显示的值1或语句1;</span><br><span class="line">WHEN 常量2 THEN 要显示的值2或语句2;</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值n或语句n;</span><br><span class="line">ENDCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例:查询员工的工资, 要求部门号=30，显示的工资为1.1倍 都门号=40，显示的工资为1.2倍 都门号=50，显示的工资为1.3倍 其他部门，显示的工资为原工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary 原始工资, department_id, </span><br><span class="line"><span class="keyword">CASE</span> department_id</span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">30</span> <span class="keyword">THEN</span> salary*<span class="number">1.1</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">40</span> <span class="keyword">THEN</span> salary*<span class="number">1.2</span></span><br><span class="line"><span class="keyword">WHEN</span> <span class="number">50</span> <span class="keyword">THEN</span> salary*<span class="number">1.3</span></span><br><span class="line"><span class="keyword">ELSE</span> salary</span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 新工资</span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p><code>case</code> 函数使用二：类似多重 <code>if</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE </span><br><span class="line">WHEN 条件1 THEN 要显示的值1或语句1</span><br><span class="line">WHEN 条件2 THEN 要显示的值2或语句2</span><br><span class="line">...</span><br><span class="line">ELSE 要显示的值n或语句n</span><br><span class="line">ENDCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例：查询员工的工资的情况 如果工资&gt;20000,显示A级别 如果工资&gt;15000,显示B级别 如果工资&gt;10000，显示C级别 否则，显示D级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary,</span><br><span class="line"><span class="keyword">CASE</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">20000</span> <span class="keyword">THEN</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">15000</span> <span class="keyword">THEN</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line"><span class="keyword">WHEN</span> salary&gt;<span class="number">10000</span> <span class="keyword">THEN</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line"><span class="keyword">ELSE</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line"><span class="keyword">END</span> <span class="keyword">AS</span> 工资级别</span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h2 id="7-分组函数"><a href="#7-分组函数" class="headerlink" title="7. 分组函数"></a>7. 分组函数</h2><h3 id="7-1-功能"><a href="#7-1-功能" class="headerlink" title="7.1 功能"></a>7.1 功能</h3><p>功能：用作统计使用，又称为聚合函数或统计函数或组函数。 |函数|含义| |-|-|-| |<code>SUM</code>|求和| |<code>AVG</code>|平均值| |<code>MAX</code>|最大值| |<code>MIN</code>|最小值|| |<code>count</code>|计算个数|</p><h3 id="7-2-简单使用"><a href="#7-2-简单使用" class="headerlink" title="7.2 简单使用"></a>7.2 简单使用</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> 工资和 <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(salary) <span class="keyword">AS</span> 和, <span class="keyword">ROUND</span>(<span class="keyword">AVG</span>(salary),<span class="number">2</span>) <span class="keyword">AS</span> 平均,<span class="keyword">MAX</span>(salary) 最大, <span class="keyword">MIN</span>(salary) 最低, <span class="keyword">COUNT</span>(salary) 个数</span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="7-3-参数支持类型"><a href="#7-3-参数支持类型" class="headerlink" title="7.3 参数支持类型"></a>7.3 参数支持类型</h3><ol><li><code>sum</code>、<code>avg</code> 只支持数值型</li><li><code>max</code>、<code>min</code>、<code>count</code> 支持所有类型</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不支持以下类型，不合法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(last_name), <span class="keyword">AVG</span>(last_name) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment"># max和min支持字符型和日期型</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(last_name), <span class="keyword">MIN</span>(last_name), <span class="keyword">MIN</span>(hiredate) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment"># count 支持所有</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(commission_pct), <span class="keyword">COUNT</span>(last_name) <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="7-4-忽略-null"><a href="#7-4-忽略-null" class="headerlink" title="7.4 忽略 null"></a>7.4 忽略 null</h3><p>这些分组函数都忽略null值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(commission_pct), <span class="keyword">AVG</span>(commission_pct), <span class="keyword">SUM</span>(commission_pct)/<span class="number">35</span>,<span class="keyword">SUM</span>(commission_pct)/<span class="number">107</span> <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(commission_pct),<span class="keyword">MIN</span>(commission_pct) <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="7-5-和-DISTINCT-搭配"><a href="#7-5-和-DISTINCT-搭配" class="headerlink" title="7.5 和 DISTINCT 搭配"></a>7.5 和 DISTINCT 搭配</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">SUM</span>(<span class="keyword">DISTINCT</span> salary),<span class="keyword">SUM</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="keyword">DISTINCT</span> salary), <span class="keyword">COUNT</span>(salary) <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="7-6-count-函数详细介绍"><a href="#7-6-count-函数详细介绍" class="headerlink" title="7.6 count 函数详细介绍"></a>7.6 count 函数详细介绍</h3><p>统计行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>参数为常量值，则也统计行数：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(<span class="number">1</span>) <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>效率：</p><ul><li>MYISAM 存储引擎下，<code>count(*)</code> 的效率最高</li><li>INNODB 存储引擎下，<code>count(*)</code> 和 <code>count(*)</code> 的效率差不多，比 <code>count(字段)</code> 效率高</li></ul><h3 id="7-7-和分组函数一同查询的字段有限制"><a href="#7-7-和分组函数一同查询的字段有限制" class="headerlink" title="7.7 和分组函数一同查询的字段有限制"></a>7.7 和分组函数一同查询的字段有限制</h3><p>和分组函数一同查询的字段要求是 <code>group by</code> 后的字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),employee_id <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h1 id="（五）分组查询"><a href="#（五）分组查询" class="headerlink" title="（五）分组查询"></a>（五）分组查询</h1><h2 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h2><p>引入：查询每个部门的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 以前写法：求的是总平均工资。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="comment">-- 正确写法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary), department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-语法"><a href="#2-语法" class="headerlink" title="2. 语法"></a>2. 语法</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 分组函数, 列 <span class="comment">--列要求出现在 group by 的后面</span></span><br><span class="line"><span class="keyword">FROM</span> 表</span><br><span class="line">[<span class="keyword">WHERE</span> 筛选条件]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组的列表]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 列|分组函数];Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>注意： 查询列表必须特殊，要求是分组函数和 <code>group by</code> 后出现的字段。</p><blockquote><p>一般出现 “每个”、“各个”、“每一个”、“所有” 等词语，都是要进行分组查询，并且这些词的后紧接的就是 <code>ORDER BY</code> 后的内容。</p></blockquote><h2 id="3-简单分组函数"><a href="#3-简单分组函数" class="headerlink" title="3. 简单分组函数"></a>3. 简单分组函数</h2><p>案例一：查询每个工种的最高工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary), job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例二：查询每个位置上的部门个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),location_id</span><br><span class="line"><span class="keyword">FROM</span> departments</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> location_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-添加筛选条件"><a href="#2-添加筛选条件" class="headerlink" title="2. 添加筛选条件"></a>2. 添加筛选条件</h2><p>案例1：普询邮箱中包含a字符的，每个部门的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary), department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> email <span class="keyword">like</span> <span class="string">&#x27;%a%&#x27;</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2:查询有奖金的每个领导手下员工的最高工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary), manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="3-添加复杂的筛选条件"><a href="#3-添加复杂的筛选条件" class="headerlink" title="3. 添加复杂的筛选条件"></a>3. 添加复杂的筛选条件</h2><p>添加分组后的筛选：<code>HAVING</code></p><p>案例1: 查询哪个部门的员工个数&gt;2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*), department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">2</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询每个工种有奖金的员工的最高工资&gt;12000的工种编号和最高工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1. 查询每个工种有奖金的员工的最高工资</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;</span><br><span class="line"><span class="comment">-- 2. 根据1结果继续筛选，最高工资&gt;12000</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(salary)&gt;<span class="number">12000</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例3:查询领导编号&gt;102的每个领导手下的最低工资&gt;5000的领导编号</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MIN</span>(salary), manager_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> manager_id&gt;<span class="number">102</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> manager_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MIN</span>(salary)&gt;<span class="number">5000</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="4-分组查询特点"><a href="#4-分组查询特点" class="headerlink" title="4. 分组查询特点"></a>4. 分组查询特点</h2><p>分组查询中的筛选条件分为两类：</p><table><thead><tr><th>分类</th><th>数据源</th><th>关键字</th><th>位置</th></tr></thead><tbody><tr><td>分组前筛选</td><td>原始表</td><td><code>WHERE</code></td><td><code>GROUP BY</code> 子句的前面</td></tr><tr><td>分组后筛选</td><td>分组后的结果集</td><td><code>HAVING</code></td><td><code>GROUP BY</code> 子句的后面</td></tr></tbody></table><ol><li>分组函数做条件肯定是放在 <code>having</code> 子句中</li><li>能用分组前筛选的优先使用分组前筛选（性能好）</li><li><code>GROUP BY</code> 子句支持单个字段分组，多个字段分组（多个字段之间用逗号隔开，没有顺序要求）</li><li>排序查询放在最后</li></ol><h2 id="5-按表达式或函数分组"><a href="#5-按表达式或函数分组" class="headerlink" title="5. 按表达式或函数分组"></a>5. 按表达式或函数分组</h2><p>案例: 按员工姓名的长度分组，查询每一组的员工个数，筛选员工个数&gt;5</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- a. 查询每个长度的员工个数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*), <span class="keyword">LENGTH</span>(last_name) <span class="keyword">AS</span> len_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">LENGTH</span>(last_name)</span><br><span class="line"><span class="comment">-- b. 添加筛选条件</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) c, <span class="keyword">LENGTH</span>(last_name) <span class="keyword">AS</span> len_name</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> len_name</span><br><span class="line"><span class="keyword">HAVING</span> c&gt;<span class="number">5</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="6-按多个字段分组"><a href="#6-按多个字段分组" class="headerlink" title="6. 按多个字段分组"></a>6. 按多个字段分组</h2><p>案例: 查询每个部门每个工种的员工的平均工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary), department_id, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="7-分组查询添加排序"><a href="#7-分组查询添加排序" class="headerlink" title="7. 分组查询添加排序"></a>7. 分组查询添加排序</h2><p>案例: 查询每个部门每个工种的员工的平均工资，并且按平均工资的高低排列 排序查询放在最后</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) a, department_id, job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> department_id <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id, job_id</span><br><span class="line"><span class="keyword">HAVING</span> a&gt;<span class="number">10000</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> a <span class="keyword">DESC</span>;</span><br></pre></td></tr></table></figure><h1 id="（六）连接查询"><a href="#（六）连接查询" class="headerlink" title="（六）连接查询"></a>（六）连接查询</h1><p>含义：连接查询又称为多表查询，当查询的字段来自多个表时，就会用到连接查询。</p><h2 id="1-笛卡尔乘积"><a href="#1-笛卡尔乘积" class="headerlink" title="1. 笛卡尔乘积"></a>1. 笛卡尔乘积</h2><p>笛卡尔乘积现象：表1有 <code>m</code> 行，表2有 <code>n</code> 行，则查询结果有 <code>m*n</code> 行。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>, boyName <span class="keyword">FROM</span> boys, beauty;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>发生原因：没有有效的连接条件<br>解决办法：添加有效的连接条件</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>, boyName <span class="keyword">FROM</span> boys, beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id=boys.id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-连接查询分类"><a href="#2-连接查询分类" class="headerlink" title="2. 连接查询分类"></a>2. 连接查询分类</h2><h3 id="2-1-按年代分"><a href="#2-1-按年代分" class="headerlink" title="2.1 按年代分"></a>2.1 按年代分</h3><ol><li>sql192 标准【只支持内连接】</li><li>sql199 标准【推荐】支持内连接+外连接（左外和内外）+交叉连接</li></ol><h3 id="2-2-按功能分"><a href="#2-2-按功能分" class="headerlink" title="2.2 按功能分"></a>2.2 按功能分</h3><p><img src= "/img/loading.gif" data-lazy-src="https://z3.ax1x.com/2021/04/17/c4lurD.png" alt="img"></p><h2 id="3-等值连接-sql-92标准"><a href="#3-等值连接-sql-92标准" class="headerlink" title="3. 等值连接(sql 92标准)"></a>3. 等值连接(sql 92标准)</h2><h3 id="3-1-特点"><a href="#3-1-特点" class="headerlink" title="3.1 特点"></a>3.1 特点</h3><ol><li>多表等值连接的结果为多表的交集部分</li><li>n表连接，至少需要n-1个连接条件</li><li>多表的顺序没有要求</li><li>一般需要为表取别名</li><li>连接可以搭配前面所有子句使用，比如排序、分组、筛选</li></ol><h3 id="3-2-一般使用"><a href="#3-2-一般使用" class="headerlink" title="3.2 一般使用"></a>3.2 一般使用</h3><p>案例1: 查询女神名和对应的男神名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> girls;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="string">`name`</span>, boyName</span><br><span class="line"><span class="keyword">FROM</span> boys, beauty</span><br><span class="line"><span class="keyword">WHERE</span> beauty.boyfriend_id=boys.id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询员工名和对应的部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">USE</span> myemployees;</span><br><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees,departments</span><br><span class="line"><span class="keyword">WHERE</span> employees.department_id=departments.department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-3-为表取别名"><a href="#3-3-为表取别名" class="headerlink" title="3.3 为表取别名"></a>3.3 为表取别名</h3><p>优点：提高简洁度、区分重名字段 注意：如果为表起了别名，则查询的字段就不能使用原来的表名去限定</p><p>案例2：查询员工名、工种号、工种名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> jobs <span class="keyword">AS</span> j， employees <span class="keyword">AS</span> e</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id=j.job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-4-两表顺序可以调换"><a href="#3-4-两表顺序可以调换" class="headerlink" title="3.4 两表顺序可以调换"></a>3.4 两表顺序可以调换</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,e.job_id,j.job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id=j.job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-5-可以加筛选"><a href="#3-5-可以加筛选" class="headerlink" title="3.5 可以加筛选"></a>3.5 可以加筛选</h3><p>案例1: 查询有奖金的员工名、部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name,commission_pct</span><br><span class="line"><span class="keyword">FROM</span> employees e, departments d</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id=d.department_id</span><br><span class="line"><span class="keyword">AND</span> e.commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询城市名中第二个字符为o的部门名和城市名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name,city</span><br><span class="line"><span class="keyword">FROM</span> departments d, locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.location_id=l.location_id</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;_o%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-6-可以加分组"><a href="#3-6-可以加分组" class="headerlink" title="3.6 可以加分组"></a>3.6 可以加分组</h3><p>案例1：查询每个城市的部门个数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) 个数,city</span><br><span class="line"><span class="keyword">FROM</span> departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> d.location_id=l.location_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询有奖金的每个部门的部门名和部门的领导编号和该部门的最低工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> department_name, d.manager_id,<span class="keyword">MIN</span>(salary)</span><br><span class="line"><span class="keyword">FROM</span> departments d, employees e</span><br><span class="line"><span class="keyword">WHERE</span> d.department_id=e.department_id</span><br><span class="line"><span class="keyword">AND</span> commission_pct <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name,d.manager_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-7-可以加排序"><a href="#3-7-可以加排序" class="headerlink" title="3.7 可以加排序"></a>3.7 可以加排序</h3><p>案例：查询每个工种的工种名和员工的个数，并且按员工个数降序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> job_title,<span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> employees e,jobs j</span><br><span class="line"><span class="keyword">WHERE</span> e.job_id=j.job_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_title</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="3-8-可以实现三表连接"><a href="#3-8-可以实现三表连接" class="headerlink" title="3.8 可以实现三表连接"></a>3.8 可以实现三表连接</h3><p>案例：查询员工名、部门名和所在城市</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name,city</span><br><span class="line"><span class="keyword">FROM</span> employees e,departments d,locations l</span><br><span class="line"><span class="keyword">WHERE</span> e.department_id=d.department_id</span><br><span class="line"><span class="keyword">AND</span> d.location_id=l.location_id</span><br><span class="line"><span class="keyword">AND</span> city <span class="keyword">LIKE</span> <span class="string">&#x27;s%&#x27;</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="4-非等值连接-sql-92标准"><a href="#4-非等值连接-sql-92标准" class="headerlink" title="4. 非等值连接(sql 92标准)"></a>4. 非等值连接(sql 92标准)</h2><p>案例1：查询员工工资和工资级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary, grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e,job_grades g</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal</span><br><span class="line"><span class="keyword">AND</span> g.grade_level=<span class="string">&#x27;A&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="5-sql99-语法"><a href="#5-sql99-语法" class="headerlink" title="5. sql99 语法"></a>5. sql99 语法</h2><h3 id="5-1-基本语法与分类"><a href="#5-1-基本语法与分类" class="headerlink" title="5.1 基本语法与分类"></a>5.1 基本语法与分类</h3><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`表1`</span> 别名 [连接类型]</span><br><span class="line"><span class="keyword">JOIN</span> <span class="string">`表2`</span> 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件</span><br><span class="line">[<span class="keyword">WHERE</span> 筛选条件]</span><br><span class="line">[<span class="keyword">GROUP</span> <span class="keyword">BY</span> 分组]</span><br><span class="line">[<span class="keyword">HAVING</span> 筛选条件]</span><br><span class="line">[<span class="keyword">ORDER</span> <span class="keyword">BY</span> 排序列表]Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>分类： <img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/mysql/sql99%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A2.34ageiizgby0.png" alt="sql99连接查询"></p><h3 id="5-2-内连接"><a href="#5-2-内连接" class="headerlink" title="5.2 内连接"></a>5.2 内连接</h3><p>基本语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 查询列表</span><br><span class="line"><span class="keyword">FROM</span> 表<span class="number">1</span> 别名</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">ON</span> 连接条件Copy <span class="keyword">to</span> clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="1-等值连接"><a href="#1-等值连接" class="headerlink" title="1. 等值连接"></a>1. 等值连接</h4><p>特点：</p><ol><li>可以添加排序、分组、筛选</li><li>inner 可以省略</li><li>筛选条件放在where后，连接条件放在on后</li><li>和sql92标准等值连接效果一样</li></ol><p>案例1：查询员工名、部门名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name, department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id=d.department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2： 查询名宇字中包含e的员工名和工种名（添加筛选）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> e.job_id=j.job_id</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%e%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><ol><li><p>查询部门个数&gt;3的城市名和部门个数(添加分组和筛选）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> city,<span class="keyword">COUNT</span>(*)</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> locations l</span><br><span class="line"><span class="keyword">ON</span> d.location_id=l.location_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> city</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查询哪个部门的部门员工个数&gt;3的部门名和员工个数，并按个数降序（添加排序）</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),department_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id=d.department_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_name</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">3</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">COUNT</span>(*) <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><ol><li>查询员工名、部门名、工种名，并按部门名降序（多表连接）</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d </span><br><span class="line"><span class="keyword">ON</span> e.department_id=d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> e.job_id=j.job_id</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> department_name <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="2-非等值连接"><a href="#2-非等值连接" class="headerlink" title="2. 非等值连接"></a>2. 非等值连接</h4><p>案例1：查询员工的工资级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> salary,grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> e.salary <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询每个工资级别的个数&gt;20，并按级别排序</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*),grade_level</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> e.salary <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> grade_level</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">COUNT</span>(*)&gt;<span class="number">20</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> grade_level <span class="keyword">DESC</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h4 id="3-自连接"><a href="#3-自连接" class="headerlink" title="3. 自连接"></a>3. 自连接</h4><p>查询包含字符k的员工名字和上级名字</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.last_name,m.last_name</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> employees m</span><br><span class="line"><span class="keyword">ON</span> e.manager_id=m.employee_id</span><br><span class="line"><span class="keyword">WHERE</span> e.last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%k%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="5-3-外连接"><a href="#5-3-外连接" class="headerlink" title="5.3 外连接"></a>5.3 外连接</h3><p>应用场景：用于查询一个表中有，另一个表中没有的记录。 特点：</p><ol><li>外连接的查询结果为主表中的所有记录，如果从表中有和他匹配的，则显示匹配的值，如果从表中没有，则显示 <code>null</code>。<br>外连接查询结果 = 内连接结果 + 主表中有而从表中没有的记录。</li><li>左外连接中：left 左边的为主表 右外连接：right 右边的为主表</li><li>左外和右外交换两个表的顺序，可以实现同样的效果。</li><li>全外连接 = 内连接 + 表1有但表2没有 + 表2有但表1没有的</li></ol><p>案例1：左、右外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 引入：查询男朋友不在男生表的女神名</span></span><br><span class="line"><span class="keyword">SELECT</span> b.<span class="string">`name`</span>, bo.*</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> b.boyfriend_id=bo.id</span><br><span class="line"><span class="keyword">WHERE</span> bo.id <span class="keyword">IS</span> <span class="literal">NULL</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询哪个部门没有员工</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> d.*,e.employee_id</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> employees e</span><br><span class="line"><span class="keyword">ON</span> d.department_id=e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.employee_id <span class="keyword">IS</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="comment">-- 右外连接</span></span><br><span class="line"><span class="keyword">SELECT</span> d.*,e.employee_id</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> d.department_id=e.department_id</span><br><span class="line"><span class="keyword">WHERE</span> e.employee_id <span class="keyword">IS</span> <span class="literal">NULL</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例3：全外连接</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 不支持！ </span></span><br><span class="line"><span class="keyword">USE</span> girls;</span><br><span class="line"><span class="keyword">SELECT</span> b.*,bo.*</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">FULL</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> boys bo</span><br><span class="line"><span class="keyword">ON</span> b.boyfriend_id = bo.id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="5-4-交叉连接"><a href="#5-4-交叉连接" class="headerlink" title="5.4 交叉连接"></a>5.4 交叉连接</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> b.*,bo.*</span><br><span class="line"><span class="keyword">FROM</span> beauty b</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> boys bo;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="5-5-集合表示"><a href="#5-5-集合表示" class="headerlink" title="5.5 集合表示"></a><a href="https://docs.mphy.top/#/MySQL/ch06?id=_55-集合表示">5.5 集合表示</a></h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/mysql/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A21.3brcznoug820.png" alt="连接查询1"></p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Hacker-C/Picture-Bed@main/mysql/%E8%BF%9E%E6%8E%A5%E6%9F%A5%E8%AF%A22.2wt96ka3nrq0.png" alt="连接查询2"></p><h1 id="（七）子查询"><a href="#（七）子查询" class="headerlink" title="（七）子查询"></a>（七）子查询</h1><h2 id="1-子查询概述"><a href="#1-子查询概述" class="headerlink" title="1. 子查询概述"></a>1. 子查询概述</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><ul><li>概念：出现在 <strong>其他语句内部</strong> 的select语句，称为 <strong>子查询或内查询</strong></li><li><strong>内部嵌套其他select语句</strong> 的查询，称为 <strong>外查询或主查询</strong></li></ul><h3 id="1-2-分类"><a href="#1-2-分类" class="headerlink" title="1.2 分类"></a>1.2 分类</h3><h4 id="（1）按结果集的行列数不同"><a href="#（1）按结果集的行列数不同" class="headerlink" title="（1）按结果集的行列数不同"></a>（1）按结果集的行列数不同</h4><ul><li>标量子查询（结果集只有一行一列）</li><li>列子查询（结果集只有一列多行）</li><li>行子查询（结果集有一行多列）</li><li>表子查询（结果集一般为多行多列）</li></ul><h4 id="（2）按子查询出现的位置select后面：仅仅支持标量子查询"><a href="#（2）按子查询出现的位置select后面：仅仅支持标量子查询" class="headerlink" title="（2）按子查询出现的位置select后面：仅仅支持标量子查询"></a>（2）按子查询出现的位置select后面：仅仅支持标量子查询</h4><ul><li><p>from后面：支持表子查询</p></li><li><p>where或having后面</p><p>：</p><ul><li><strong>标量子查询（单行）</strong></li><li><strong>列子查询（多行）</strong></li><li>行子查询</li></ul></li><li><p>exists后面（相关子查询）：表子查询</p></li></ul><h3 id="1-3-子查询的使用"><a href="#1-3-子查询的使用" class="headerlink" title="1.3 子查询的使用"></a>1.3 子查询的使用</h3><h4 id="（1）放在where或having后面"><a href="#（1）放在where或having后面" class="headerlink" title="（1）放在where或having后面"></a>（1）放在where或having后面</h4><ol><li>标量子查询（单行子查询）</li><li>列子查询（多行子查询）</li><li>行子查询（多列多行）</li></ol><h5 id="①-标量子查询"><a href="#①-标量子查询" class="headerlink" title="① 标量子查询"></a>① 标量子查询</h5><p><strong>子查询特点</strong>：</p><ul><li>子查询放在 <strong>小括号内</strong></li><li>子查询一般放在 <strong>条件的右侧</strong></li><li>标量子查询，一般搭配着 <strong>单行操作符</strong> 使用<br><code>&gt;&lt;&gt;=&lt;= =&lt; &lt;&gt;</code></li><li>列子查询，一般搭配着多行操作符使用<br><code>IN、ANY/ SOME、ALL</code></li><li>子查询的执行 <strong>优先于主查询执行，因为主查询的条件需要使用子查询的结果</strong></li></ul><h5 id="②-多行子查询"><a href="#②-多行子查询" class="headerlink" title="② 多行子查询"></a>② 多行子查询</h5><ul><li>返回多行</li><li>使用多行操作比较操作符</li></ul><table><thead><tr><th>操作符</th><th>含义</th></tr></thead><tbody><tr><td>IN/NOT IN</td><td>等于列表中 <strong>任意一个</strong></td></tr><tr><td>ANY/SOME</td><td>和子查询返回的 <strong>某一个值</strong> 比较</td></tr><tr><td>ALL+</td><td>和子查询返回的 <strong>所有值</strong> 比较</td></tr></tbody></table><h5 id="③-行子查询"><a href="#③-行子查询" class="headerlink" title="③ 行子查询"></a>③ 行子查询</h5><p>行子查询：结果为一行多列或多行多列。（不常用）</p><h1 id="（八）事务"><a href="#（八）事务" class="headerlink" title="（八）事务"></a>（八）事务</h1><h2 id="1-相关概念"><a href="#1-相关概念" class="headerlink" title="1. 相关概念"></a>1. 相关概念</h2><ul><li>事务：一个或一组sql语句组成的一个 <strong>执行单元</strong>，这个执行单元 <strong>要么全部执行，要么全部不执行</strong>。</li><li>TCL：Transaction Control Language，事务控制语言</li><li>事务由单独单元的一个或多个SQL语句组成，在这个单元中,每个MySQL语句是相互依赖的。而整个单独单元作为一个不可分割的整体，如果单元中某条SQL语句 <strong>一旦执行失败或产生错误</strong>，整个单元将会 <strong>回滚</strong>。所有受到影响的数据将返回到事物开始以前的状态；如果单元中的所有SQL语句均执行成功，则事物被顺利执行。</li></ul><p>案例：转账</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">张三丰  1000</span><br><span class="line">郭襄    1000</span><br><span class="line">update 表 set 张三丰的余额&#x3D;500 where name&#x3D;&#39;张三丰&#39;</span><br><span class="line">意外</span><br><span class="line">update 表 set 郭襄的余额&#x3D;1500 where name&#x3D;&#39;郭襄&#39;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-存储引擎"><a href="#2-存储引擎" class="headerlink" title="2. 存储引擎"></a>2. 存储引擎</h2><p>1、概念：在mysql中的数据用各种不同的技术存储在文件(或内存)中 2、通过show engines; 来查看mysq1支持的存储引擎。 3、 在mysq1中用的最多的存储引擎有: innodb，myisam，memory等。其中innodb支持事务，而 myIsam，memory 等不支持事务</p><h2 id="3-事务的特性"><a href="#3-事务的特性" class="headerlink" title="3. 事务的特性"></a>3. 事务的特性</h2><p>事务的特性：ACID</p><ul><li>原子性（A）：一个事务不可再分割，要么都执行要么都不执行</li><li>一致性（C）：一个事务执行会使数据从一个一致状态切换到另外一个一致状态</li><li>隔离性（I）：一个事务的执行不受其他事务的干扰</li><li>持久性（D）：一个事务一旦提交，则会永久的改变数据库的数据。</li></ul><h2 id="4-事务的创建"><a href="#4-事务的创建" class="headerlink" title="4. 事务的创建"></a>4. 事务的创建</h2><h3 id="4-1-隐式事务"><a href="#4-1-隐式事务" class="headerlink" title="4.1 隐式事务"></a>4.1 隐式事务</h3><p>隐式事务：事务没有明显的开启和结束的标记,比如insert、update、delete语句。默认一个命令是一个事务。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表 <span class="keyword">where</span> <span class="keyword">id</span> =<span class="number">1</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="4-2-显式事务"><a href="#4-2-显式事务" class="headerlink" title="4.2 显式事务"></a>4.2 显式事务</h3><p>显式事务：事务具有明显的开启和结束的标记<br>前提：必须先设置自动提交功能为禁用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>步骤1：开启事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>; <span class="comment">-- 可选的Copy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure><p>步骤2：编写事务中的sql语句（select insert update delete）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">语句1;</span><br><span class="line">语句2;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>步骤3：结束事务</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">commit</span>; <span class="comment">-- 提交事务</span></span><br><span class="line"><span class="keyword">rollback</span>; <span class="comment">-- 回滚事务</span></span><br><span class="line"><span class="keyword">savepoint</span> 节点名; <span class="comment">-- 设置保存点Copy to clipboardErrorCopied</span></span><br></pre></td></tr></table></figure><h2 id="5-数据库的隔离级别"><a href="#5-数据库的隔离级别" class="headerlink" title="5. 数据库的隔离级别"></a>5. 数据库的隔离级别</h2><ul><li><p>对于同时运行的多个事务,当这些事务访问数据库中相同的数据时，如果没有采取必要的隔离机制，就会导致各种并发问题：</p><ul><li><strong>脏读</strong>：对于两个事务T1, T2, T1读取了已经被T2更新但还没有被提交的字段之后，若T2回滚, T1读取的内容就是临时且无效的.</li><li><strong>不可重复读</strong>：对于两个事务T1, T2, T1读取了一个字段,然后T2更新了该字段之后, T1再次读取同一个字段,值就不同了.</li><li><strong>幻读</strong>：对于两个事务T1,T2, T1从一个表中读取了一个字段然后T2在该表中插入了一些新的行之后，如果T1再次读取同一个表,就会多出几行.</li></ul></li><li><p><strong>数据库事务的隔离性</strong>：数据库系统必须具有隔离并发运行各个事务的能力，使它们不会相互影响,避免各种并发问题。</p></li><li><p><strong>数据库隔离级别</strong>：一个事务与其他事务隔离的程度称为隔离级别。数据库规定了多种事务隔离级别,不同隔离级别对应不同的干扰程度，<strong>隔离级别越高，数据一致性就越好</strong>，但 <strong>并发性越弱</strong>。</p></li><li><p>查看当前的隔离级别：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>@@tx_isolation;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>设置当前mySQL连接的隔离级别:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>设置数据库系统的全局的隔离级别:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> <span class="keyword">read</span> committed;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ul><p>每启动一个mysql程序,就会获得一一个单独的数据库连接。每个数据库连接都有一个全局变量 <code>@@tx__isolation</code>，表示当前的 事务隔离级别。</p><table><thead><tr><th>事务的隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>read uncommitted</td><td>√</td><td>√</td><td>√</td></tr><tr><td>read committed</td><td>×</td><td>√</td><td>√</td></tr><tr><td>repeatable read</td><td>×</td><td>×</td><td>√</td></tr><tr><td>serializable</td><td>×</td><td>×</td><td>×</td></tr></tbody></table><ul><li><p>mysql中默认 第三个隔离级别 <code>repeatable read</code></p></li><li><p>oracle中默认第二个隔离级别</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">read committed</span><br></pre></td></tr></table></figure><p>  查看隔离级别</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> @@tx_isolation;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>  设置隔离级别</p>  <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">session</span>|<span class="keyword">global</span> <span class="keyword">transaction</span> <span class="keyword">isolation</span> <span class="keyword">level</span> 隔离级别;</span><br></pre></td></tr></table></figure><h1 id="（八）视图"><a href="#（八）视图" class="headerlink" title="（八）视图"></a>（八）视图</h1><h2 id="1-视图的概念"><a href="#1-视图的概念" class="headerlink" title="1. 视图的概念"></a>1. 视图的概念</h2><p>视图：MySQL从5.0.1版本开始提供视图功能。是 <strong>一种虚拟存在的表</strong>，行和列的数据来自定义视图的查询中使用的表，并且是在使用视图时 <strong>动态生成</strong> 的，<strong>只保存了sql逻辑，不保存查询结果</strong>。</p><p>应用场景:</p><ul><li>多个地方用到 <strong>同样的查询结果</strong></li><li>该查询结果 <strong>使用的sql语句较复杂</strong></li></ul><p>案例1：查询姓张的学生的名字和专业名</p><ol><li><p>不使用视图：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> studentname,majorname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m</span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.majorid</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>使用视图：</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> studentname,majorname</span><br><span class="line"><span class="keyword">FROM</span> student s</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> major m</span><br><span class="line"><span class="keyword">ON</span> s.majorid=m.majorid;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> v1</span><br><span class="line"><span class="keyword">WHERE</span> studentname <span class="keyword">LIKE</span> <span class="string">&#x27;张%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-创建视图"><a href="#2-创建视图" class="headerlink" title="2. 创建视图"></a>2. 创建视图</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例1：查询邮箱中包含a字符的员工名、部门名和工种信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,department_name,job_title</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> e.department_id=d.department_id</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> jobs j</span><br><span class="line"><span class="keyword">ON</span> j.job_id=e.job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询各部门的平均工资级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">avg</span>,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myv2.avg,g.grade_level</span><br><span class="line"><span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> myv2.avg <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例3：查询平均工资最低的部门门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">avg</span> <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例4：查询平均工资最低的部门名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">avg</span> <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.*,m.AVG</span><br><span class="line"><span class="keyword">FROM</span> myv3 m</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> m.department_id=d.department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="3-视图的优点"><a href="#3-视图的优点" class="headerlink" title="3. 视图的优点"></a>3. 视图的优点</h2><ul><li>重用sql语句</li><li>简化复杂的sql操作，不必知道查询细节</li><li>保护数据，提高安全性</li></ul><blockquote><p>(1) 视图能够简化用户的操作 (2) 视图使用户能以多种角度看待同一数据； (3) 视图为数据库提供了一定程度的逻辑独立性； (4) 视图能够对机密数据提供安全保护。</p></blockquote><h2 id="4-使用视图"><a href="#4-使用视图" class="headerlink" title="4. 使用视图"></a>4. 使用视图</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv1</span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> <span class="string">&#x27;%a%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：查询各部门的平均工资级别</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary) <span class="keyword">avg</span>,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> myv2.avg,g.grade_level</span><br><span class="line"><span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> job_grades g</span><br><span class="line"><span class="keyword">ON</span> myv2.avg <span class="keyword">BETWEEN</span> g.lowest_sal <span class="keyword">AND</span> g.highest_sal;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例3：查询平均工资最低的部门门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">avg</span> <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例4：查询平均工资最低的部门名和工资</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv2</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="keyword">avg</span> <span class="keyword">ASC</span></span><br><span class="line"><span class="keyword">LIMIT</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.*,m.AVG</span><br><span class="line"><span class="keyword">FROM</span> myv3 m</span><br><span class="line"><span class="keyword">JOIN</span> departments d</span><br><span class="line"><span class="keyword">ON</span> m.department_id=d.department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="5-视图的修改"><a href="#5-视图的修改" class="headerlink" title="5.视图的修改"></a>5.视图的修改</h2><p>方式一：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">AVG</span>(salary),job_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> job_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> 视图名</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line">查询语句;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> myv3</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="6-删除视图"><a href="#6-删除视图" class="headerlink" title="6. 删除视图"></a>6. 删除视图</h2><p>语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> 视图名<span class="number">1</span>,视图名<span class="number">2</span>,...</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> myv1,myv2,myv3;</span><br><span class="line"></span><br><span class="line">DESC myv3;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">VIEW</span> myv3;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="7-案例讲解"><a href="#7-案例讲解" class="headerlink" title="7. 案例讲解"></a>7. 案例讲解</h2><p>案例1：创建视图emp_v1,要求查询电话号码以’011’并头的员工姓名和工资、邮箱</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> emp_v1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,salary,email</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> phone_number <span class="keyword">LIKE</span> <span class="string">&#x27;011%&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> emp_v1;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：创建视图emp_v2，要求查询部门的最高工资高于12000的部门信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> emp_v2</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">MAX</span>(salary) mx_dep,department_id</span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> department_id</span><br><span class="line"><span class="keyword">HAVING</span> <span class="keyword">MAX</span>(salary)&gt;<span class="number">12000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> d.*,m.mx_dep</span><br><span class="line"><span class="keyword">FROM</span> departments d</span><br><span class="line"><span class="keyword">JOIN</span> emp_v2 m</span><br><span class="line"><span class="keyword">ON</span> m.department_id=d.department_id;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="8-视图的更新"><a href="#8-视图的更新" class="headerlink" title="8. 视图的更新"></a>8. 视图的更新</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> emp_v1,emp_v2,myv1,myv2,myv3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> <span class="keyword">REPLACE</span> <span class="keyword">VIEW</span> myv1</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> last_name,email</span><br><span class="line"><span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="8-1-插入"><a href="#8-1-插入" class="headerlink" title="8.1 插入"></a>8.1 插入</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> myv1 <span class="keyword">VALUES</span>(<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;zf@qq.com&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> myv1;</span><br><span class="line"><span class="comment">--原始表也更新了</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> employees;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="8-2-修改"><a href="#8-2-修改" class="headerlink" title="8.2 修改"></a>8.2 修改</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> myv1 <span class="keyword">SET</span> last_name=<span class="string">&#x27;张无忌&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name=<span class="string">&#x27;张飞&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h3 id="8-3-删除"><a href="#8-3-删除" class="headerlink" title="8.3 删除"></a>8.3 删除</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> myv1 <span class="keyword">WHERE</span> last_name=<span class="string">&#x27;张无忌&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="9-视图不能轻易更改"><a href="#9-视图不能轻易更改" class="headerlink" title="9. 视图不能轻易更改"></a>9. 视图不能轻易更改</h2><p>视图的可更新性和视图中 <strong>查询的定义</strong> 有关系，<strong>以下类型的视图是不能更新</strong> 的。</p><ul><li>包含以下关键字的sql语句:分组函数、distinct、group by、having、uniox或者union all</li><li>常量视图</li><li>select中包含子查询join</li><li>from一个不能更新的视图</li><li>where子句的子查询引用了from子句中的表</li></ul><p><strong>注意</strong></p><blockquote><p>视图是由从数据库的基本表中选取出来的数据组成的逻辑窗口，它不同于基本表，它是一个虚拟表，其内容由查询定义。在数据库中，存放的只是视图的定义而已，而不存放数据，这些数据仍然存放在原来的基本表结构中。只有在使用视图的时候，才会执行视图的定义，从基本表中查询数据。可以更新视图，也可以在视图上定义新的视图，但是不能在视图上定义新的表</p></blockquote><h2 id="10-视图和表的区别"><a href="#10-视图和表的区别" class="headerlink" title="10. 视图和表的区别"></a>10. 视图和表的区别</h2><table><thead><tr><th></th><th>创建语法关键字</th><th>是否实际占用物理空间</th><th>使用</th></tr></thead><tbody><tr><td>视图</td><td><code>CREATE VIEW</code></td><td>没有，虚表，只是保存逻辑</td><td>增删改查，一般不更新</td></tr><tr><td>表</td><td><code>CREATE TABLE</code></td><td>占有，保存了实际数据</td><td>增删改查</td></tr></tbody></table><blockquote><p>什么是基本表?什么是视图?两者的区别和联系是什么? 基本表是本身独立存在的表，在SQL中一个关系就对应一个表。视图是从一个或几个基本表导出的表。视图本身不存在独立存储在数据库中，是一个虚表。即数据库中只存放视图的定义而不存放视图对应的数据，这些数据仍然存放在导出视图的基本表中。视图在概念上基本与表等同。视图在概念上与基本表等同，用户可以在基本表那样使用视图，可以在视图上再定义视图。</p></blockquote><h1 id="（九）存储过程与函数"><a href="#（九）存储过程与函数" class="headerlink" title="（九）存储过程与函数"></a>（九）存储过程与函数</h1><h2 id="1-变量"><a href="#1-变量" class="headerlink" title="1. 变量"></a>1. 变量</h2><h3 id="1-1-变量的介绍"><a href="#1-1-变量的介绍" class="headerlink" title="1.1 变量的介绍"></a>1.1 变量的介绍</h3><ul><li>系统变量<ul><li>全局变量</li><li>会话变量</li></ul></li><li>自定义变量<ul><li>用户变量</li><li>局部变量</li></ul></li></ul><h3 id="1-2-系统变量"><a href="#1-2-系统变量" class="headerlink" title="1.2 系统变量"></a>1.2 系统变量</h3><h4 id="1-系统变量"><a href="#1-系统变量" class="headerlink" title="1. 系统变量"></a>1. 系统变量</h4><p>系统变量由系统提供，不是用户定义的，属于服务器层面。 <strong>系统变量分为全局变量和会话变量</strong>。</p><ol><li><p>查看系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看满足条件的部分系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;</span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看指定系统变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@.系统变量名;</span><br><span class="line"><span class="keyword">SELECT</span> @@global.系统变量名;</span><br><span class="line"><span class="keyword">SELECT</span> @@session.系统变量名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>为系统变量赋值<br>方式1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">GLOBAL</span> 系统变量名 = 值;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> 系统变量名 = 值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式2</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @@global.系统变量名 = 值;</span><br><span class="line"><span class="keyword">SET</span> @@session.系统变量名 = 值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-全局变量"><a href="#2-全局变量" class="headerlink" title="2. 全局变量"></a>2. 全局变量</h4><ul><li>作用域：整个服务器</li><li>能跨连接，不能跨重启。</li></ul><ol><li><p>查看所有全局变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看部分全局变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">GLOBAL</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看指定全局变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@GLOBAL.autocommit;</span><br><span class="line"><span class="keyword">SELECT</span> @@tx_isolation;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>给全局变量赋值<br>跨连接有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @@global.autocommit=<span class="number">0</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-会话变量"><a href="#3-会话变量" class="headerlink" title="3. 会话变量"></a>3. 会话变量</h4><p>作用域：仅仅针对于当前会话（连接）有效</p><ol><li><p>查看所有会话变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看部分会话变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">SESSION</span> <span class="keyword">VARIABLES</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%char%&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>查看指定会话变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @@session.autocommit;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>给会话变量赋值 仅限当前有效</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @@tx_isolation=<span class="string">&#x27;read-uncommitted&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">SESSION</span> tx_isolation = <span class="string">&#x27;read-committed&#x27;</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-2-自定义变量"><a href="#1-2-自定义变量" class="headerlink" title="1.2 自定义变量"></a>1.2 自定义变量</h3><p>说明：变量由用户自定义，不是系统的<br>使用步骤：声明、赋值、使用<br><strong>自定义变量分为用户变量和局部变量。</strong></p><h4 id="1-用户变量"><a href="#1-用户变量" class="headerlink" title="1. 用户变量"></a>1. 用户变量</h4><p>作用域：针对当前会话（连接）有效，同于会话变量作用域。<br>可应用在任何地方。</p><ol><li>声明并初始化</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @用户变量名=值;</span><br><span class="line"><span class="comment">-- 推荐</span></span><br><span class="line"><span class="keyword">SET</span> @用户变量名:=值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:=值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><ol><li><p>赋值（更新）</p><p>方式一：SET、SELECT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @用户变量名=值;</span><br><span class="line"><span class="keyword">SET</span> @用户变量名:=值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:=值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二：SELECT INTO</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 变量名了</span><br><span class="line"><span class="keyword">FROM</span> 表;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例1：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">name</span>=<span class="string">&#x27;jack&#x27;</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">name</span>=<span class="number">100</span>;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">name</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>案例2：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @<span class="keyword">count</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">COUNT</span>(*) <span class="keyword">INTO</span> @<span class="keyword">count</span></span><br><span class="line"><span class="keyword">FROM</span> employees;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">count</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> @用户变量名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-局部变量"><a href="#2-局部变量" class="headerlink" title="2. 局部变量"></a>2. 局部变量</h4><p>作用域：仅仅在定义它的begin end中有效 应用在begin end中的第一句话</p><ol><li><p>声明</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DECLARE</span> 变量名 类型;</span><br><span class="line"><span class="keyword">DECLARE</span> 变量名 类型 <span class="keyword">DEFAULT</span> 值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>赋值（更新）</p><p>方式一：SET、SELECT</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> 用户变量名=值;</span><br><span class="line"><span class="keyword">SET</span> 用户变量名:=值;</span><br><span class="line"><span class="keyword">SELECT</span> @用户变量名:=值;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>方式二：SELECT INTO</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 字段 <span class="keyword">INTO</span> 变量名了</span><br><span class="line"><span class="keyword">FROM</span> 表;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><ol><li><p>使用</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 局部变量名;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure></li><li><p>对比用户变量和局部变量</p><table><thead><tr><th>变量</th><th>作用域</th><th>定义和使用的位置</th><th>语法</th></tr></thead><tbody><tr><td>用户变量</td><td>当前会话</td><td>会话中的任何位置</td><td>必须加@，不用限定类型</td></tr><tr><td>局部变量</td><td>begin-end中</td><td>只能在begin-end中，且为第一句话</td><td>一般不加@，必须限定类型</td></tr></tbody></table></li></ol></li></ol><p>案例：声明两个变量并相加</p><p>（1）用户变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> @m=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">SET</span> @n=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">SET</span> @<span class="keyword">sum</span>=@m+@n;</span><br><span class="line"><span class="keyword">SELECT</span> @<span class="keyword">sum</span>;Copy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><p>（2）局部变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 必须在begin-end中</span></span><br><span class="line"><span class="keyword">DECLARE</span> m <span class="built_in">INT</span> <span class="keyword">DECLARE</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> n <span class="built_in">INT</span> <span class="keyword">DECLARE</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">DECLARE</span> <span class="keyword">sum</span> <span class="built_in">INT</span>;</span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">sum</span>=m+n;</span><br><span class="line">ENDCopy to clipboardErrorCopied</span><br></pre></td></tr></table></figure><h2 id="2-存储过程"><a href="#2-存储过程" class="headerlink" title="2. 存储过程"></a>2. 存储过程</h2><p>存储过程和函数：类似于java中的方法<br>好处:</p><ol><li>提高代码的重用性</li><li>简化操作</li></ol><p>存储过程 含义:一组预先编译好的sQL语句的集合，理解成批处理语句<br>优点：</p><ol><li>提高代码的重用性</li><li>简化操作</li><li>减少了编译次数并且减少了和数据库服务器的连接次数，提高了效率</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;（一）数据库和SQL概述&quot;&gt;&lt;a href=&quot;#（一）数据库和SQL概述&quot; class=&quot;headerlink&quot; title=&quot;（一）数据库和SQL概述&quot;&gt;&lt;/a&gt;（一）数据库和SQL概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-数据库的好处&quot;&gt;&lt;a href=&quot;#1-1
      
    
    </summary>
    
    
    
      <category term="MySQL" scheme="http://blog.isk.ink/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>Java I/O流</title>
    <link href="http://blog.isk.ink/2021/09/25/Java-I-O%E6%B5%81/"/>
    <id>http://blog.isk.ink/2021/09/25/Java-I-O%E6%B5%81/</id>
    <published>2021-09-24T18:17:39.000Z</published>
    <updated>2021-10-01T01:21:12.999Z</updated>
    
    <content type="html"><![CDATA[<h2 id="处理流之一-缓冲流的使用"><a href="#处理流之一-缓冲流的使用" class="headerlink" title="处理流之一: 缓冲流的使用"></a>处理流之一: 缓冲流的使用</h2><h3 id="缓冲流"><a href="#缓冲流" class="headerlink" title="缓冲流"></a>缓冲流</h3><ul><li><code>ByfferedInputStream</code></li><li><code>BufferedOutStream</code></li><li><code>BufferedReader</code></li><li><code>BuffererWriter</code></li></ul><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>提供流的读取,写入的速度</p><p>提高写入速度的原因: 内部提供了一个缓冲区</p><h2 id="流的三种分类"><a href="#流的三种分类" class="headerlink" title="流的三种分类"></a>流的三种分类</h2><p>流向:  输入流,输出流</p><p>数据单位: 字节流, 字符流</p><p>流的角色: 节点流, 处理流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*  RandomAccessFile的使用:</span></span><br><span class="line"><span class="comment">* 1.RandomAccessFIle直接继承于java.lang.Object类,实现了DataInput和DataOut接口</span></span><br><span class="line"><span class="comment">* 2.RandomAccessFile既可以作为一个输入流,也可以作为以为输出流</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 3.如果RandomAccessFile作为输出流时,写出的文件如果不存在,则在执行过程中自动创建.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*4.使用RandomAccessFile可以作为插入使用.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomAccessFileTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span>  </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">null</span>;</span><br><span class="line">        RandomAccessFile raf2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">             raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;2000.jpg&quot;</span>),<span class="string">&quot;r&quot;</span>);</span><br><span class="line"></span><br><span class="line">             raf2 = <span class="keyword">new</span> RandomAccessFile(<span class="keyword">new</span> File(<span class="string">&quot;2001.jpg&quot;</span>),<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line">            <span class="keyword">while</span>((len = raf1.read(buffer)) != -<span class="number">1</span>)&#123;</span><br><span class="line">                raf2.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(raf1 !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf1.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(raf2 !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    raf2.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        raf1.seek(<span class="number">3</span>);<span class="comment">//指针调到角标为3的位置. 实现插入</span></span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*使用RandomAccessFile实现数据的插入效果</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        RandomAccessFile raf1 = <span class="keyword">new</span> RandomAccessFile(<span class="string">&quot;hello.txt&quot;</span>,<span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        raf1.seek(<span class="number">3</span>); <span class="comment">//将指针调到角标3的位置</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存指针3后面的所有数据到StringBuilder中</span></span><br><span class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder((<span class="keyword">int</span>)<span class="keyword">new</span> File(<span class="string">&quot;hello.txt&quot;</span>).length());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] buffer  = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">20</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len = raf1.read(buffer))  != -<span class="number">1</span>)&#123;</span><br><span class="line">            builder.append(<span class="keyword">new</span> String(buffer,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调回指针,写入&quot;xyz&quot;</span></span><br><span class="line">        raf1.seek(<span class="number">3</span>);</span><br><span class="line">        raf1.write(<span class="string">&quot;xyz&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将StirngBuilder中的数据写入到文件中.</span></span><br><span class="line">        raf1.write(builder.toString().getBytes());</span><br><span class="line"></span><br><span class="line">        raf1.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象流:</span></span><br><span class="line"><span class="comment">//    1.ObjectInputStream 和 objectOutputStream</span></span><br><span class="line"><span class="comment">//    2.作用: 用于存储和读取基本数据类型或对象的处理流.</span></span><br><span class="line"><span class="comment">//    3.要想一个java对象是和序列化的,需要满足相应的要求. 见Person类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectInputOutputStreamTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*序列化过程: 将内存中的java对象保存到磁盘中或通过网络传输出去</span></span><br><span class="line"><span class="comment">    * 使用ObjectOutputStream实现*/</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectOutputStream oss = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            oss = <span class="keyword">new</span> ObjectOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line">            oss.writeObject(<span class="keyword">new</span> String(<span class="string">&quot;我爱北京天安门&quot;</span>));</span><br><span class="line">            oss.flush();<span class="comment">//刷新</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            oss.writeObject(<span class="keyword">new</span> Person(<span class="string">&quot;王明&quot;</span>,<span class="number">23</span>));</span><br><span class="line">            oss.flush();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oss != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    oss.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//反序列过程: 将磁盘文件中的对象还原为内存中的一个对象</span></span><br><span class="line"><span class="comment">//    使用ObjectInputStream来实现</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        ObjectInputStream ois  = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;object.dat&quot;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            Object obj = ois.readObject();</span><br><span class="line">            String str =(String) obj;</span><br><span class="line"></span><br><span class="line">            Person p = (Person)  ois.readObject();</span><br><span class="line"></span><br><span class="line">            System.out.println(str);</span><br><span class="line">            System.out.println(p);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(ois != <span class="keyword">null</span>)&#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    ois.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;http:localhost:8080&#x2F;emamples&#x2F;beauty.jpg?usrname&#x3D;Tom</span><br><span class="line">&#x2F;&#x2F;协议    主机名   端口    资源地址           参数列表</span><br></pre></td></tr></table></figure><p>常用方法:</p><ul><li>public void getProtocol():  获取该URL的协议名</li><li>public void getHost():  获取该URL的主机名</li><li>public void getPort(): 获取该URL的端口名</li><li>public void getPath(): 获取该URL的文件路径</li><li>public void getFile(): 获取该URL的文件名</li><li>public void getQuery(): 获取该URL的查询名</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;处理流之一-缓冲流的使用&quot;&gt;&lt;a href=&quot;#处理流之一-缓冲流的使用&quot; class=&quot;headerlink&quot; title=&quot;处理流之一: 缓冲流的使用&quot;&gt;&lt;/a&gt;处理流之一: 缓冲流的使用&lt;/h2&gt;&lt;h3 id=&quot;缓冲流&quot;&gt;&lt;a href=&quot;#缓冲流&quot; cla
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记(五)-集合</title>
    <link href="http://blog.isk.ink/2021/09/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94-%E9%9B%86%E5%90%88/"/>
    <id>http://blog.isk.ink/2021/09/13/Java%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%94-%E9%9B%86%E5%90%88/</id>
    <published>2021-09-13T13:07:50.000Z</published>
    <updated>2021-09-22T13:54:44.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><p>集合与数组存储数据概述:</p><p>集合.数组都是对多个数据进行存储操作的结构,简称Java容器</p><p>说明: 此时的存储,主要指定的是内存层面的存储,不涉及到持久化的存储<code>(``.txt, .jpg , .avi,数据库)</code></p></li><li><p>数据存储的特点</p><p>–&gt; 一旦初始化以后,其长度就确定了</p><p>   –&gt; 数组一旦定义好,其元素的类型也就确定了, 我们也就只能操作指定类型的数据了,比如: <code>Stirng[] arr ; int [] arr1 ; Object[] arr2;</code></p></li><li><p>数组存储的弊端:</p><ul><li>一旦初始化以后,其长度就不可修改</li><li>数组中提供的方法非常有限,对于添加,删除,插入数据等操作,非常不便,同时效率不高</li><li>获取数组中实际元素的个数的需求,数组没有现成的属性或方法可用</li><li>数组存储数据的特点: 序 , 可重复,对于无序,不可重复的需求,不能满足</li></ul></li><li><p>集合存储的优点:</p><ul><li>能够解决数组存储方面的弊端.</li></ul></li></ol><h2 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h2><p><code>Collection</code>接口: 单列集合 ,用来存储一个一个的对象</p><ul><li><p><code>List</code> 接口: 存储有序的 ,可重复的数据 –&gt;”动态”数组</p><p>–&gt;<code>ArrayList . LinkedList , Vector</code></p></li><li><p><code>Set</code> 接口 : 存储无序的, 不可重复的数据 –&gt;高中讲的”集合”</p><p>–&gt; <code>HashSet , LinkedHashSet , TreeSet</code></p></li></ul><p><code>Map</code>接口 : 双列集合,用来存储一对<code>(key -value)</code> 一对的数据 -&gt;&gt; 高中函数: <code>y = f(x)</code></p><ul><li><code>HashMap , LinkedHashMap , TreeMap, Hashtable , Properties</code></li></ul><h2 id="List"><a href="#List" class="headerlink" title="List"></a>List</h2><p>List接口 ; 存储有序的,可重复的数据. –&gt; 动态数组,替换原有的数组\</p><ul><li><p><code>ArrayList</code> : 作为List接口的主要实现类;线程不安全,效率高;底层<code>Object[]</code> <code>elementDate</code>存储</p></li><li><p><code>LinkedList</code> :对于频繁的插入,删除操作,使用此类效率比<code>ArrayList</code>高. 底层使用双链表存储</p></li><li><p><code>Vector:</code> 作为List接口的古老实现类,线程安全,效率低,底层使用<code>Object[]</code> <code>elementDate</code>存储</p></li></ul><p>面试题: <code>ArrayList , IinkedList ,Vector</code> 三者的异同点?</p><p>同 : 三个类都是实现了List接口,存储数据的特点相同: 存储有序的 ,可重复的数据</p><h3 id="List接口中的常用方法"><a href="#List接口中的常用方法" class="headerlink" title="List接口中的常用方法"></a>List接口中的常用方法</h3><ul><li><code>void add(int index, Object ele)</code> : 在index位置插入<code>ele</code>元素</li><li><code>boolean addAll(int index ,Collection eles)</code>: 从<code>index</code>位置开始将<code>eles</code>中所有的元素添加进来</li><li><code>Object get(int index):</code>  获取指定index位置的元素</li><li><code>int indexOf(Object obj)</code> : 返回obj 在集合中首次出现的位置</li><li><code>int lastIndexOf(object obj):</code> 返回<code>obj</code>在当前集合中末次出现的位置</li><li><code>Object remove(int index):</code> 移除指定<code>index</code>位置的元素,并返回此元素</li><li><code>Object set(int index, Object ele)</code>: 设置指定index位置的元素为<code>ele</code></li><li><code>List subList(int fromIndex,int toIndex)</code>: 返回从<code>fromIndex</code>到<code>toInde</code>位置的子集合</li></ul><h2 id="Set接口的框架"><a href="#Set接口的框架" class="headerlink" title="Set接口的框架"></a>Set接口的框架</h2><p><code>Set</code>接口,存储无序的,不可重复的数据. </p><ul><li><code>HashSet</code>: 作为Set接口的主要实现类;线程不安全的;可以存储<code>bull</code>值</li><li><code>LinkedHashSet</code>:  作为<code>HashSet</code>的子类; 遍历其内部数据时,可以按照添加的顺序遍历</li><li><code>TreeSet</code>:   可以按照添加对象的指定属性,进行排序.</li></ul><p>要求: </p><ol><li><p>向<code>Set</code>中添加的数据,其所在的雷一定要重写<code>equals()</code>方法</p></li><li><p>重写的<code>hashCode()</code> 和<code>equals()</code>尽可能的保持一致性 :相同的对象必须具有相同的散列码.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.collection.exer.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set : 存储无序的,不可重复的数据</span></span><br><span class="line"><span class="comment">//   以HashSet为例说明:</span></span><br><span class="line"><span class="comment">//      1.无序性: 不等于随机性. 存储的数据在底层数组中并非按照数组索引的顺序添加,而是根据数据的哈希值判断</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      2.不可重复性: 保证添加的元素按照equals()判断时,不能返回true.及相同的元素只能添加一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);  <span class="comment">//由于有两个123 所以会只显示一个,set不会重复</span></span><br><span class="line">        set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>));  <span class="comment">//这里却是可以重复的,两个对象的地址值不一样,没有</span></span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="HashSet元素的添加过程"><a href="#HashSet元素的添加过程" class="headerlink" title="HashSet元素的添加过程"></a>HashSet元素的添加过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.collection.set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.collection.exer.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Set : 存储无序的,不可重复的数据</span></span><br><span class="line"><span class="comment">//   以HashSet为例说明:</span></span><br><span class="line"><span class="comment">//      1.无序性: 不等于随机性. 存储的数据在底层数组中并非按照数组索引的顺序添加,而是根据数据的哈希值判断</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//      2.不可重复性: 保证添加的元素按照equals()判断时,不能返回true.及相同的元素只能添加一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//添加元素的过程: 以HashSet为例:</span></span><br><span class="line"><span class="comment">//      我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法,计算元素a的哈希值</span></span><br><span class="line"><span class="comment">//      此哈希值接着通过某种算法计算出HashSet底层数组中的存放位置(即为:索引位置),判断数组此位置</span></span><br><span class="line"><span class="comment">//      上是否已经没有元素:</span></span><br><span class="line"><span class="comment">//          如果此位置上没有其他元素,则元素a添加成功.   --&gt;情况1</span></span><br><span class="line"><span class="comment">//          如果此位置上有其他元素b(或以链表形式存在存在的多个元素),则比较元素a与元素b的hash值:</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">*                如果hash值不相同,则元素a添加成功. ---&gt;情况2</span></span><br><span class="line"><span class="comment">*                如果hash值相同,进而需要调用元素a所在类的equals()方法:</span></span><br><span class="line"><span class="comment">*                       equals()返回true,元素a添加失败</span></span><br><span class="line"><span class="comment">*                       equals()返回flase,则元素a添加成功.  --&gt; 情况2</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*        对于添加成功的情况2和情况3而言: 元素a 与已经存在指定索引位置上以链表的方式存储.</span></span><br><span class="line"><span class="comment">*           jdk 7: 元素a放到数组中,指向原来的元素.</span></span><br><span class="line"><span class="comment">*           jdk 8: 原来的元素在数组中,指向元素a</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/16.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SetTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="number">456</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);</span><br><span class="line">        set.add(<span class="number">123</span>);  <span class="comment">//由于有两个123 所以会只显示一个,set不会重复</span></span><br><span class="line">        set.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        set.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>));</span><br><span class="line">        set.add(<span class="keyword">new</span> User(<span class="string">&quot;Jerry&quot;</span>, <span class="number">20</span>));  <span class="comment">//这里却是可以重复的,两个对象的地址值不一样,没有</span></span><br><span class="line">        set.add(<span class="number">129</span>);</span><br><span class="line"></span><br><span class="line">        Iterator iterator = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            System.out.println(iterator.next());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="LinkedHashSet的应用"><a href="#LinkedHashSet的应用" class="headerlink" title="LinkedHashSet的应用"></a>LinkedHashSet的应用</h3><p><code>LinkedHashSet</code>的使用:<br><code>LinkedHashSet</code>作为<code>HashSet</code>的子类,在添加数据的同时,每隔数据还维护了两个引用,记录此数据前一个数据和后一个数据</p><p>优点:     对于频繁的遍历操作,<code>LinkedHashSet</code>效率高于<code>HashSet</code></p><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><ul><li><p>集合<code>Colletion</code>中存储的如果是自定义类的对象,需要自定义类重写哪个方法?为什么</p><ul><li><p><code>equals()</code>方法. <code>contains()/remove()/retainsAll().</code></p></li><li><p><code>List:</code> 重写<code>equals</code>方法.</p></li><li><p><code>Set: (HashSet,LinkedHashSet</code>为例): <code>equals(), hashCode();</code></p><p>(<code>TreeSet</code>为例): <code>Compareable: compareTo(Object obj)</code></p><p>​                        <code>Comparetor: compare(Object o1, Object o2)</code></p></li></ul></li><li><p><code>ArrayList,LinkedList,Vector</code>三者的相同点和不同点?</p><ul><li><code>ArrayList</code> : 作为List接口的主要实现类;线程不安全,效率高;底层<code>Object[]</code> <code>elementDate</code>存储</li><li><code>LinkedList</code> :对于频繁的插入,删除操作,使用此类效率比<code>ArrayList</code>高. 底层使用双链表存储</li><li><code>Vector:</code> 作为<code>List</code>接口的古老实现类,线程安全,效率低,底层使用<code>Object[]</code> <code>elementDate</code>存储</li></ul></li></ul><ul><li><p><code>List</code> 接口的常用方法有哪些?</p><ul><li><p>添加: <code>add(Object obj)</code></p></li><li><p>删除: <code>remove(Object obj)/remove(int index)</code></p></li><li><p>修改:  <code>set(int index, Object obj)</code></p></li><li><p>查:  <code>get(int index)</code></p></li><li><p>插入: <code>add(int index,Object obj)</code></p></li><li><p>长度: <code>size()</code></p></li><li><p>遍历: 使用<code>Iterator;foreach;</code>普通的<code>for</code></p><p>同 : 三个类都是实现了<code>List</code>接口,存储数据的特点相同: 存储有序的 ,可重复的数据</p></li></ul></li></ul><ul><li><p><code>List</code> 接口的常用方法有哪些?</p><ul><li>添加: <code>add(Object obj)</code></li><li>删除: <code>remove(Object obj)/remove(int index)</code></li><li>修改:  <code>set(int index, Object obj)</code></li><li>查:  <code>get(int index)</code></li><li>插入: <code>add(int index,Object obj)</code></li><li>长度: <code>size()</code></li><li>遍历: 使用<code>Iterator;foreach;</code>普通的<code>for</code></li></ul></li><li><p><code>Set</code>存储数据的特点是什么?常见的实现类有什么?说明一下彼此的特点</p><ul><li>无序不可重复;<code>HashSet,LinkedSet,TreeSet;</code></li></ul></li></ul><h3 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h3><p>存储的数据特点: 无序的,不可重复的元素.</p><ol><li><p>无序性: 不等于随机性. 存储的数据在底层数组中并非按照数组索引的顺序添加,而是根据数据的哈希值判断</p></li><li><p>不可重复性: 保证添加的元素按照<code>equals()</code>判断时,不能返回<code>true</code>.及相同的元素只能添加一个</p></li></ol><p>元素添加过: (以<code>HashSet</code>为例)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">     我们向HashSet中添加元素a,首先调用元素a所在类的hashCode()方法,计算元素a的哈希值</span><br><span class="line">      此哈希值接着通过某种算法计算出HashSet底层数组中的存放位置(即为:索引位置),判断数组此位置</span><br><span class="line">     上是否已经没有元素:</span><br><span class="line">          如果此位置上没有其他元素,则元素a添加成功.   --&gt;情况1</span><br><span class="line">          如果此位置上有其他元素b(或以链表形式存在存在的多个元素),则比较元素a与元素b的hash值:</span><br><span class="line"></span><br><span class="line">                如果hash值不相同,则元素a添加成功. ---&gt;情况2</span><br><span class="line">                如果hash值相同,进而需要调用元素a所在类的equals()方法:</span><br><span class="line">                      equals()返回true,元素a添加失败</span><br><span class="line">                      equals()返回flase,则元素a添加成功.  --&gt; 情况2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        对于添加成功的情况2和情况3而言: 元素a 与已经存在指定索引位置上以链表的方式存储.</span><br><span class="line">           jdk 7: 元素a放到数组中,指向原来的元素.</span><br><span class="line">           jdk 8: 原来的元素在数组中,指向元素a</span><br><span class="line">HashSet底层: 数组 + 链表的结构 (前提: jdk7)</span><br></pre></td></tr></table></figure><p>常用方法</p><p><code>Set</code>接口中没有额外定义新的方法,使用的都是<code>Collection</code>中声明过的方法.</p><p>常用实现类</p><p><code>Collection</code>接口: 单列集合,用来存储一个一个的对象.</p><ul><li><p><code>Set</code>接口: 存储无序的,不可重复的数据 –&gt; 高中讲的”集合”</p><ul><li><code>HashSet</code>作为Set接口的主要实现类;线程不安全的;可以存储<code>null</code>值</li><li><code>LinkedHashSet</code>: 作为<code>HashSet</code>的子类;遍历其内部数据时,可以按添加的顺序遍历,在添加数据的同时,每个数据还维护了两个引用,记录此数据的前一个数据和后一个数据.</li></ul><p>对于频繁的的遍历操作,<code>LinkedHashSet</code>效率高于<code>HashSet</code>.</p></li><li><p><code>TreeSet:</code> 可以按照添加对象的指定属性,进行排序.</p></li></ul><p>存储对象所在类的要求:</p><p><code>HashSet/LinkedHashSet:</code></p><ul><li><p>要求: 向Set(主要指: <code>HashSet.LinkedHashSet)</code>中添加的数据,其所在类一定要重写<code>hashCode()</code>和<code>equals()</code></p></li><li><p>要求: 重写的<code>hashCode()</code>和<code>equals()</code>尽可能保持一致性: 相等的对象必须具有相同的散列码</p><p>重写两个方法的小技巧: 对象中做<code>equals()</code> 方法比较的<code>Field,</code> 都应该用来计算<code>hashCode()</code>值.</p></li></ul><p><code>TreeSet:</code></p><ol><li><p>自然排序中，比较两个对象是否相同的标准为： <code>compareTo()</code>返回0. 不再是<code>equals();</code></p></li><li><p>定制排序中,比较两个对象是否相同的标准为: <code>compare()</code>返回0 .不再是<code>equals().</code></p></li></ol><p><code>TreeSet</code>的使用: </p><p>​            说明使用:</p><ul><li><p>向<code>TreeSet</code>中添加的数据,要求时相同类的对象.</p></li><li><p>两种排序方式: 自然排序(实现<code>Comparable</code>接口和定制排序<code>Comparator</code>)</p></li></ul><h2 id="Map接口"><a href="#Map接口" class="headerlink" title="Map接口"></a>Map接口</h2><h3 id="Map的实现类的结构"><a href="#Map的实现类的结构" class="headerlink" title="Map的实现类的结构"></a>Map的实现类的结构</h3><ul><li><p><code>Map:</code> 双列数据, 存储<code>key - value</code> 对的数据 –&gt; 类似于高中的函数: y = f(x)</p><ul><li><p><code>HashMap</code> : 作为<code>Map</code>的主要实现类;线程不安全,效率高;存储<code>null</code>的<code>key</code>和<code>value</code></p><ul><li><p><code>LinkedHashMap:</code> 保证再遍历map元素时,可以按照添加的顺序实现遍历.</p><p>原因: 在原有的<code>HsshMap</code>底层数据结构的基础上,添加了一对指针,指向前一个和后一个元素,对于频繁的遍历操作,此类执行效率高于<code>HashMap</code></p></li></ul></li><li><p><code>TreeMap:</code> 保证按照添加的<code>key - value</code> 对 进行排序,实现排序遍历.此时考虑<code>key</code>的自然排序或定制排序;底层使用红黑树.</p></li><li><p><code>Hashtable:</code> 作为古老的实现类;线程安全的,效率低,不能存储<code>null</code>的<code>key</code>和<code>value</code></p><ul><li><code>Properties:</code> 常用来处理配置文件. <code>key</code>和<code>value</code>都是<code>String</code>类型.</li></ul></li></ul></li></ul><p><code>HashMap</code>的底层: 数组 + 链表 <code>(jdk7</code>及以前)</p><p>​                            数组 + 链表<code>( jdk8)</code></p><h3 id="Map结构的理解"><a href="#Map结构的理解" class="headerlink" title="Map结构的理解"></a>Map结构的理解</h3><p><code>Map</code>中的<code>key:</code> 无序的,不可重复的,使用<code>Set</code>存储所有的<code>key --&gt; key</code>所有的类要重写<code>equals()</code>和<code>hashCode()</code> (以<code>HashMap</code>为例)</p><p><code>Map</code>中的<code>value:</code> 无序的,可重复的,使用<code>Collection</code>存储所有的<code>value ---&gt;value</code>所在的类要重写<code>equals()</code></p><p>一个键值对: <code>key-value</code> 构成一个<code>Entry</code>对象</p><p><code>Map</code>中的<code>entry:</code> 无序的,不可重复的,使用<code>Set</code>存储所有<code>entry.</code></p><h3 id="Hash的底层实现原理-以jdk7为例"><a href="#Hash的底层实现原理-以jdk7为例" class="headerlink" title="Hash的底层实现原理? 以jdk7为例"></a>Hash的底层实现原理? 以jdk7为例</h3><p><code>HashMap map =  new HashMap();</code></p><p>在实例化以后,底层创建了长度是16的一维数组<code>Entry[] table;</code></p><p>…可能已经执行过多次put…</p><p><code>map.put(key1,value1):</code></p><p>首先,调用<code>key1</code>所在类的<code>hashCode()</code>计算<code>key1</code>哈希值,此哈希值经过某种算法计算以后,得到了<code>Entry</code>数组中的存放位置.</p><p>如果此位置上的数据不为空,此时<code>key1 -value1</code>添加成功. —&gt;情况一</p><p>如果此位置上的数据不为空,(意味着此位置上存在一个或多个数据(以链表形式存在)),比较<code>key1</code>和已经存在的一个或多个数据的哈希值:</p><p>​        如果<code>key1</code>的哈希值与已经存在的哈希值都不相同,此时<code>key1-value</code>添加成功. —&gt;情况二</p><p>​        如果<code>key1</code>的哈希值和已经存在的某一个数据<code>(key2-value2)</code>的哈希值相同,继续比较:调用<code>key1</code>所在类的<code>equals()</code>方法,比较:</p><p>​                如果<code>equals()</code>返回<code>false:</code> 此时<code>key1-value1</code>添加成功.—&gt;情况三</p><p>​                如果<code>equals()</code>返回<code>true:</code> 使用<code>value1</code>替换<code>value2</code></p><p>补充: 关于情况二和情况三:  此时<code>key1-value1</code>和原来的数据以链表的方式存储.</p><p>在不断的添加过程中,会涉及到扩容问题,当超出临界值(且存放的位置非空时),扩容.默认的的扩容方式: 扩容为原来容量的2倍,并将原来的数据复制过来.</p><p>jdk8 相较于 jdk7 在底层实现方面的不同:</p><ol><li><p><code>new HashMap():</code> 底层没有创建一个长度为16的数组</p></li><li><p>jdk 8底层的数组是: <code>Node[]</code> ,而非<code>Entry[]</code></p></li><li><p>首次调用<code>put()</code>方法时,底层创建长度为16的数组</p></li><li><p>jdk 7底层结构只有: 数组 + 链表. jdk8 底层结构: 数组 + 链表 + 红黑树.</p><p>当数组的某一个索引位置上的元素,以链表的形式存在的数据个数  &gt; 8 当前数组的长度 &gt; 64 时,此时此索引位置唱的所有数据改为使用红黑树存储.</p></li></ol><h3 id="Map中的常用方法"><a href="#Map中的常用方法" class="headerlink" title="Map中的常用方法"></a>Map中的常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210921202635.png" alt="image-20210921202627806"></p><h2 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h2><p>Map存储数据的特点是什么? 并指明key,value,entry存储数据的特点.</p><ul><li>双列数据,存储key-value对数据</li><li>key: 无序的,不可重复的 –&gt;Collection存储</li><li>key-value: 无序的,不可重复的 – &gt;Set存储</li></ul><p>Map中常用的实现类有哪些?</p><p><code>Map:</code> 双列数据, 存储<code>key - value</code> 对的数据 –&gt; 类似于高中的函数: y = f(x)</p><ul><li><p><code>HashMap</code> : 作为<code>Map</code>的主要实现类;线程不安全,效率高;存储<code>null</code>的<code>key</code>和<code>value</code></p><ul><li><p><code>LinkedHashMap:</code> 保证再遍历map元素时,可以按照添加的顺序实现遍历.</p><p>原因: 在原有的<code>HsshMap</code>底层数据结构的基础上,添加了一对指针,指向前一个和后一个元素,对于频繁的遍历操作,此类执行效率高于<code>HashMap</code></p></li></ul></li><li><p><code>TreeMap:</code> 保证按照添加的<code>key - value</code> 对 进行排序,实现排序遍历.此时考虑<code>key</code>的自然排序或定制排序;底层使用红黑树.</p></li><li><p><code>Hashtable:</code> 作为古老的实现类;线程安全的,效率低,不能存储<code>null</code>的<code>key</code>和<code>value</code></p><ul><li><code>Properties:</code> 常用来处理配置文件. <code>key</code>和<code>value</code>都是<code>String</code>类型.</li></ul></li></ul><p><code>Collection</code>和<code>Collections</code>的区别?</p><ul><li><code>Collection</code>是一个接口</li><li><code>Collections</code>是一个工具类</li></ul><h3 id="HashMap底层典型属性的属性的说明"><a href="#HashMap底层典型属性的属性的说明" class="headerlink" title="HashMap底层典型属性的属性的说明"></a>HashMap底层典型属性的属性的说明</h3><p><code>DEFAULT_INITIAL_CAPACITY</code>: <code>HashMap</code>的默认容量 , 16</p><p><code>DEFAULT_LOAD_FACTOR: HashMap</code>的默认加载因子 : 0.75</p><p><code>threshold</code>: 扩容的临界值 , = 容量 * 填充因子 : 16 * 0.75 =&gt; 12</p><p><code>TREEIFY_THRESHOLD</code>: <code>Bucket</code> 中链表长度大于该默认值,转化为红黑树: 8</p><p><code>MIN_TREEIFY_CAPACITY</code>:  桶中的<code>Node</code>被树化时最小的<code>hash</code>表容量: 64</p><h3 id="Collections工具类"><a href="#Collections工具类" class="headerlink" title="Collections工具类"></a>Collections工具类</h3><p>ArrayLIst和HashMap都是不安全的,如果程序要求线程安全,我们可以将ArrayList,HashMap转换为线程安全的.</p><p>使用synchronizedList(List list) 和 synchronizedMap(Map map)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;集合与数组存储数据概述:&lt;/p&gt;
&lt;p&gt;集合.数组都是对多个数据进行存储操作的结构,简称Java容器&lt;/p&gt;
&lt;p&gt;说明:
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈Java的泛型</title>
    <link href="http://blog.isk.ink/2021/09/08/%E6%B5%85%E8%B0%88JAVA%E7%9A%84%E6%B3%9B%E5%9E%8B/"/>
    <id>http://blog.isk.ink/2021/09/08/%E6%B5%85%E8%B0%88JAVA%E7%9A%84%E6%B3%9B%E5%9E%8B/</id>
    <published>2021-09-08T11:41:55.000Z</published>
    <updated>2021-09-11T02:13:48.388Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么引入泛型"><a href="#为什么引入泛型" class="headerlink" title="为什么引入泛型?"></a>为什么引入泛型?</h2><ul><li>适用多种数据类型执行相同的代码(代码复用)</li></ul><p>  以下是一个例子:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a + b));</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  如果没有泛型,要实现不同的加法,每种类型都需要重载一个add方法; 通过泛型,我们可以复用为一个方法:</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">    System.out.println(a + <span class="string">&quot;+&quot;</span> + b + <span class="string">&quot;=&quot;</span> + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">    <span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>泛型中的类型在使用时指定,不需要强制转换(类型安全,编译器会检查类型)</p><p>看下面这个例子:</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">list.add(<span class="string">&quot;xxString&quot;</span>);</span><br><span class="line">list.add(<span class="number">100d</span>);</span><br><span class="line">list.add(<span class="keyword">new</span> Person());</span><br></pre></td></tr></table></figure><p>我们在使上诉list中,list的元素都是Object类型(无法约束其中的类型),所以在取出集合元素时,需要人为的强制转换到具体的目标类型,且很容易出现 <code>java.lang.ClassCastException</code>异常.</p><p>引入泛型,它将提供类型的约束,提供编译前的检查:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// list中只能放String, 不能放其它类型的元素</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="泛型的基本使用"><a href="#泛型的基本使用" class="headerlink" title="泛型的基本使用"></a>泛型的基本使用</h2><h3 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h3><ul><li>从一个简单的泛型类看起:</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>&lt;<span class="title">T</span>&gt;</span>&#123;         <span class="comment">// 此处可以随便写标识符号，T是type的简称  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;     <span class="comment">// var的类型由T指定，即：由外部指定  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;  <span class="comment">// 返回值的类型由外部决定  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T <span class="keyword">var</span>)</span></span>&#123;  <span class="comment">// 设置的类型也由外部决定  </span></span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo06</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;  </span><br><span class="line">        Point&lt;String&gt; p = <span class="keyword">new</span> Point&lt;String&gt;() ;     <span class="comment">// 里面的var类型为String类型  </span></span><br><span class="line">        p.setVar(<span class="string">&quot;it&quot;</span>) ;                            <span class="comment">// 设置字符串  </span></span><br><span class="line">        System.out.println(p.getVar().length()) ;   <span class="comment">// 取得字符串的长度  </span></span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>多元泛型</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Notepad</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span>&#123;       <span class="comment">// 此处指定了两个泛型类型  </span></span><br><span class="line">    <span class="keyword">private</span> K key ;     <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="keyword">private</span> V value ;   <span class="comment">// 此变量的类型由外部决定  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> K <span class="title">getKey</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> V <span class="title">getValue</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKey</span><span class="params">(K key)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.key = key ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(V value)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.value = value ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo09</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;  </span><br><span class="line">        Notepad&lt;String,Integer&gt; t = <span class="keyword">null</span> ;        <span class="comment">// 定义两个泛型类型的对象  </span></span><br><span class="line">        t = <span class="keyword">new</span> Notepad&lt;String,Integer&gt;() ;       <span class="comment">// 里面的key为String，value为Integer  </span></span><br><span class="line">        t.setKey(<span class="string">&quot;汤姆&quot;</span>) ;        <span class="comment">// 设置第一个内容  </span></span><br><span class="line">        t.setValue(<span class="number">20</span>) ;            <span class="comment">// 设置第二个内容  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;姓名；&quot;</span> + t.getKey()) ;      <span class="comment">// 取得信息  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;，年龄；&quot;</span> + t.getValue()) ;       <span class="comment">// 取得信息  </span></span><br><span class="line">  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h3><ul><li>简单的泛型接口</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;        <span class="comment">// 在接口上定义泛型  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span> </span>; <span class="comment">// 定义抽象方法，抽象方法的返回值就是泛型类型  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">InfoImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;   <span class="comment">// 定义泛型接口的子类  </span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;             <span class="comment">// 定义属性  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoImpl</span><span class="params">(T <span class="keyword">var</span>)</span></span>&#123;     <span class="comment">// 通过构造方法设置属性内容  </span></span><br><span class="line">        <span class="keyword">this</span>.setVar(<span class="keyword">var</span>) ;    </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T <span class="keyword">var</span>)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span> ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo24</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String arsg[])</span></span>&#123;  </span><br><span class="line">        Info&lt;String&gt; i = <span class="keyword">null</span>;        <span class="comment">// 声明接口对象  </span></span><br><span class="line">        i = <span class="keyword">new</span> InfoImpl&lt;String&gt;(<span class="string">&quot;汤姆&quot;</span>) ;  <span class="comment">// 通过子类实例化对象  </span></span><br><span class="line">        System.out.println(<span class="string">&quot;内容：&quot;</span> + i.getVar()) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h3><p>泛型方法,是在调用方法的时候指明泛型的具体类型. 重点看下泛型的方法（图参考自：<a href="https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）">https://www.cnblogs.com/iyangyuan/archive/2013/04/09/3011274.html）</a></p><ul><li>定义泛型方法语法格式</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://www.pdai.tech/_images/java/java-basic-generic-4.png" alt="img"></p><ul><li>调用泛型方法语法格式</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://www.pdai.tech/_images/java/java-basic-generic-5.png" alt="img"></p><p>说明一下，定义泛型方法时，必须在返回值前边加一个<code>&lt;T&gt;</code>，来声明这是一个泛型方法，持有一个泛型<code>T</code>，然后才可以用泛型T作为方法的返回值。</p><p><code>Class&lt;T&gt;</code>的作用就是指明泛型的具体类型，而<code>Class&lt;T&gt;</code>类型的变量c，可以用来创建泛型类的对象。</p><p>为什么要用变量c来创建对象呢？既然是泛型方法，就代表着我们不知道具体的类型是什么，也不知道构造方法如何，因此没有办法去new一个对象，但可以利用变量c的newInstance方法去创建对象，也就是利用反射创建对象。</p><p>泛型方法要求的参数是<code>Class&lt;T&gt;</code>类型，而<code>Class.forName()</code>方法的返回值也是<code>Class&lt;T&gt;</code>，因此可以用<code>Class.forName()</code>作为参数。其中，<code>forName()</code>方法中的参数是何种类型，返回的<code>Class&lt;T&gt;</code>就是何种类型。在本例中，<code>forName()</code>方法中传入的是User类的完整路径，因此返回的是<code>Class&lt;User&gt;</code>类型的对象，因此调用泛型方法时，变量c的类型就是<code>Class&lt;User&gt;</code>，因此泛型方法中的泛型T就被指明为User，因此变量obj的类型为User。</p><p>当然，泛型方法不是仅仅可以有一个参数<code>Class&lt;T&gt;</code>，可以根据需要添加其他参数。</p><p><strong>为什么要使用泛型方法呢</strong>？因为泛型类要在实例化的时候就指明类型，如果想换一种类型，不得不重新new一次，可能不够灵活；而泛型方法可以在调用的时候指明类型，更加灵活。</p><h3 id="泛型的上下限"><a href="#泛型的上下限" class="headerlink" title="泛型的上下限"></a>泛型的上下限</h3><ul><li>先看下面的代码,很明显是会报错的(具体原因请参考后文).</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下两个方法不会报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funA</span><span class="params">(A a)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funB</span><span class="params">(B b)</span> </span>&#123;</span><br><span class="line">    funA(b);</span><br><span class="line">    <span class="comment">// ...             </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如下funD方法会报错</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funC</span><span class="params">(List&lt;A&gt; listA)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funD</span><span class="params">(List&lt;B&gt; listB)</span> </span>&#123;</span><br><span class="line">    funC(listB); <span class="comment">// Unresolved compilation problem: The method doPrint(List&lt;A&gt;) in the type test is not applicable for the arguments (List&lt;B&gt;)</span></span><br><span class="line">    <span class="comment">// ...             </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>那么如何解决呢？</strong></p><p>为了解决泛型中隐含的转换问题，Java泛型加入了类型参数的上下边界机制。<code>&lt;? extends A&gt;</code>表示该类型参数可以是A(上边界)或者A的子类类型。编译时擦除到类型A，即用A类型代替类型参数。这种方法可以解决开始遇到的问题，编译器知道类型参数的范围，如果传入的实例类型B是在这个范围内的话允许转换，这时只要一次类型转换就可以了，运行时会把对象当做A的实例看待。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funC</span><span class="params">(List&lt;? extends A&gt; listA)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...          </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">funD</span><span class="params">(List&lt;B&gt; listB)</span> </span>&#123;</span><br><span class="line">    funC(listB); <span class="comment">// OK</span></span><br><span class="line">    <span class="comment">// ...             </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p><strong>泛型上下限的引入</strong></p><p>在使用泛型的时候，我们可以为传入的泛型类型实参进行上下边界的限制，如：类型实参只准传入某种类型的父类或某种类型的子类</p></li></ul><p>上限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Number</span>&gt;</span>&#123;    <span class="comment">// 此处泛型只能是数字类型</span></span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T <span class="keyword">var</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Info&lt;Integer&gt; i1 = <span class="keyword">new</span> Info&lt;Integer&gt;() ;        <span class="comment">// 声明Integer的泛型对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Info</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T <span class="keyword">var</span> ;        <span class="comment">// 定义泛型变量</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setVar</span><span class="params">(T <span class="keyword">var</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.<span class="keyword">var</span> = <span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getVar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;    <span class="comment">// 直接打印</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.<span class="keyword">var</span>.toString() ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo21</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        Info&lt;String&gt; i1 = <span class="keyword">new</span> Info&lt;String&gt;() ;        <span class="comment">// 声明String的泛型对象</span></span><br><span class="line">        Info&lt;Object&gt; i2 = <span class="keyword">new</span> Info&lt;Object&gt;() ;        <span class="comment">// 声明Object的泛型对象</span></span><br><span class="line">        i1.setVar(<span class="string">&quot;hello&quot;</span>) ;</span><br><span class="line">        i2.setVar(<span class="keyword">new</span> Object()) ;</span><br><span class="line">        fun(i1) ;</span><br><span class="line">        fun(i2) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">(Info&lt;? <span class="keyword">super</span> String&gt; temp)</span></span>&#123;    <span class="comment">// 只能接收String或Object类型的泛型，String类的父类只有Object类</span></span><br><span class="line">        System.out.print(temp + <span class="string">&quot;, &quot;</span>) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>小结</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?&gt; 无限制通配符</span><br><span class="line">&lt;? extends E&gt; extends 关键字声明了类型的上界，表示参数化的类型可能是所指定的类型，或者是此类型的子类</span><br><span class="line">&lt;? <span class="keyword">super</span> E&gt; <span class="keyword">super</span> 关键字声明了类型的下界，表示参数化的类型可能是指定的类型，或者是此类型的父类</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用原则《Effictive Java》</span></span><br><span class="line"><span class="comment">// 为了获得最大限度的灵活性，要在表示 生产者或者消费者 的输入参数上使用通配符，使用的规则就是：生产者有上限、消费者有下限</span></span><br><span class="line"><span class="number">1.</span> 如果参数化类型表示一个 T 的生产者，使用 &lt; ? extends T&gt;;</span><br><span class="line"><span class="number">2.</span> 如果它表示一个 T 的消费者，就使用 &lt; ? <span class="keyword">super</span> T&gt;；</span><br><span class="line"><span class="number">3.</span> 如果既是生产又是消费，那使用通配符就没什么意义了，因为你需要的是精确的参数类型。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在看一实际例子,<strong>加深印象</strong></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span>  &lt;E extends Comparable&lt;? <span class="keyword">super</span> E&gt;&gt; <span class="function">E <span class="title">max</span><span class="params">(List&lt;? extends E&gt; e1)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e1 == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//迭代器返回的元素属于 E 的某个子类型</span></span><br><span class="line">    Iterator&lt;? extends E&gt; iterator = e1.iterator();</span><br><span class="line">    E result = iterator.next();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">        E next = iterator.next();</span><br><span class="line">        <span class="keyword">if</span> (next.compareTo(result) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            result = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>上述代码中的类型参数 E 的范围是<code>&lt;E extends Comparable&lt;? super E&gt;&gt;</code>，我们可以分步查看：</p><ul><li>要进行比较，所以 E 需要是可比较的类，因此需要 <code>extends Comparable&lt;…&gt;</code>（注意这里不要和继承的 <code>extends</code> 搞混了，不一样）</li><li><code>Comparable&lt; ? super E&gt;</code> 要对 E 进行比较，即 E 的消费者，所以需要用 super</li><li>而参数 <code>List&lt; ? extends E&gt;</code> 表示要操作的数据是 E 的子类的列表，指定上限，这样容器才够大</li><li><strong>多个限制</strong></li></ul><p>使用&amp;符号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="comment">//工资低于2500元的上斑族并且站立的乘客车票打8折</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T extends Staff &amp; Passenger&gt; <span class="function"><span class="keyword">void</span> <span class="title">discount</span><span class="params">(T t)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t.getSalary()&lt;<span class="number">2500</span> &amp;&amp; t.isStanding())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;恭喜你！您的车票打八折！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        discount(<span class="keyword">new</span> Me());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h3><p>泛型数组的声明:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] list11 = <span class="keyword">new</span> ArrayList&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;String&gt;[] list12 = <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，需要强转类型 </span></span><br><span class="line">List&lt;String&gt;[] list13 = (List&lt;String&gt;[]) <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告 </span></span><br><span class="line">List&lt;?&gt;[] list14 = <span class="keyword">new</span> ArrayList&lt;String&gt;[<span class="number">10</span>]; <span class="comment">//编译错误，非法创建 </span></span><br><span class="line">List&lt;?&gt;[] list15 = <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>]; <span class="comment">//OK </span></span><br><span class="line">List&lt;String&gt;[] list6 = <span class="keyword">new</span> ArrayList[<span class="number">10</span>]; <span class="comment">//OK，但是会有警告</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>那么通常我们如何使用?</strong></p><ul><li>讨巧的使用场景</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericsDemo30</span></span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;  </span><br><span class="line">        Integer i[] = fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>) ;   <span class="comment">// 返回泛型数组  </span></span><br><span class="line">        fun2(i) ;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T[] fun1(T...arg)&#123;  <span class="comment">// 接收可变参数  </span></span><br><span class="line">        <span class="keyword">return</span> arg ;            <span class="comment">// 返回泛型数组  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">fun2</span><span class="params">(T param[])</span></span>&#123;   <span class="comment">// 输出  </span></span><br><span class="line">        System.out.print(<span class="string">&quot;接收泛型数组：&quot;</span>) ;  </span><br><span class="line">        <span class="keyword">for</span>(T t:param)&#123;  </span><br><span class="line">            System.out.print(t + <span class="string">&quot;、&quot;</span>) ;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>合理使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ArrayWithTypeToken</span><span class="params">(Class&lt;T&gt; type, <span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">    array = (T[]) Array.newInstance(type, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;为什么引入泛型&quot;&gt;&lt;a href=&quot;#为什么引入泛型&quot; class=&quot;headerlink&quot; title=&quot;为什么引入泛型?&quot;&gt;&lt;/a&gt;为什么引入泛型?&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;适用多种数据类型执行相同的代码(代码复用)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;  以下是一
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记(四)</title>
    <link href="http://blog.isk.ink/2021/09/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/"/>
    <id>http://blog.isk.ink/2021/09/05/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9B%9B/</id>
    <published>2021-09-05T00:22:34.000Z</published>
    <updated>2021-09-13T12:22:53.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><ol><li>String 实现了Serializable接口: 表示字符串是支持序列化的.</li><li>String 实现了Comparable 接口:  表示String 可以比较大小</li><li>String内部定义了final char[] value 用于存储字符串数据大小</li><li>String   声明为final 的,不可被继承</li><li>String: 代表不可变的字符序列. 简称: 不可变性.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//通过字面量定义的方式: 此时的s1 和 s2 的数据javaEE声明在方法区的字符串常量池种</span></span><br><span class="line">    String s1 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;javaEE&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过new + 构造器的方式: 此时的s3 和s4 保存的地址值 , 是数据在堆空间开辟空间以后的对应的地址值</span></span><br><span class="line">    String s3 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">    String s4 = <span class="keyword">new</span> String(<span class="string">&quot;javaEE&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>String 实例化方法</p><ol><li>通过字面量定义的方式</li><li>通过new + 构造器的方式</li></ol></li><li><p>面试题 : String s = new String(“abc”); 方式创建对象, 在内存中创建了几个对象? \</p><p> 两个: 一个是堆空间中new 结构, 另一个是char[] 对应的常量池中的数据: “abc”</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s1 = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    String s2 = <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    String s3 = <span class="string">&quot;hello&quot;</span> + <span class="string">&quot;world&quot;</span>;</span><br><span class="line">    String s4 = s1 + <span class="string">&quot;world&quot;</span> ;</span><br><span class="line">    String s5 = s1 + s2;</span><br><span class="line">    String s6 = (s1 + s2 ).intern();</span><br><span class="line">    System.out.println(s3 == s4); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s5);<span class="comment">//fasle</span></span><br><span class="line">    System.out.println(s4 == s5); <span class="comment">//false</span></span><br><span class="line">    System.out.println(s3 == s6);<span class="comment">//true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210905201058.png" alt="image-20210905201051211"></p><p>结论: </p><ul><li>常量与常量的拼接结果在常量池. 切常量池中不会存在相同内容的常量</li><li>只要其中有一个是变量,结果就在堆中</li><li>如果拼接的结果调用intern()方法,返回值就在常量池中</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span> </span>&#123;</span><br><span class="line">    String str = <span class="keyword">new</span> String(<span class="string">&quot;good0&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] ch  = &#123;<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;t&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(String str , <span class="keyword">char</span> ch[])</span></span>&#123;</span><br><span class="line">        str =<span class="string">&quot;test ok&quot;</span>;</span><br><span class="line">        ch[<span class="number">0</span>]  = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        StringTest1 ex = <span class="keyword">new</span> StringTest1();</span><br><span class="line">        ex.change(ex.str,ex.ch);</span><br><span class="line">        System.out.println(ex.str ); <span class="comment">//good</span></span><br><span class="line">        System.out.println(ex.ch); <span class="comment">//best</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>求输出?</p><h3 id="String-常用方法"><a href="#String-常用方法" class="headerlink" title="String 常用方法"></a>String 常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210905233728.png" alt="image-20210905233720919"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210905233744.png" alt="image-20210905233744708"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210906002109.png" alt="image-20210906002109252"></p><h3 id="String-与基本数据类型-包装类之间的转换"><a href="#String-与基本数据类型-包装类之间的转换" class="headerlink" title="String 与基本数据类型,包装类之间的转换"></a>String 与基本数据类型,包装类之间的转换</h3><ul><li><p>String -&gt; 基本数据类型,包装类: 调用包装类的静态方法:parseXxx(str)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//强转Int</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>基本数据类型.包装类 -&gt; String: 调用String重载的valueOf(xxx)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String str1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> num = Integer.parseInt(str1);</span><br><span class="line">        String str2 = String.valueOf(num);<span class="comment">//&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="String-与char-之间的转换"><a href="#String-与char-之间的转换" class="headerlink" title="String 与char[] 之间的转换"></a>String 与char[] 之间的转换</h3><ul><li><p>String –&gt; char[]: 调用String的toCharArray()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str1 = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">char</span>[] charArray = str1.toCharArray();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; charArray.length; i ++)&#123;</span><br><span class="line">        System.out.println(charArray[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>char[] -&gt; String: 调用String 的构造器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span>[] arr = <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(arr);</span><br><span class="line">System.out.println(str2);</span><br></pre></td></tr></table></figure></li></ul><h3 id="String-与-byte-之间的转换"><a href="#String-与-byte-之间的转换" class="headerlink" title="String 与 byte[] 之间的转换"></a>String 与 byte[] 之间的转换</h3><ul><li><p>编码: String -&gt; byte[] : 调用String 的getBytes()</p></li><li><p>解码: byte[] –&gt; String : 调用String的构造器</p></li><li><p>编码:   字符串 –&gt; 字节 (看得懂 —&gt; 看不懂的二进制数据);</p></li><li><p>解码: 编码的逆过程 , 字节 –&gt; 字符串 (看不懂的二进制数据 – &gt; 看得懂</p><p>说明:  解码时,要求解码使用的字符集 必须与编码时使用的字符集一致,否则会出现乱码</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String str1 = <span class="string">&quot;abc123&quot;</span>;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes();<span class="comment">//使用默认的字符集,进行编码</span></span><br><span class="line">System.out.println(Arrays.toString(bytes));</span><br><span class="line"></span><br><span class="line"><span class="keyword">byte</span>[] bytes = str1.getBytes(<span class="string">&quot;gbk&quot;</span>); <span class="comment">//使用gbk字符集进行编码</span></span><br><span class="line">System.out.println(Arrays.toString(gbks));</span><br></pre></td></tr></table></figure><h2 id="StringBuffer类"><a href="#StringBuffer类" class="headerlink" title="StringBuffer类"></a>StringBuffer类</h2><ul><li><p>StringBuffer类 代表可变的字符序列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 关于StringBuffer和StringBuildre的使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* String , StringBuffer , StringBuilder 三者的异同?</span></span><br><span class="line"><span class="comment">* String: 不可变的字符序列 ; 底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">* StringBuffer: 可变的字符序列;线程安全的,效率低, 底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">* StringBuilder: 可变的字符序列;  线程不安全,效率高,新增的,底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 源码分析:</span></span><br><span class="line"><span class="comment">*           String str = new String();</span></span><br><span class="line"><span class="comment">*           Stirng str1 = new String(&quot;abc&quot;); ;;new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"><span class="comment">*           StringBuffer sb1 = new StringBuffer(); //new char[16];底层创建了一个长度为16的数组</span></span><br><span class="line"><span class="comment">*           sb1.append(&#x27;a&#x27;); //value[0] = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">*           sb1.append(&#x27;b&#x27;); //value[1] = &#x27;b&#x27;;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           StringBuffer sb2 = new StringBuffer(&quot;abc&quot;); // char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //问题1 .System.out.println(sb1.length()); //3</span></span><br><span class="line"><span class="comment">*           //问题2 . 扩容问题: 如果要添加的数据底层数组盛不下,那就需要扩容底层的数组</span></span><br><span class="line"><span class="comment">*            默认情况下,扩容为原来容量的2倍  + 2,同时将原来的数组中的元素复制到新的数组中.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*             指导意义: 开发中建议大家使用: StringBuffer(int capacity) 或 StringBuilder(int capacity)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBUfferBuilderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        sb1.setCharAt(<span class="number">0</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="StringBuffer类的常用方法"><a href="#StringBuffer类的常用方法" class="headerlink" title="StringBuffer类的常用方法"></a>StringBuffer类的常用方法</h3><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210906184157.png" alt="image-20210906184150629"></p><p>总结: </p><ul><li><p>增: append(xxx)</p></li><li><p>删: delete(int start,int end)</p></li><li><p>改:setCharAt(int n, char ch )/ replace(int start,int end ,String str)</p></li><li><p>查:charAt(int n)</p></li><li><p>插:i insert(int offset, xxx)</p></li><li><p>长度: length()</p></li><li><p>遍历: for()  + charAt() /toString() </p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 关于StringBuffer和StringBuildre的使用</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* String , StringBuffer , StringBuilder 三者的异同?</span></span><br><span class="line"><span class="comment">* String: 不可变的字符序列 ; 底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">* StringBuffer: 可变的字符序列;线程安全的,效率低, 底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">* StringBuilder: 可变的字符序列;  线程不安全,效率高,新增的,底层结构是用char[] 来存储</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* 源码分析:</span></span><br><span class="line"><span class="comment">*           String str = new String();</span></span><br><span class="line"><span class="comment">*           Stirng str1 = new String(&quot;abc&quot;); ;;new char[]&#123;&#x27;a&#x27;,&#x27;b&#x27;,&#x27;c&#x27;&#125;;</span></span><br><span class="line"><span class="comment">*           StringBuffer sb1 = new StringBuffer(); //new char[16];底层创建了一个长度为16的数组</span></span><br><span class="line"><span class="comment">*           sb1.append(&#x27;a&#x27;); //value[0] = &#x27;a&#x27;;</span></span><br><span class="line"><span class="comment">*           sb1.append(&#x27;b&#x27;); //value[1] = &#x27;b&#x27;;</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           StringBuffer sb2 = new StringBuffer(&quot;abc&quot;); // char[] value = new char[&quot;abc&quot;.length() + 16];</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*           //问题1 .System.out.println(sb1.length()); //3</span></span><br><span class="line"><span class="comment">*           //问题2 . 扩容问题: 如果要添加的数据底层数组盛不下,那就需要扩容底层的数组</span></span><br><span class="line"><span class="comment">*            默认情况下,扩容为原来容量的2倍  + 2,同时将原来的数组中的元素复制到新的数组中.</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*             指导意义: 开发中建议大家使用: StringBuffer(int capacity) 或 StringBuilder(int capacity)</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBUfferBuilderTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        StringBuffer sb1 = <span class="keyword">new</span> StringBuffer(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">        sb1.setCharAt(<span class="number">0</span>,<span class="string">&#x27;m&#x27;</span>);</span><br><span class="line">        System.out.println(sb1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>效率 从高到低:  StringBuilder &gt; StringBuffer &gt; String </li></ul><h3 id="String-与-StringBuffer-StringBuilder-之间的转换"><a href="#String-与-StringBuffer-StringBuilder-之间的转换" class="headerlink" title="String 与 StringBuffer , StringBuilder 之间的转换"></a>String 与 StringBuffer , StringBuilder 之间的转换</h3><ol><li>String – &gt; StringBuffer ,StringBuiler :  调用StringBuffer , StringBuilder构造器</li><li>StringBuffer ,StringBuilder –&gt; String : 调用String构造器; StringBuffer ,StringBuilder  toString()方法</li></ol><h2 id="日期和时间API"><a href="#日期和时间API" class="headerlink" title="日期和时间API"></a>日期和时间API</h2><h2 id="JDK-8之前"><a href="#JDK-8之前" class="headerlink" title="JDK 8之前"></a>JDK 8之前</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/6.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateTimeTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    *  java.util.Date 类</span></span><br><span class="line"><span class="comment">    *  | ---java.sql.Date类</span></span><br><span class="line"><span class="comment">    *  1. 两个构造器的使用</span></span><br><span class="line"><span class="comment">    * //构造器一: Date(): 创建一个对应当前时间的Date对象</span></span><br><span class="line"><span class="comment">    * //构造器二: 创建指定毫秒数的Date对象</span></span><br><span class="line"><span class="comment">    *  2. 两个方法的使用</span></span><br><span class="line"><span class="comment">    *           &gt; toString(): 显示当前的年.月.日.时.分.秒</span></span><br><span class="line"><span class="comment">    *           &gt; getTime(): 获取当前对应的当前的时间戳</span></span><br><span class="line"><span class="comment">    *   3. java.sql.Date类对应数据库中的日期类型的变量</span></span><br><span class="line"><span class="comment">    *       &gt;&gt; 如何实例化?</span></span><br><span class="line"><span class="comment">    *       &gt;&gt; 如何将java.util.Date 对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器一: Date(): 创建一个对应当前时间的Date对象</span></span><br><span class="line">        Date date1 = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date1.toString());<span class="comment">//Mon Sep 06 20:54:30 CST 2021</span></span><br><span class="line">        System.out.println(date1.getTime()); <span class="comment">//1630932942141</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//构造器二: 创建指定毫秒数的Date对象</span></span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date(<span class="number">1630932942141L</span>);</span><br><span class="line">        System.out.println(date2.toString()); <span class="comment">////Mon Sep 06 20:54:30 CST 2021</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建java.sql.Date对象</span></span><br><span class="line">        java.sql.Date date3 = <span class="keyword">new</span> java.sql.Date(<span class="number">35235325345L</span>);</span><br><span class="line">        System.out.println(date3);  <span class="comment">//1971-02-13</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        如何将java.util.Date 对象转换为java.sql.Date对象</span></span><br><span class="line"><span class="comment">//        情况一:</span></span><br><span class="line"><span class="comment">//        Date date4  = new java.sql.Date(2343243242323L);</span></span><br><span class="line"><span class="comment">//        java.sql.Date date5 = (java.sql.Date) date4;</span></span><br><span class="line">        <span class="comment">//情况二:</span></span><br><span class="line">        Date date6 = <span class="keyword">new</span> Date();</span><br><span class="line"><span class="comment">//        java.sql.Date date7 = (java.sql.Date) date6; //运行报错</span></span><br><span class="line">        java.sql.Date date7 = <span class="keyword">new</span> java.sql.Date(date6.getTime());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.System类中的方法currentTimeMillis()</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> time  = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</span></span><br><span class="line">        <span class="comment">//成为时间戳</span></span><br><span class="line">        System.out.println(time); <span class="comment">//1630932870599</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h2><ol><li>注解声明为: <code>@interface</code></li><li>内部定义成员,通常用 <code>value</code>表示</li><li>可以指定成员的默认值 , 使用defult定义</li><li>如果自定义注解没有成员,表明是一个标识作用.</li></ol><p>如果注解有成员, 在使用注解时,需要指明成员的值.</p><p>自定义注解必须配上注解的信息处理流程 (使用反射) 才有意义.</p><h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><ol><li><p>Collection接口: 单列集合 ,用来存储一个一个的对象</p><ul><li><p>List 接口: 存储有序的 ,可重复的数据 –&gt;”动态”数组</p><p>–&gt;ArrayList . LinkedList , Vector</p></li><li><p>Set 接口 : 存储无序的, 不可重复的数据 –&gt;高中讲的”集合”</p><p>–&gt; HashSet , LinkedHashSet , TreeSet</p></li></ul></li></ol><ol start="2"><li><p>Map接口 : 双列集合,用来存储一对(key -value) 一对的数据 -&gt;&gt; 高中函数: y = f(x)</p><ul><li>HashMap , LinkedHashMap , TreeMap, Hashtable , Properties</li></ul></li></ol><h2 id="Collection接口中的方法"><a href="#Collection接口中的方法" class="headerlink" title="Collection接口中的方法"></a>Collection接口中的方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/13.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Collection coll = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//add(Object e)</span></span><br><span class="line">        coll.add(<span class="string">&quot;AA&quot;</span>);</span><br><span class="line">        coll.add(<span class="string">&quot;BB&quot;</span>);</span><br><span class="line">        coll.add(<span class="number">123</span>); <span class="comment">//自动装箱</span></span><br><span class="line">        coll.add(<span class="keyword">new</span> Date());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取元素个数</span></span><br><span class="line">        System.out.println(coll.size());<span class="comment">//4</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//addAll(Collection coll1): 将coll1集合中的元素添加到当前的集合中</span></span><br><span class="line">        Collection coll1 = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        coll1.add(<span class="number">456</span>);</span><br><span class="line">        coll1.add(<span class="string">&quot;CC&quot;</span>);</span><br><span class="line">        coll.addAll(coll1);</span><br><span class="line"></span><br><span class="line">        System.out.println(coll.size()); <span class="comment">//6</span></span><br><span class="line">        System.out.println(coll);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//claer: 清空集合元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//isEmpty(): 判断当前集合是否为空</span></span><br><span class="line">        System.out.println(coll.isEmpty());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="复习题"><a href="#复习题" class="headerlink" title="复习题"></a>复习题</h2><ol><li><p>什么是枚举类? 枚举类的对象声明的修饰符都有那些?</p><p>枚举类: 类中的对象的个数是确定的, 有限个</p><p>private final (NO)</p><p>public static final (YES)</p></li><li><p>什么是元注解? 说说Retention 和 Target 元注解的作用</p><p>元注解 : 对现有的注解进行解释说明的注解.</p><p>Retention :指明所修饰的声明周期. SOUTCE CLASS RUNTIME</p></li><li><p>说说你所理解的集合框架都有那些接口, 存储数据的特点是什么?</p></li></ol><ol start="4"><li><p>比较throw 和 throws 的异同</p><p>不同点: </p><p>​            throw: 生成一个异常对象, 并抛出 . 使用在方法内部 &lt; -&gt; 自动抛出异常对象</p></li></ol><p>   ​            throws: 处理异常的方式 .使用在方法声明处的末尾</p><p>   ​                &lt;-&gt; try  - catch  - finally </p><ol start="5"><li><p>谈谈你对同步代码块中同步监视器和共享数据的理解及各自要求.</p><p>同步监视器：　俗称锁．１.任何一个类的对象都可以充当锁　２.多个线程共用一把锁</p><p>共享数据：　多个线程共同操作的数据，　即为共享数据．</p></li></ol><p>   需要使用同步机制将操作共享数据的代码包起来．不过包多了，也不能包少了．</p><h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><ul><li><p>枚举类的说明：</p><ol><li><p>枚举类的理解：　类的对象只有有限个，确定的．我们称此为枚举类．</p></li><li><p>当需要定义一组常量时，强烈建议使用枚举类</p></li><li><p>如果枚举类中只有一个对象，则可以作为单例模式的实现方式．</p></li></ol></li></ul><ul><li>自定义枚举类：</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Season spring = Season.SPRING;</span><br><span class="line">        System.out.println(spring);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Season</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.声明season对象的属性:private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span>  String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.私有话类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season</span><span class="params">(String seasonName,String seasonDesc)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供当前枚举类的多个对象: public static final的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SPRING =  <span class="keyword">new</span> Season(<span class="string">&quot;春天&quot;</span>,<span class="string">&quot;春暖花开&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season SUMMER =  <span class="keyword">new</span> Season(<span class="string">&quot;夏天&quot;</span>,<span class="string">&quot;夏日炎炎&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season AUTUMN =  <span class="keyword">new</span> Season(<span class="string">&quot;秋天&quot;</span>,<span class="string">&quot;秋高气爽&quot;</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Season WINTER =  <span class="keyword">new</span> Season(<span class="string">&quot;冬天&quot;</span>,<span class="string">&quot;冰天雪地&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1: 获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.其他诉求, 提供toString</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Season&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;seasonName=&#x27;&quot;</span> + seasonName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, seasonDesc=&#x27;&quot;</span> + seasonDesc + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​                </p><ul><li>枚举类实现接口</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.image.SinglePixelPackedSampleModel;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/11.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Info</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeasonTest1</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Season1 summer = Season1.SUMMER;</span><br><span class="line">        System.out.println(summer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(Season1.class.getSuperclass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用接口,都会执行各自的接口中的方法</span></span><br><span class="line">        Season1 winter = Season1.WINTER;</span><br><span class="line">        winter.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义枚举类</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Season1</span> <span class="keyword">implements</span> <span class="title">Info</span> </span>&#123;</span><br><span class="line">    <span class="comment">//1.提供当前枚举类的对象,多个对象之间用&quot;,&quot;隔开,末尾的对象&quot;;&quot;结束</span></span><br><span class="line">    SPRING(<span class="string">&quot;春天&quot;</span>, <span class="string">&quot;春暖花开&quot;</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;春天在哪里?&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SUMMER(<span class="string">&quot;夏天&quot;</span>, <span class="string">&quot;夏日炎炎&quot;</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;宁静的夏天&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    AUTUMN(<span class="string">&quot;秋天&quot;</span>, <span class="string">&quot;秋高气爽&quot;</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;秋天不回来&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    WINTER(<span class="string">&quot;冬天&quot;</span>, <span class="string">&quot;冰天雪地&quot;</span>)&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;大约在冬季&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明season对象的属性:private final 修饰</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String seasonDesc;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.私有话类的构造器,并给对象属性赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Season1</span><span class="params">(String seasonName, String seasonDesc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.seasonDesc = seasonDesc;</span><br><span class="line">        <span class="keyword">this</span>.seasonName = seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//4.其他诉求1: 获取枚举类对象的属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getSeasonDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> seasonDesc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5.其他诉求, 提供toString,可以使用自己写的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*    @Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return &quot;Season1&#123;&quot; +</span></span><br><span class="line"><span class="comment">                &quot;seasonName=&#x27;&quot; + seasonName + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">                &quot;, seasonDesc=&#x27;&quot; + seasonDesc + &#x27;\&#x27;&#x27; +</span></span><br><span class="line"><span class="comment">                &#x27;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;这是一个季节&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注解类"><a href="#注解类" class="headerlink" title="注解类"></a>注解类</h3><ol><li><p>注解的理解</p><ol><li><p>jdk5.0 新增的功能</p></li><li><p>Annotation 其实就是代码里的特殊标记,这些标记可以在编译,类加载,运行时被读取,并执行相应的处理,通过使用Annotation,程序员可以在不改变原逻辑的情况下,在原文件中嵌入一些补充信息.</p></li><li><p>在JavaSE中,注解的使用目的比较简单,例如标记过时的功能,忽略警告等. 在JavaSE中注解占据了更重要的角色,例如用来配置应用程序的任何切面,代替JavaEE旧版中所遗留的代码和XML配置等</p></li></ol><ul><li>框架 = 注解 + 反射机制 + 设计模式</li></ul></li></ol><ol start="2"><li><p>自定义注解类</p><ol><li>注解类声明为 :@interface</li><li>内部定义成员,通常使用value表示</li><li>可以指定成员的默认值,使用dafault</li><li>如果自定义注解类没成员,表明是一个标识作用</li></ol><ul><li><p>说明:</p><p>​    如果注解有成员,在使用注解时,需要指明成员的值.</p><p>​    自定义注解必须配上注解的信息处理流程(使用反射) 才有意义</p><p>​    自定义注解通过都好指明两个元注解 : Retention , Target</p></li></ul></li></ol><ol start="3"><li><p>如何获取注解信息 :通过反射来进行获取,调用</p><p>前提: 要求此注解的元注解Retention中声明的生命周期状态为 : RUNTIME</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用类&quot;&gt;&lt;a href=&quot;#常用类&quot; class=&quot;headerlink&quot; title=&quot;常用类&quot;&gt;&lt;/a&gt;常用类&lt;/h1&gt;&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记(三)</title>
    <link href="http://blog.isk.ink/2021/06/26/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://blog.isk.ink/2021/06/26/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2021-06-26T13:18:26.000Z</published>
    <updated>2021-09-08T11:43:43.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ol><li><p>Java8中,可以为接口添加静态方法和默认方法</p><ul><li><p>静态方法: 使用 static 关键字修饰. 可以通过接口直接调用静态方法</p></li><li><p>默认方法: 使用default 关键字修饰. 可以通过实现类对象来调用</p></li></ul></li></ol><ol start="2"><li>知识点<ul><li>接口中定义的静态方法,只能通过接口来调用</li><li>通过实现类的对象,可以调用接口中的默认方法</li><li>如果实现类重写了接口中的默认方法,调用时,仍然调用的时重写以后的方法</li><li>如果子类继承的父类和实现的接口中声明了同名同参数的方法(类优先原则)  ,  那么子类在没有重写此方法的情况下,默认调用的是父类中的同名同参数的方法</li><li>如果实现类实现了多个接口,而这么多接口中定义了同名参数的默认方法,那么在实现类没有重写此方法的情况下,报错. (接口冲突),这就必须我们在实现类中重写此方法</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    method3(); <span class="comment">//调用的是自己定义的重写的方法</span></span><br><span class="line">    <span class="keyword">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">    <span class="comment">//调用接口中的默认方法</span></span><br><span class="line">    CompareA.<span class="keyword">super</span>.method3();</span><br><span class="line">    COmpareB.<span class="keyword">super</span>.method3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块中内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器中内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ol><li><p>作为外部类的成员</p><ul><li>调用外部类的结构</li></ul></li><li><p>另一方面 ,作为一个类</p><ul><li>类内可以定义属性 , 方法 , 构造器</li><li>可以被 <code>final</code> 修饰, 表示此类不能被继承. </li><li>可以被 <code>abstract</code> 修饰</li></ul></li><li><p>如何实例化成员内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Dog实例(静态成员内部类)</span></span><br><span class="line"> Person.Dog dog = <span class="keyword">new</span> Person();</span><br><span class="line">dog.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Bird实例(非静态的成员内部类)</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Bird bird = p.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">bird.sing();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>如何在成员内部类中区分调用外部类的结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">        System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>开发中局部内部类的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//返回一个实现了Comparable 接口的类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line">      <span class="comment">//创建一个实现了Comparable 接口的类: 局部内部类</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">MyComparable</span> <span class="keyword">implements</span> <span class="title">Comparable</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareT</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MyComparable();</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个实现了Comparable 接口的类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//方式二:</span></span><br><span class="line">      <span class="keyword">return</span>  <span class="keyword">new</span> Comparable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ol><li>栈溢出  <code>java.lang.StackOverflowError</code></li><li>堆溢出  <code>java.lang.OutfMeoryError</code></li></ol><h2 id="java-lang-Throwable"><a href="#java-lang-Throwable" class="headerlink" title="java.lang.Throwable"></a>java.lang.Throwable</h2><ol><li><code>java.lang.Error:</code> 一般部编写针对性的代码进行处理</li><li><code>java.lang.Exception</code>: 可以进行异常的处理<ol><li>编译时异常(checked)<ul><li><code>FileNotFoundException</code></li><li><code>ClassNotFoundException</code></li></ul></li><li>运行时异常(unchecked)<ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsExcetption</code></li><li><code>ClassCastException</code></li><li><code>NumberForMatException</code></li><li><code>InputMismatchException</code></li><li><code>ArithmeticException</code></li></ul></li></ol></li></ol><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NullPointerException</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//1.</span></span><br><span class="line">       <span class="keyword">int</span> [] arr = <span class="keyword">null</span>;</span><br><span class="line">       System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">       <span class="comment">//2.</span></span><br><span class="line">       String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       str = <span class="keyword">null</span>;</span><br><span class="line">       System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类转换异常"><a href="#类转换异常" class="headerlink" title="类转换异常"></a>类转换异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassCastException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object obj  = <span class="keyword">new</span> Date();</span><br><span class="line">    String str = (String) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字格式异常"><a href="#数字格式异常" class="headerlink" title="数字格式异常"></a>数字格式异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NumberFormatException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num = Interger.parseInt(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入不匹配"><a href="#输入不匹配" class="headerlink" title="输入不匹配"></a>输入不匹配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//InputmismatchException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">        System.out.println(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数字一切正常</span></span><br><span class="line"><span class="comment">//输入字母则抛出输入不匹配</span></span><br></pre></td></tr></table></figure><h2 id="算数异常"><a href="#算数异常" class="headerlink" title="算数异常"></a>算数异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArithmeticException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理的方式"><a href="#异常处理的方式" class="headerlink" title="异常处理的方式"></a>异常处理的方式</h1><ul><li><p>异常的处理: 抓抛模型</p><ol><li><p>过程一: “抛” : 程序正常执行的过程中,一旦出现异常,就会在异常代码处生成一个对应异常类的对象,并将此对象抛出</p><p>一旦对象抛出以后,其后的代码就不再执行</p></li><li><p>过程二: “抓”: 可以理解为异常处理的方式: 1. <code>try-catch-finally</code> 2. <code>throws</code></p></li></ol></li></ul><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><p>结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型一 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式一</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型二 变量名<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式二</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型三 变量名<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式三</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型四 变量名<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式四</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码放在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num  = Integer.parseInt(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出现数值转换异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>finally</code>是一个可选的,不一定非要写</p></li><li><p>使用<code>try</code>将可能出现的异常代码包装起来,在执行过程中,一旦出现异常,机会生成一个对象异常的类型,去<code>catch</code>中进行匹配.</p></li><li><p>一旦try中的异常对象匹配道某一个<code>catch</code>时,就进入<code>catch</code>中进行异常处理.一旦处理完成,就跳出<code>try-catch</code>结构(在没有写<code>finally</code>的情况下),继续执行其后的代码</p></li><li><p><code>catch</code>中的异常类型如果没有子父类关系,则谁声明在上,谁声明在下,无所谓.<code>catch</code>中的异常类型如果没有满足子父类关系,则要求子类一定声明在父类的上面.否则,报错.</p></li><li><p>常用的异常对象处理的方式: 1. <code>String getMessage()</code> 2. <code>printStackTrace()</code></p></li><li><p>在try结构中声明的变量,再出了try结构后,就不能再被调用</p></li><li><p><code>try-catch-finally</code>可以相互嵌套</p></li></ol><h3 id="finally的使用"><a href="#finally的使用" class="headerlink" title="finally的使用"></a>finally的使用</h3><ol><li><code>finally</code>是可选的</li><li><code>finally</code>中声明的是一定会被执行的代码.即使<code>catch</code>中又出现异常了,<code>try</code>中有<code>return</code>语句,<code>catch</code>中有<code>return</code>语句等情况.</li><li>像数据库连接,输入输出流,网络编程 <code>Socket</code> 等资源.<code>JVM</code>是不能自动回收的,我们需要手动的进行资源的释放,就需要声明在<code>finally</code>中.</li></ol><p>小结:  </p><ul><li>使用 <code>try-catch-finally</code> 处理编译时异常,使得程序再编译时就不再报错,但是运行时仍可能报错.相当于我们使用 <code>try-catch-finally</code> 将一个编译时可能出现的异常,延迟到运行时出现.</li><li>开发中,由于运行时异常比较常见,所以我们通常就不针对运行时异常编写 <code>try-catch-finally</code> 了针对编译时异常,我们说一定要考虑异常的处理.</li></ul><h2 id="throws-异常类型"><a href="#throws-异常类型" class="headerlink" title="throws + 异常类型"></a>throws + 异常类型</h2><ol><li><p>“throws + 异常处理” 写在方法的声明处.  指明此方法执行时,可能会抛出的异常类型,一旦当方法执行时,出现异常,仍会再异常代码处生成一个异常类的对象,此对象满足 <code>throw</code> 后异常类型时,就会被抛出. 异常代码后边的代码就不再执行了.</p></li><li><p><code>try-catch-finally</code> :真正的将异常处理掉了.<code>throws</code> 的方法只是将异常抛给了方法的调用者,并没有真正的将异常处理掉.</p></li><li><p>开发中如何去选择使用 <code>try-catch-finally</code> 还是使用 <code>throws</code></p><ol><li>如果父类中被重写的方法没有 <code>throws</code> 方法处理异常,则子类重写的方法也不能使用 <code>throws</code>,意味着如果子类重写的方法中有异常, 必须使用 <code>try-catch-finally</code> 方式处理.</li><li>执行的方法 a 中,先后又调用了另外的几个方法,这几个是递进关系执行的.我们建议这几个方法使用 <code>throws</code> 的方法进行处理. 而执行的方法 a 可以考虑使用  <code>try -catch - finlly</code> 方式进行处理</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverrideTest test = <span class="keyword">new</span> OverrideTest();</span><br><span class="line">        test.display(<span class="keyword">new</span> SubClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(SuperClass s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.method();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类没有抛异常子类绝对不能抛异常</span></span><br><span class="line"><span class="comment">//子类抛的异常不能超过父类的异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span>  <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span><span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Student s =<span class="keyword">new</span> Student();</span><br><span class="line">            s.regist(-<span class="number">1000</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;您输入的数据有误! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理的练习"><a href="#异常处理的练习" class="headerlink" title="异常处理的练习"></a>异常处理的练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法A&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;制造异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用A方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入方法A</span></span><br><span class="line"><span class="comment">用A方法的finally</span></span><br><span class="line"><span class="comment">制造异常</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="异常处理的综合练习"><a href="#异常处理的综合练习" class="headerlink" title="异常处理的综合练习"></a>异常处理的综合练习</h2><p> 编写应用程序EcmDef.java, 接收命令行的两个参数,要求不过输入负数,计算两数相除.</p><p>对数据类型不一致 <code>NumberFOrmatException</code> ,缺少命令行参数 <code>ArryIndexOutOfBoundsException</code>, 除零 <code>ArithmeticException</code>, 输入负数(EcDef 自定义的异常) 进行处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcmDef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> j = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> result = ecm(i,j);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据类型不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;缺少命令行参数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除零&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (EcDef e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ecm</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> <span class="keyword">throws</span> EcDef</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> EcDef(<span class="string">&quot;分子或分母为负数!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcDef</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">338751699314229948L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="测试-Thread-中的常用方法"><a href="#测试-Thread-中的常用方法" class="headerlink" title="测试 Thread 中的常用方法"></a>测试 Thread 中的常用方法</h2><ol><li><code>start()</code>: 启动当前线程; 调用当前线程的<code>run()</code></li><li><code>run()</code>: 通常需要重写Thread类中的此方法,将创建的线程要执行的操作声明在此方法中</li><li><code>currentThread()</code>: 静态方法,返回执行房前代码的线程</li><li><code>getName()</code>: 获取当前线程的名字</li><li><code>setName()</code>:设置当前线程的名字</li><li><code>yield()</code>: 释放当前<code>cpu</code>的执行权</li><li><code>join()</code>: 在线程 <code>a</code> 中调用线程 <code>b</code>的 <code>join()</code>,此时线程 <code>a</code>就完全进入阻塞,直到线程 <code>b</code>完全执行完以后线程 <code>a</code>才完全结束阻塞状态.</li><li><code>sleep(long millitime)</code>: 让当前线程 “睡眠” 指定的<code>millitime</code> 毫秒,在指定的<code>millitime</code>毫秒时间内,当前线程是阻塞状态.</li><li><code>isAlive()</code>: 判断当前线程是否存活</li></ol><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ol><li><code>MAX_PRIORITY</code>: 10</li></ol><p>​      <code>MIN_ PRIORITY</code>: 1</p><p>​      <code>NORM_PRIORITY</code>:5  -&gt; 默认优先级</p><ol start="2"><li><p>如何获取和设置当前线程的优先级?</p><p><code>getPriority()</code>: 获取当前线程的优先级</p><p><code>setPriority(int p)</code> :设置线程的优先级</p></li></ol><p>​        说明: 高优先级的线程要抢占低优先级线程的<code>CPU</code>的执行权.但是只是从概率上讲,高优先级的线程高概率的情况下被执行,并不意味着高优先级的线程执行完以后,低优先级的线程才执行.</p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><ol><li><p>同步代码块          </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>说明: 操作共享数据的代码,即为需要被同步的代码</p></li><li><p>共享数据: 多个线程共同操作的变量.比如 : ticket就是共享数据.</p></li><li><p>同步监视器: 俗称: 锁.  任何一个类的对象,都可以充当锁.</p><ul><li>要求:  多个现场必须要共用同一把锁.</li></ul></li></ol></li><li><p>同步方法</p><ul><li><p>同步的方式,解决了线程的安全问题. –好处</p></li><li><p>操作代码同步代码时,只能有一个线程参与,其他线程等待.相当于一个单线程的过程.效率低. –坏处</p></li><li><p>在Runnable接口创建多线程的的方式中,我们可以考虑使用this充当同步监视器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Windows3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  <span class="comment">//: 同步监视器 默认: this,在继承中慎用this,接口中无限制</span></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票,票号为:&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Windows1 w = <span class="keyword">new</span> Windows1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">    </span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line">    </span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>解决线程安全问题的方式三： lock锁， – JDK5。0新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/1.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 解决线程安全问题的方式三： lock锁， -- JDK5。0新增</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//实例化 ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);  <span class="comment">//fair 公平</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用lock();</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 售票，票号为 &quot;</span> + ticket );</span><br><span class="line">                    ticket --;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法： unlock();</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="线程安全的单例模式之懒汉式"><a href="#线程安全的单例模式之懒汉式" class="headerlink" title="线程安全的单例模式之懒汉式"></a>线程安全的单例模式之懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123; <span class="comment">//此时已经线程安全，Bank是锁</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            instance = new Bank();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         方式一： 效率稍差</span></span><br><span class="line"><span class="comment">//        synchronized(Bank.class)&#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        方式二： 效率更高</span></span><br><span class="line">          <span class="keyword">if</span>(instance ==<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">synchronized</span>(Bank.class)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                      instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>定义： 不同的线程分别占用对方需要的同步资源不放弃，都在等对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>出现死锁后，不会出现异常，不好形成提示，只是所有的线程都处阻塞状态，无法继续</p><p>解决方法： </p><ul><li>专门的算法，原则</li><li>尽量减少同步资源的定义，</li><li>尽量避免嵌套同步</li></ul><h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><ul><li><p><code>synchronized</code> 于 Lock 的异同?</p><p>相同:  二者都可以解决线程安全问题</p><p>不同: <code>synchronized</code> 机制在执行完相同的代码以后,自动的释放同步监视器</p><p>​            <code>Lock</code> 需要手动的启用同步 <code>(Lock)</code>  ,同时结束同步也需要手动的实现</p></li></ul><ul><li><p>优先顺序: </p><p><code>Lock</code> &gt; 同步代码块(已经进入方法体,分配了相应资源)   &gt; 同步方法(在方法体之外)</p></li></ul><h3 id="交替打印-多线程案例"><a href="#交替打印-多线程案例" class="headerlink" title="交替打印 _ 多线程案例"></a>交替打印 _ 多线程案例</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*线程通信的例子: 使用两个线程打印1 - 100. 线程1, 线程2 交替打印</span></span><br><span class="line"><span class="comment">* 涉及到的三个方法:</span></span><br><span class="line"><span class="comment">* wait(): 一但执行此方法,当前线程就进入阻塞方法,并释放同步监视器</span></span><br><span class="line"><span class="comment">* notify():一但执行此方法,就会唤醒被wait的一个线程,如果有多个线程被wait就唤醒优先级高的那个</span></span><br><span class="line"><span class="comment">* notifyAll();一但执行此方法,就唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">* 说明:</span></span><br><span class="line"><span class="comment">*       1.wait(),notify(),notifyAll() 三个方法必须使用在同步代码块或同步方法中</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//交替打印</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">                    notify();  <span class="comment">//唤醒当前线程,看谁优先度高</span></span><br><span class="line"><span class="comment">//                notifyAll(); //唤醒所有线程</span></span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">// 使得调用如下wait()的方法进入阻塞状态</span></span><br><span class="line">                        wait();</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*线程通信的例子: 使用两个线程打印1 - 100. 线程1, 线程2 交替打印</span></span><br><span class="line"><span class="comment">* 涉及到的三个方法:</span></span><br><span class="line"><span class="comment">* wait(): 一但执行此方法,当前线程就进入阻塞方法,并释放同步监视器</span></span><br><span class="line"><span class="comment">* notify():一但执行此方法,就会唤醒被wait的一个线程,如果有多个线程被wait就唤醒优先级高的那个</span></span><br><span class="line"><span class="comment">* notifyAll();一但执行此方法,就唤醒所有被wait的线程</span></span><br><span class="line"><span class="comment">* 说明:</span></span><br><span class="line"><span class="comment">*       1.wait(),notify(),notifyAll() 三个方法必须使用在同步代码块或同步方法中</span></span><br><span class="line"><span class="comment">*       2.wait(),notify(),notifyAll() 三个方法的调用者必须是同步代码块或同步方法中的同步监视器</span></span><br><span class="line"><span class="comment">*           否则会出现IllegalMonitorStateExceptionyi异常</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="comment">//交替打印</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">1</span>;</span><br><span class="line">    Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span>(obj) &#123;</span><br><span class="line">                    obj.notify();  <span class="comment">//唤醒当前线程,看谁优先度高</span></span><br><span class="line"><span class="comment">//                this.notifyAll(); //唤醒所有线程,前面默认this</span></span><br><span class="line">                <span class="keyword">if</span> (number &lt;= <span class="number">100</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">10</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:&quot;</span> + number);</span><br><span class="line">                    number++;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        <span class="comment">// 使得调用如下wait()的方法进入阻塞状态</span></span><br><span class="line">                        obj.wait();</span><br><span class="line"></span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommunicationTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Number number = <span class="keyword">new</span> Number();</span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(number);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(number);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;线程1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;线程2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="面试题-sleep-和-wait-的异同"><a href="#面试题-sleep-和-wait-的异同" class="headerlink" title="面试题- sleep()  和 wait() 的异同"></a>面试题- sleep()  和 wait() 的异同</h3><ol><li><p>相同点 :  一但执行方法, 就可以使得当前的线程进入阻塞状态</p></li><li><p>不同点: 1) 两个方法声明的位置不同,<code>Thread</code>类中声明<code>sleep()</code> , Object类中声明 <code>wait()</code></p><p>​            2)调用的要求不同: <code>sleep()</code> 可以在任何需要的场景下调用,<code>wait()</code> 必须在同步代码块下使用</p><p>​            3)关于使用释放同步监视器的问题: 如果两个方法都是用在同步代码块或同步方法中, <code>sleep()</code> 不会释放锁, <code>wait()</code> 会释放锁</p></li></ol><h2 id="多线程-线程通信-经典例题"><a href="#多线程-线程通信-经典例题" class="headerlink" title="多线程_ 线程通信  经典例题"></a>多线程_ 线程通信  经典例题</h2><p>生产者/消费者问题</p><p>生产者<code>(Productor)</code> 将产品交给店员<code>(Clerk)</code> , 而消费者<code>( Customer)</code> 从店员处取走产品,店员一次只能持有固定数量的产品(比如20), 如果生产者试图生产更多产品,店员就会叫生产者停一下, 如果店中又空位放产品了再通知生产者继续生产; 如果店中没有产品了,店员就会告诉消费者等一下,如果店中有产品了再通知消费者过来取走产品.</p><p>分析:</p><pre><code>1. 是否是多线程问题? 是,生产者线程,消费者线程.2. 是否有共享数据? 是,店员(或产品)3. 是否解决线程的安全问题? 同步机制,有三种方法4. 是否涉及线程的通信? 是</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.java1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2021/9/2.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 生产者/消费者问题</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">*生产者(Productor) 将产品交给店员(Clerk) , 而消费者( Customer) 从店员处取走产品,</span></span><br><span class="line"><span class="comment">* 店员一次只能持有固定数量的产品(比如20), 如果生产者试图生产更多产品,店员就会叫生产者停一下,</span></span><br><span class="line"><span class="comment">*  如果店中又空位放产品了再通知生产者继续生产; 如果店中</span></span><br><span class="line"><span class="comment">* 没有产品了,店员就会告诉消费者等一下,如果店中有产品了再</span></span><br><span class="line"><span class="comment">* 通知消费者过来取走产品.</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    分析:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            1. 是否是多线程问题? 是,生产者线程,消费者线程.</span></span><br><span class="line"><span class="comment">            2. 是否有共享数据? 是,店员(或产品)</span></span><br><span class="line"><span class="comment">            3. 是否解决线程的安全问题? 同步机制,有三种方法</span></span><br><span class="line"><span class="comment">            4. 是否涉及线程的通信? 是*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Clerk</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">produceProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(productCount &lt; <span class="number">20</span>)&#123;</span><br><span class="line">            productCount ++;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 开始生产第&quot;</span>+ productCount +<span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">consumeProduct</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(productCount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">&quot; 开始消费第&quot;</span>+ productCount +<span class="string">&quot;个产品&quot;</span>);</span><br><span class="line">            productCount --;</span><br><span class="line"></span><br><span class="line">            notify();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//等待</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Procducer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">         <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Procducer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始生产产品....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">10</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.produceProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span>  <span class="title">Thread</span></span>&#123;  <span class="comment">//消费者</span></span><br><span class="line">    <span class="keyword">private</span> Clerk clerk;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(Clerk clerk)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clerk = clerk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName() + <span class="string">&quot;:开始消费产品....&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">20</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            clerk.consumeProduct();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Clerk clerk = <span class="keyword">new</span> Clerk();</span><br><span class="line">        Procducer p1 = <span class="keyword">new</span> Procducer(clerk);</span><br><span class="line">        p1.setName(<span class="string">&quot;生产者1&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Consumer c1 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c1.setName(<span class="string">&quot;消费者1&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Consumer c2 = <span class="keyword">new</span> Consumer(clerk);</span><br><span class="line">        c2.setName(<span class="string">&quot;消费者2&quot;</span>);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><p>线程池相关API: ExecutorService 和 Executors</p><h2 id="面试题-1"><a href="#面试题-1" class="headerlink" title="面试题"></a>面试题</h2><p>创建多线程的有哪几种方式:</p><p>   4种</p><ul><li>继承<code>Thread</code>类</li><li>实现<code>Runnable</code>接口</li><li>实现<code>Callable</code>接口</li><li>线程池</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java8中,可以为接口添加静态方法和默认方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态方法: 使用 static 关键字修饰
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Java学习笔记(二)</title>
    <link href="http://blog.isk.ink/2021/06/19/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://blog.isk.ink/2021/06/19/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2021-06-19T09:22:13.000Z</published>
    <updated>2021-09-08T11:43:26.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类及其内部方法"><a href="#Object类及其内部方法" class="headerlink" title="Object类及其内部方法"></a>Object类及其内部方法</h1><ol><li><p>java.lang.Object类的说明:</p><ul><li><p>Object类是所有java类的根父类</p></li><li><p>如果在类的声明中未使用 extends 关键字指明其父类, 则默认父类为  java.lang.Object  类</p></li><li><p>Object类中的功能(属性 , 方法) 就具有通用性.              属性 : 无</p><p>方法 :  equals()  /           toString()/getClass()/hashCode()/clone() /finalize() / wait()   , notify()  , notifyAll()</p></li><li><p>Object类声明类一个车空的构造器</p></li></ul></li><li><p>equals方法()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User u = (User) obj;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.age == u.age</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>toString()方法:</p><ul><li><p>当我们输出一个对象的引用时,实际上就是调用当前对象的toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    System.out.println(s.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果一样</span></span><br></pre></td></tr></table></figure></li><li><p>Object类中toString()的定义</p></li><li><p>public String to String()的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>像String , Date , File . 包装类等都重写了 Object 类中的 toString() 方法使得像在调用对象的 toString() 时 , 返回 “实体内容” 信息</p></li><li><p>自定义类也可以重写 toString() 方法, 当调用此方法时, 放回对象的实体内容</p></li></ul></li></ol><h1 id="static关键字的使用"><a href="#static关键字的使用" class="headerlink" title="static关键字的使用"></a>static关键字的使用</h1><ol><li><p>static : 静态的</p></li><li><p>static可以用来修饰: 属性, 方法 , 代码块 , 内部类</p></li><li><p>使用 static 修饰属性: 静态变量</p><ol><li><p>属性:  按是否使用了 static 修饰,又分为: 静态属性 和 非静态属性</p><p>​    实例属性:  我们创建了类的多个对象, 我们每个对象都独立的拥有一套类中的非 静态属性. 当修改其中一个非静态属性时,不会导致其他对象中同样的属性值的修改.</p><p>​    静态变量:  我们创建了类的多个对象,多个对象共享一个静态变量.当通过某一个对象修改静态变量,其他对象调用此静态变量时,是修改过的.</p></li><li><p>static 修饰属性的其他说明:</p></li></ol><ul><li><p>静态变量随着类的加载而加载.可以通过 “类.静态变量” 的方式进行调用</p></li><li><p>静态变量的加载要早于对象的创建.</p></li><li><p>由于类只会加载一次,则静态变量在内存中也只会存在一份: 存在方法的静态域中.</p></li><li><table><thead><tr><th></th><th>静态变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li></ul></li></ol><h1 id="static-静态方法"><a href="#static-静态方法" class="headerlink" title="static 静态方法"></a>static 静态方法</h1><ol><li><p>使用 static 修饰方法,静态方法</p><ul><li><p>随着类的加载而加载,可以通过 “类.静态方法” 的方式进行调用</p></li><li><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li></ul></li></ol><ul><li><p>静态方法中, 只能调用静态的方法或属性</p></li><li><p>非静态方法中,既可以调用静态的又可以调用非静态的</p></li></ul><ol start="2"><li>static 注意点:<ol><li>在静态方法内,不能使用 this 关键字, super关键字</li><li>关于静态属性和静态方法的使用, 从生命周期的角度去理解</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese c1 = <span class="keyword">new</span> Chinese();</span><br><span class="line">        </span><br><span class="line">        c1.eat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//静态方法直接通过类名调用</span></span><br><span class="line">        Chinese.show();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不能使用类去调用非静态方法</span></span><br><span class="line">        <span class="comment">//例如 Chinese.eat();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String nation;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国人吃中餐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个中国人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>开发中 , 如何确定一个属性是否要声明为 static 的 ?</p><ul><li>属性是可以被多个对象所共享的,不会随着对象的不同而不同</li><li>类中的常量也通常声明为 static</li></ul></li><li><p>开发中,如何确定一个方法是否要声明为 static 的?</p><ul><li><p>操作静态属性的方法,通常也是静态 static 的.</p></li><li><p>工具类中的方法,习惯上声明为static 的, 比如 Math , Arrays , Collections</p></li></ul></li></ol><h1 id="static-案例-设计模式"><a href="#static-案例-设计模式" class="headerlink" title="static 案例 _设计模式"></a>static 案例 _设计模式</h1><h2 id="单例设计模式-饿汉式"><a href="#单例设计模式-饿汉式" class="headerlink" title="单例设计模式_饿汉式"></a>单例设计模式_饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank1 = Bank.getInstance();</span><br><span class="line">        Bank bank2 = Bank.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.内部创建类的对象</span></span><br><span class="line">    <span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance =  <span class="keyword">new</span> Bank();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供公共的静态的静态方法.返回类的对象/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例设计模式-懒汉式"><a href="#单例设计模式-懒汉式" class="headerlink" title="单例设计模式_懒汉式"></a>单例设计模式_懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order1 = Order.getInstance();</span><br><span class="line">        Order order2 = Order.getInstance();</span><br><span class="line">        System.out.println(order1 == order2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明当前类对象,没有初始化</span></span><br><span class="line">    <span class="comment">//4.此对象也必须声明为static</span></span><br><span class="line">    <span class="comment">//区分饿汉式和懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.声明public, static 的返回当前对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Order(); <span class="comment">//每次调用都会创建对象,有问题</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>饿汉式</th><th>好处:饿汉式是线程安全的</th><th align="center">坏处:加载对象时间过长</th></tr></thead><tbody><tr><td>懒汉式</td><td>好处:延迟对象的创建.</td><td align="center">坏处:线程不安全</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ol><li><p>代码块的作用: 用来初始化类,对象</p></li><li><p>代码块如果有修饰的话,只能使用static</p></li><li><p>分类: 静态代码块 和 非静态代码块</p></li><li><p>静态代码块</p><ul><li><p>内部可以用输出语句</p></li><li><p>随着类的加载而加载,而且只执行一次</p></li><li><p>初始化类的信息</p></li></ul></li></ol><ol start="5"><li><p>非静态代码块</p><ul><li><p>内部可以有输出语句</p></li><li><p>随着对象的创建而执行</p></li><li><p>每创建一个对象就执行一次非静态代码块</p></li><li><p>作用:  可以在创建对象时,对对象的属性进行初始化</p></li></ul></li></ol><p>属性可以赋值的位置:</p><ul><li>默认初始化</li><li>显示初始化</li><li>构造器中初始化</li><li>有了对象以后,可以通过”对象.属性” 或 “对象.方法” 进行赋值</li><li>在代码块中赋值</li></ul><h1 id="final关键值"><a href="#final关键值" class="headerlink" title="final关键值"></a>final关键值</h1><ol><li><p>fina 可以用来修饰的结构: 类 , 方法 , 变量</p></li><li><p>final 用来修饰一个类,不能有子类 , 不能被继承了,比如: String 类 ,System类, StringBuffer 类</p></li><li><p>final 用来修饰方法: 表明此方法不能被重写</p></li><li><p>final 用来修饰变量,此时的” 变量” 就称为是一个常量</p><ol><li>final用来修饰属性, 可以考虑的位置有:  显示初始化, 代码块中初始化, 构造器中初始化.</li><li>final 修饰局部变量:  表明此形参是一个常量. 当我们调用此方法时, 给形参赋一个实参. 一旦赋值以后,就只能在方法体内,使用此形参,但不能进行重新赋值.</li></ol></li><li><p>static final 用来修饰属性: 全局常量</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Something</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;   <span class="comment">//此方法不能通过</span></span><br><span class="line">        <span class="comment">//return x + 1; 却可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><ol><li><p>static 修饰的属性,相较于实例变量,有哪些特别之处?</p><ul><li>随着类的加载而加载; </li><li>早于对象的创建 , 只要权限允许,可以通过”对象.static 属性” 的方式进行调用; </li><li>存在于方法区的静态域</li></ul></li><li><p>类的属性赋值的位置有那些? 先后顺序如何?</p><ol><li>默认初始化</li><li>显式初始化 , 代码块中初始化</li><li>构造器中初始化</li><li>通过 “对象.属性” 或  “对象.方法” 的方式赋值</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object类及其内部方法&quot;&gt;&lt;a href=&quot;#Object类及其内部方法&quot; class=&quot;headerlink&quot; title=&quot;Object类及其内部方法&quot;&gt;&lt;/a&gt;Object类及其内部方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java.lang.Object类
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>浅谈C++封装</title>
    <link href="http://blog.isk.ink/2021/05/30/%E6%B5%85%E8%B0%88C-%E5%B0%81%E8%A3%85/"/>
    <id>http://blog.isk.ink/2021/05/30/%E6%B5%85%E8%B0%88C-%E5%B0%81%E8%A3%85/</id>
    <published>2021-05-29T17:25:25.000Z</published>
    <updated>2021-06-19T03:34:58.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;</span><br><span class="line">        age = _age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> getAge()&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age ;</span><br><span class="line">    ....</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">可变化为:  <span class="comment">//增加了判断的机会</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_age &gt; <span class="number">0</span> &amp;&amp; _age &lt; <span class="number">100</span>)&#123;</span><br><span class="line">        age = _age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>只拥有被读取的轮子的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWheelCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_iWheelCount;</span><br><span class="line">    &#125;</span><br><span class="line">privateL</span><br><span class="line">    <span class="keyword">int</span> m_iWheelCount;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只被读取,不被设置</span></span><br><span class="line"><span class="comment">//只读属性</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Asaki on 2021/5/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">        m_strName = _name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>&#123;</span><br><span class="line">        m_strGender  = _gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strGender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_iScore;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_iScore = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> _score)</span></span>&#123;</span><br><span class="line">        m_iScore += _score;     <span class="comment">//m_iScore = m_iScore + _score;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="built_in">string</span> m_strGender;</span><br><span class="line">    <span class="keyword">int</span> m_iScore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.initScore();  <span class="comment">//必须要加初始值</span></span><br><span class="line">    stu.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    stu.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    stu.study(<span class="number">5</span>);</span><br><span class="line">    stu.study(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu.getName() &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; stu.getGender() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu.getScore() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义一个 Student 类，包含名字一个数据成员，使用 get 和 set  函数封装名字这个数据成员。在 main 函数中通过 new 实例化对象，并打印其相关函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 定义类：Student</span></span><br><span class="line"><span class="comment">  * 数据成员：m_strName</span></span><br><span class="line"><span class="comment">  * 数据成员的封装函数：setName()、getName()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义数据成员封装函数setName()</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">         m_strName = _name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义数据成员封装函数getName()</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//定义Student类私有数据成员m_strName</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用new关键字，实例化对象</span></span><br><span class="line">Student *str = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="comment">// 设置对象的数据成员</span></span><br><span class="line">str-&gt;setName(<span class="string">&quot;练习&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用cout打印对象str的数据成员</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str-&gt;getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 将对象str的内存释放，并将其置空</span></span><br><span class="line"><span class="keyword">delete</span> str;</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><h4 id="类内定义"><a href="#类内定义" class="headerlink" title="类内定义"></a>类内定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;age = _age&#125;</span><br><span class="line">    <span class="keyword">int</span> getAge()&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">student</span><span class="params">()</span></span>&#123;<span class="comment">//todo&#125;</span></span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h4><ul><li><p>同文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::changgeSpeed</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Asaki on 2021/5/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="built_in">string</span> m_strGender;</span><br><span class="line">    <span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setName</span><span class="params">(<span class="built_in">string</span> _name)</span> </span>&#123;</span><br><span class="line">    m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Teacher::getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span> </span>&#123;</span><br><span class="line">    m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Teacher::getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setAge</span><span class="params">(<span class="keyword">int</span> _age)</span> </span>&#123;</span><br><span class="line">    m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Teacher::getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 现在上课&quot;</span> &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    t.setName(<span class="string">&quot;孔子&quot;</span>);</span><br><span class="line">    t.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    t.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.getAge() &lt;&lt; t.getGender() ;</span><br><span class="line">    t.teach();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分文件类外定义 //常用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用</span></span><br><span class="line">在Car.h中</span><br><span class="line"> </span><br><span class="line"> Class Car&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">在Car.cpp中</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::changeSpeed</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><ul><li>栈区: int x = 0; int * p = NULL;</li><li>堆区: int *p = new int[20];</li><li>全局区: 存储全局变量及静态变量</li><li>常量区: string str = “hello”;</li><li>代码区: 存储逻辑代码的二进制</li></ul><h4 id="构造函数的规则和特点"><a href="#构造函数的规则和特点" class="headerlink" title="构造函数的规则和特点"></a>构造函数的规则和特点</h4><ul><li>构造函数在对象实例化时被自动调用</li><li>构造函数与类同名</li><li>构造函数没有返回值</li><li>构造函数可以又多个重载形式</li><li>实例化队形时仅用到一个构造函数</li><li>当用户没有定义构造函数时,编译器自动生成一个构造函数</li></ul><ol><li><p>无参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        m_strName = <span class="string">&quot;jim&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>有参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="built_in">string</span> name) &#123;</span><br><span class="line">        m_strName = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>重载构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        m_strName = <span class="string">&quot;jim&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student(<span class="built_in">string</span> name)&#123;</span><br><span class="line">        m_strName = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student():m_strName(<span class="string">&quot;Jim&quot;</span>),m_iAge(<span class="number">10</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="初始化列表特征"><a href="#初始化列表特征" class="headerlink" title="初始化列表特征"></a>初始化列表特征</h5><ul><li>初始化列表优先于构造函数执行</li><li>初始化列表只能用于构造函数</li><li>初始化列表可以同时初始化多个数据类型</li></ul><h4 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    Student stu2 = stu1;</span><br><span class="line">    <span class="function">Student <span class="title">stu3</span><span class="params">(stu1)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码只输出一遍Student</span></span><br><span class="line"><span class="comment">//调用拷贝构造函数</span></span><br></pre></td></tr></table></figure><ul><li>定义格式: 类名 (const 类名 &amp; 变量名)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;m_strName = <span class="string">&quot;jim&quot;</span>&#125;</span><br><span class="line">    Student(<span class="keyword">const</span> Student&amp; stu)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Student&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Student()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~ Student&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   Student()&#123;m_pName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];&#125;</span><br><span class="line">   ~Student()&#123;<span class="keyword">delete</span> []m_pName;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果没有自定义析构函数则系统自动生成</li><li>析构函数在对象销毁时自动调用</li><li>析构函数没有返回值,没有参数也不能重载</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;封装的好处&quot;&gt;&lt;a href=&quot;#封装的好处&quot; class=&quot;headerlink&quot; title=&quot;封装的好处&quot;&gt;&lt;/a&gt;封装的好处&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="C++" scheme="http://blog.isk.ink/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 C++ 类模板</title>
    <link href="http://blog.isk.ink/2021/05/22/%E6%B5%85%E8%B0%88-C-%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.isk.ink/2021/05/22/%E6%B5%85%E8%B0%88-C-%E7%B1%BB%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-05-22T13:17:07.000Z</published>
    <updated>2021-05-22T13:18:51.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p>作用:  建立一个通用函数,其函数返回值和形参类型可以不具体定制,用一个虚拟的类型来代替</p></li><li><p>语法:</p></li><li><pre><code class="C++"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//template 声明创建模板</span><span class="comment">//typename 表面其后面的符号是一种数据类型,可以用class代替</span><span class="comment">// T  通用的数据类型,名称可以替换,通常为大写字母</span>&lt;!--code￼<span class="number">0</span>--&gt;</code></pre></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySwap</span><span class="params">(T&amp;a,T&amp;b)</span></span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySort</span><span class="params">(T arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> max = i ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i +<span class="number">1</span> ; j &lt; len; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[max] &lt; arr[j])&#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max != i)&#123;</span><br><span class="line">            MySwap(arr[max],arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组的模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;  arr[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> charArr[] = <span class="string">&quot;badcfe&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><ul><li>普通函数调用可以发生隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;  <span class="comment">// ascii码 c = 99;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd01(a,c) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//c在这里发生隐式转换 变为int类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数模板可以自动类型推导,不可以发生隐式类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T &amp;a, T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    char c = &#x27;c &#x27;;  // ascii码 c = 99;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; myAdd01(a,c) &lt;&lt; endl; //c在这里发生隐式转换 变为int类型</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd02(a,c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上程序无法通过,出错在15行  ,一个为int ,一个为char</span></span><br></pre></td></tr></table></figure></li><li><p>显示指定类型可以通过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    char c = &#x27;c &#x27;;  // ascii码 c = 99;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd02&lt;<span class="keyword">int</span>&gt;(a,c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 109</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="调用规则"><a href="#调用规则" class="headerlink" title="调用规则"></a>调用规则</h3><ul><li>如果普通函数和函数模板都可以实现,优先普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//这里是普通模板</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用普通函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用函数模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b,T c)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用重载的函数模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//使用空模板参数列表,强制调用函数模板.</span></span><br><span class="line">    myPrint&lt;&gt;(a,b);</span><br><span class="line">    <span class="comment">//使用重载的函数模板</span></span><br><span class="line">    myPrint(a,b,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//如果函数模板产生更好的匹配,优先调用函数模板</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板的通用性并不是万能的</span></span><br><span class="line"><span class="comment">//如果传入的a和b是一个数组,就无法实现了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用具体化的Persion的版本实现代码,具体化优先调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person &amp;p1,Person &amp;p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> ret = myCompare(p1,p2);</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1 == p2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1 != p2&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h4><ul><li><p>建立一个通用类,类中的成员数据类型可以不具体制定,用一个虚拟的类型来代表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(NameType name,AgeType age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NameType m_Name;</span><br><span class="line">    AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p1(&quot;孙悟空&quot;,999);</span><br><span class="line">    p1.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;猪八戒&quot;,999);</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板中成员函数创造时机"><a href="#类模板中成员函数创造时机" class="headerlink" title="类模板中成员函数创造时机"></a>类模板中成员函数创造时机</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板中成员函数创造时机</span></span><br><span class="line"><span class="comment">//类模板中成员函数在调用时才去创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person1 show&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person2 show&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T obj;</span><br><span class="line">    <span class="comment">//类模板中的成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        obj.showPerson1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        obj.showPerson2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyClass&lt;Person1&gt; m;</span><br><span class="line">    m.func1();</span><br><span class="line">    <span class="comment">//只能调用一个 Person1</span></span><br><span class="line">   <span class="comment">// m.func2();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h3><p>三种传入方法:</p><ol><li><p>指定传入类型 — 直接显示对象的数据类型</p></li><li><p>参数模板化     —将对象中的参数变为模板进行传递</p></li><li><p>整个类模板化   —将这个对象类型 模板进行传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板对象做函数参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name, T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1.指定传入类型,对象做函数中的一个参数    最常用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson1</span><span class="params">(Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;孙悟空&quot;,100);</span><br><span class="line">    printPerson1(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.参数模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1,T2&gt;&amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;T1的类型为: &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;T2的类型为: &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">90</span>);</span><br><span class="line">    printPerson2(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.整个类模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson3</span><span class="params">(T &amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T的数据类型: &quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;唐僧&quot;,30);</span><br><span class="line">    printPerson3(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    test03();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="类模板和继承"><a href="#类模板和继承" class="headerlink" title="类模板和继承"></a>类模板和继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板与继承</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//class Son: public Base&#123;  //错误</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span> <span class="keyword">public</span> Base&lt;<span class="keyword">int</span>&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Son s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果像灵活指定父类中T类型,子类也需要类变模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span> <span class="keyword">public</span> Base&lt;T2&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son2()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;T1的数据类型为:&quot;</span> &lt;&lt;<span class="keyword">typeid</span>(T1).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;T2的数据类型为:&quot;</span> &lt;&lt;<span class="keyword">typeid</span>(T2).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Son2&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt;S2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    Person(T1 name,T2 age);</span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Name = name;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Age = age;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;Age &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数的类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::Person(T1 name,T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1,T2&gt;::showPerson()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string ,int &gt; P(&quot;Tom&quot;,20);</span><br><span class="line">    P.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板函数份文件编写"><a href="#类模板函数份文件编写" class="headerlink" title="类模板函数份文件编写"></a>类模板函数份文件编写</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name,T2 age);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::Person(T1 name,T2 age)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1,T2&gt;::showPerson() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种解决方法</span></span><br><span class="line"><span class="comment">//#include &quot;person.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种解决方式,将.h和.cpp中的内容写到一起</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;person2.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;Jerry&quot;,18);</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>主流方法是第二种,将类模板成员函数写到一起,并将后缀名改为.hpp</li></ul><h3 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过全局函数   打印Person信息</span></span><br><span class="line"><span class="comment">//提前让编译器知道Person类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1,T2&gt; p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;类外实现--姓名: &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="comment">//全局函数 类内实现</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1,T2&gt; p)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局函数 类外实现</span></span><br><span class="line">    <span class="comment">//加空模板的参数列表</span></span><br><span class="line">    <span class="comment">//如果全局函数是类外实现,需要让编译器提前知道这个函数的存在</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> printPerson2&lt;&gt;(Person&lt;T1,T2&gt; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name,T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////类外实现</span></span><br><span class="line"><span class="comment">//template&lt;class T1,class T2&gt;</span></span><br><span class="line"><span class="comment">//void printPerson2(Person&lt;T1,T2&gt; p)&#123;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;类外实现--姓名: &quot; &lt;&lt; p.m_Name &lt;&lt; &quot;年龄: &quot; &lt;&lt; p.m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.全局函数在类内的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p(<span class="string">&quot;Tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    printPerson(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数在类外实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string ,int&gt; p(&quot;Jerry&quot;,20);</span><br><span class="line">    printPerson2(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板案例-数组类封装"><a href="#类模板案例-数组类封装" class="headerlink" title="类模板案例__数组类封装"></a>类模板案例__数组类封装</h3><ul><li><p>可以对内置数据类型以及自定义数据类型的数据进行存储</p></li><li><p>将数组中的数据类型存储到堆区</p></li><li><p>构造函数中可以传入数组的容量;</p></li><li><p>提供对应的拷贝函数以及opperator=防止浅拷贝问题</p></li><li><p>提供尾插法和尾删法对数组中的数据进行增加和删除</p></li><li><p>可以通过下标的方式访问数组中的元素</p></li><li><p>可以获取数据中当前元素个数和数组的容量</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNTITLED1_MYARRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNTITLED1_MYARRAY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED1_MYARRAY_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//有参构造 参数 容量</span></span><br><span class="line">    MyArray(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray有参构造调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    MyArray(<span class="keyword">const</span> MyArray&amp; arr)&#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray拷贝构造调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">        <span class="comment">//this-&gt;pAddress = arr.pAddress;</span></span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>-&gt;m_Size; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i]  = arr.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//operator= 防止浅拷贝的问题</span></span><br><span class="line">    MyArray&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> MyArray &amp;arr)&#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray的operator=调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//先判断原来堆区是否有数据 ,如果有先释放</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress  = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; <span class="keyword">this</span>-&gt;m_Size; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_Back</span><span class="params">(<span class="keyword">const</span> T &amp; val)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断容量是否等于大小</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Capacity == <span class="keyword">this</span>-&gt;m_Size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = val; <span class="comment">//在数组末尾插入数据</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size ++; <span class="comment">// 更新数组大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop_Back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//让用具访问不到早最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过下标方式访问数组中的元素</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数组容量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组大小</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~MyArray()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt;&quot;Myarray析构函数调用&quot;&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T * pAddress; <span class="comment">//指针指向堆区开辟的真实数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_Capacity; <span class="comment">//数组容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_Size; <span class="comment">// 数组大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIntArray</span><span class="params">(MyArray &lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyArray&lt;<span class="keyword">int</span>&gt; <span class="title">arr1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">        arr1.Push_Back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的打印输出: &quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    printIntArray(arr1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的容量为: &quot;</span> &lt;&lt;arr1.getCapacity() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的大小为: &quot;</span> &lt;&lt;arr1.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    MyArray&lt;<span class="keyword">int</span> &gt;arr2(arr1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的打印输出为: &quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    printIntArray(arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    arr2.Pop_Back();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2尾删后:&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的容量为: &quot;</span> &lt;&lt;arr2.getCapacity() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的大小为: &quot;</span> &lt;&lt;arr2.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    MyArray&lt;int&gt; arr2(arr1);</span></span><br><span class="line"><span class="comment">//    MyArray&lt;int &gt;arr3(100);</span></span><br><span class="line"><span class="comment">//    arr3 = arr1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person()&#123;&#125;;</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age )&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(MyArray&lt;Person&gt; &amp;arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.getSize(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;姓名: &quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyArray&lt;Person&gt; <span class="title">arr</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span> ,<span class="number">999</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;韩信&quot;</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;妲己&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>,<span class="number">25</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;安其拉&quot;</span>,<span class="number">27</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据插入到数组中</span></span><br><span class="line">    arr.Push_Back(p1);</span><br><span class="line">    arr.Push_Back(p2);</span><br><span class="line">    arr.Push_Back(p3);</span><br><span class="line">    arr.Push_Back(p4);</span><br><span class="line">    arr.Push_Back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    printArray(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组容量和大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr的容量为: &quot;</span> &lt;&lt; arr.getCapacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr大小为: &quot;</span> &lt;&lt; arr.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    test01();</span></span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数模板&quot;&gt;&lt;a href=&quot;#函数模板&quot; class=&quot;headerlink&quot; title=&quot;函数模板&quot;&gt;&lt;/a&gt;函数模板&lt;/h2&gt;&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rust学习笔记(二)</title>
    <link href="http://blog.isk.ink/2021/05/07/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://blog.isk.ink/2021/05/07/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2021-05-07T12:09:09.000Z</published>
    <updated>2021-05-08T15:01:07.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><ul><li><p>所有权可以说是Rust中最为独特的一个功能了,正是有权概念和相关工具的引入,Rust才能够在没有垃圾回收机制的前提下保障内存安全.</p><h3 id="什么是所有权"><a href="#什么是所有权" class="headerlink" title="什么是所有权"></a>什么是所有权</h3><p>有些语言需要手动地分配和释放内存,有些自带垃圾回收机制,Rust则采用第三种方法:它使用特定规则的所有权系统来管理内存,这套规则允许编译器在执行中执行检查工作,而不会产生任何的运行时开销.</p><ul><li><p>堆与栈</p><p>栈会以我们放入值的顺序来存储他们,并以相反的顺序将值取出,这就是后进先出原则.</p><p>而那些无法确定大小的数据,你就只能将他们储存在堆中了.</p></li></ul></li></ul><h3 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3><ul><li><p>Rust中的每一个值都有一个对应的变量作为它的所有者</p></li><li><p>同一时间内,值有且仅有一个所有者</p></li><li><p>当所有者离开自己的作用域时,他持有的值就会被释放掉.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;                      <span class="comment">//变量s还未被声明,不可用</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;<span class="comment">//声明,变量s变得可用</span></span><br><span class="line">    <span class="comment">//这里可以执行s相关的操作</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">//作用域到这里结束</span></span><br></pre></td></tr></table></figure><ul><li><p>s 进入作用域后变的有效</p></li><li><p>他会保持自己的有效性直到自己离开作用域为止</p></li></ul></li></ul><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//这里的(::)运算符允许我们调用置于String命名空间下面的特定from函数</span></span><br></pre></td></tr></table></figure><ul><li><p>字符串对象能够被声明为可变的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = Sting::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.push_str(<span class="string">&quot;,world!&quot;</span>);<span class="comment">//push_str()函数向String空间的</span></span><br><span class="line"><span class="comment">//添加了一段字面量</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s); <span class="comment">//这里会输出完整的hello,world!</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h3><p>Rust提供一套解决方案: 内存会自动地在拥有它的变量离开作用域后进行释放</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">//这里开始s变的有效</span></span><br><span class="line">    <span class="comment">//执行与s相关的操作</span></span><br><span class="line">&#125; <span class="comment">//作用域到这里结束,变量s失效</span></span><br></pre></td></tr></table></figure><ul><li><p>String类型的作者可以在这个函数中释放内存的代码,记住Rust会在作用域结束的地方及{}处自动调用drop函数.</p></li><li><p>Rust 永远不会自动创建数据的深度拷贝.因此任何的自动赋值都可以被视为高效的,</p></li><li><p>当你确实需要去拷贝String堆上的数据,而不仅仅是栈数据时,就可以使用一个名为clone的方法.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 =<span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 =s1.clone();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 =&#123;&#125;,s2=&#123;&#125;&quot;</span>,s1,s2);  <span class="comment">//复制了堆上的数据</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;X = &#123;&#125;,y =&#123;&#125;&quot;</span>,x,y);</span><br><span class="line"><span class="comment">//以上内容合理,对于整型等类型,深度拷贝和浅度拷贝没有任何本质的区别.发生在栈上,而</span></span><br><span class="line"><span class="comment">//String的clone发生在堆上</span></span><br></pre></td></tr></table></figure><ul><li>一但某种类型拥有了Copy这种trait,那么它的变量就可以在复制给其他变量之后保持可用性.</li><li>下面是拥有Copy这种trait的类型<ul><li>所有的整数类型,如u32</li><li>仅有两种值(true和false)的布尔类型:bool</li><li>字符类型:char</li><li>所有的浮点类型,诸如f64</li><li>如果元组中的所有字段的类型都是Copy的,那么这个元组也是Copy的,例如(i32,i32)是Copy的,但(i32,String)则不是</li></ul></li></ul><h3 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h3><ul><li><p>将值传递给函数在语义上类似于对变量进行赋值,将变量传递给函数会触发移动或复制,就像是赋值语句一样.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//变量s进入作用域</span></span><br><span class="line">    </span><br><span class="line">    takes_ownership(s);   <span class="comment">//s的值被移动进了函数</span></span><br><span class="line">     <span class="comment">//所以它从这里开始不在有效  string失效</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;      <span class="comment">//变量x进入作用域</span></span><br><span class="line">    </span><br><span class="line">    makes_copy(x);   <span class="comment">//变量x同样被传递进了函数</span></span><br><span class="line">    <span class="comment">//但是由于i32是Copy的,所以我们依然可以在此之后使用x</span></span><br><span class="line">&#125;<span class="comment">//x首先离开作用域,随后是s.</span></span><br><span class="line"><span class="comment">//但由于s的值已经发生了移动,所以没有什么事情发生.</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>)&#123; <span class="comment">//some_string进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,some_string);</span><br><span class="line">&#125;<span class="comment">//some_string在这里离开作用域,drop函数被自动调用</span></span><br><span class="line"><span class="comment">//some_string所占用的内存也就随之被释放掉了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>)&#123;  <span class="comment">//some_integer进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,some_integer); </span><br><span class="line">&#125;<span class="comment">//some_integer在这里离开了作用域,没有什么特别的事情发生.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值于作用域"><a href="#返回值于作用域" class="headerlink" title="返回值于作用域"></a>返回值于作用域</h3><ul><li><p>函数在返回值的过程中也会发生所有权的转移</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = gives_ownership(); <span class="comment">//gives_ownership将它的返回值移动到</span></span><br><span class="line">                                <span class="comment">//s1中</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">//s2进入作用域</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s3 =takes_and_gives_back(s2);  <span class="comment">//s2被移动进函数</span></span><br><span class="line">    <span class="comment">//takes_and_gives_back中,而这个函数的返回值又被移动到了变量s3上</span></span><br><span class="line">&#125;<span class="comment">//s3在这里离开作用域并被销毁.由于s2已经移动了</span></span><br><span class="line"><span class="comment">//所以他不会在离开作用域时发生任何事情,s1最后离开作用域并被销毁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gives_ownership</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="comment">//gives_ownership会将返回值移动到调用它的函数内</span></span><br><span class="line">    <span class="keyword">let</span> some_string = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);<span class="comment">//some_string进入作用域</span></span><br><span class="line">    some_string <span class="comment">//some_string作为返回值移动</span></span><br><span class="line">    <span class="comment">//至调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//takes_and_gives_back将取得一个String的所有权并将它作为结果返回</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_and_gives_back</span></span>(a_string: <span class="built_in">String</span>)  -&gt; <span class="built_in">String</span>&#123;</span><br><span class="line">                                           <span class="comment">//a_string 进入作用域</span></span><br><span class="line">    a_string                           <span class="comment">//a_string作为返回值移动至调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数在返回值时所有权的转移过程"><a href="#函数在返回值时所有权的转移过程" class="headerlink" title="函数在返回值时所有权的转移过程"></a>函数在返回值时所有权的转移过程</h4><ul><li><p>当一个持有堆数据的变量离开作用域时,他的数据就会被drop清理回收,除非这些数据的所有权移动到另一个变量上</p></li><li><p>利用元组来返回多个值                </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> (s2,len) = calculate_length(s1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>,s2,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_langth</span></span>(s: <span class="built_in">String</span>) -&gt; (<span class="built_in">String</span>, <span class="built_in">usize</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> length = s.len();         <span class="comment">//len()会返回当前字符串的长度</span></span><br><span class="line">    </span><br><span class="line">    (s,length)</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul><h3 id="借用与引用"><a href="#借用与引用" class="headerlink" title="借用与引用"></a>借用与引用</h3><ul><li><p>新的函数签名使用了String的引用作为参数而没有直接转移的所有权</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> len = calculate_length(&amp;s1);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>,s1,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span> ) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>同理签名中的&amp;用来表示参数s的类型是一个引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span>&#123; <span class="comment">//s是指向String的引用</span></span><br><span class="line">    s.len()</span><br><span class="line">&#125;<span class="comment">//到这里,s离开作用域.但是由于它并不持有自己指向值的所有权</span></span><br><span class="line"><span class="comment">//所以没有什么特殊的事情发生</span></span><br><span class="line"><span class="comment">//变量s的作用域与其他函数参数一样,唯一不同的是,他不会在离开自己的</span></span><br><span class="line"><span class="comment">//作用域时销毁其指向的数据,因为它并不拥有该数据的所有权</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>与变量类似,引用是默认不可变的,Rust不允许我们去修改引用指向的值</li></ul><h3 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s =<span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>)&#123;</span><br><span class="line">    some_string.push_str(<span class="string">&quot;,world&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//注意将变量s声明为mut,即可变的</span></span><br></pre></td></tr></table></figure><ul><li><p>限制: 对于特定作用域中的特定数据来说,一次只能声明一个变量.下边是个错误示范:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="comment">//错误,因为声明了两个变量  r1 和 r2</span></span><br></pre></td></tr></table></figure><p>修正:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">&#125;<span class="comment">//由于r1在这里离开了作用域,所以我们可以合法的再创建一个可变引用</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br></pre></td></tr></table></figure></li><li><p>约束: 我们不能在拥有可变引用的同时创建可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;s;  <span class="comment">//没问题</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;s;   <span class="comment">//没问题</span></span><br><span class="line"><span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="垂直引用"><a href="#垂直引用" class="headerlink" title="垂直引用"></a>垂直引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> reference_to_mothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123;  <span class="comment">//dangle会返回一个指向String的引用</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);<span class="comment">//s被绑定到新的String上</span></span><br><span class="line">    </span><br><span class="line">    &amp;s<span class="comment">//我们指向s的引用返回给调用者</span></span><br><span class="line">&#125;<span class="comment">//变量s在这里离开作用域并随之被销毁,它指向的内存自然也不再有效</span></span><br><span class="line"><span class="comment">//危险!!</span></span><br></pre></td></tr></table></figure><p>解决:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">no_dangle</span></span>()  -&gt;<span class="built_in">String</span>&#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>:from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    s</span><br><span class="line">&#125;<span class="comment">//所有权被移出函数,自然就不会涉及释放操作了</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h4 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> world = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br></pre></td></tr></table></figure><ul><li><p>语法糖</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[..<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = s.len();</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">3</span>..len];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">3</span>..];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">0</span>..len];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[..];</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s:&amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i,&amp;item) <span class="keyword">in</span> bytes.iter().enumerate()&#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一但搜索成功,就返回一个从首字母到开始这个索引位置结束的字符串切片</span></span><br><span class="line"><span class="comment">//字符串切片的类型写作&amp;str</span></span><br></pre></td></tr></table></figure><h4 id="将字符串切片作为参数"><a href="#将字符串切片作为参数" class="headerlink" title="将字符串切片作为参数"></a>将字符串切片作为参数</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_world</span></span>(s:&amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span>&#123;&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_world</span></span>(s: &amp;<span class="built_in">str</span>)  -&gt; &amp;<span class="built_in">str</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> my_string = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="comment">//first_world可以接收String对象的切片作为参数</span></span><br><span class="line">    <span class="keyword">let</span> word = first_world(&amp;my_string[..]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> my_string_literal = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//first_world 可以接收字符串字面量的切片作为参数</span></span><br><span class="line">    <span class="keyword">let</span> word = first_world(&amp;my_string_literal[..]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于字符串字面量本身就是切片,所以我们可以在这里直接将他它传入函数</span></span><br><span class="line">    <span class="comment">//而不需要使用额外的切片语法</span></span><br><span class="line">    <span class="keyword">let</span> word = first_word(my_string_literal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;所有权&quot;&gt;&lt;a href=&quot;#所有权&quot; class=&quot;headerlink&quot; title=&quot;所有权&quot;&gt;&lt;/a&gt;所有权&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所有权可以说是Rust中最为独特的一个功能了,正是有权概念和相关工具的引入,Rust才能够在没有垃圾回收机制的前提
      
    
    </summary>
    
    
    
      <category term="Rust" scheme="http://blog.isk.ink/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust学习笔记(一)</title>
    <link href="http://blog.isk.ink/2021/05/05/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://blog.isk.ink/2021/05/05/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2021-05-04T17:03:04.000Z</published>
    <updated>2021-05-06T07:41:38.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-Cargo"><a href="#Hello-Cargo" class="headerlink" title="Hello, Cargo!"></a>Hello, Cargo!</h2><p>Cargo是Rust工具链中内置的构建系统及包管理器.</p><ul><li><p>使用Cargo创建项目</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_cargo   <span class="comment">//会创建一个hello_cargo项目</span></span><br><span class="line">cd hello_cargo</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用Cargo构建和运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build   </span><br></pre></td></tr></table></figure><p>会生成可执行程序到路径<code>target/debug/hello_cargo</code>下(或者Windows系统下<code>target/debug/hello_cargo.exe</code>下)</p></li></ul><ul><li><p>使用cargo run命令来依次完成编译和运行任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo run   &#x2F;&#x2F;编译运行</span><br><span class="line">cargo check  &#x2F;&#x2F;编译</span><br></pre></td></tr></table></figure></li></ul><h2 id="通用编程概念"><a href="#通用编程概念" class="headerlink" title="通用编程概念"></a>通用编程概念</h2><h3 id="变量与可见性"><a href="#变量与可见性" class="headerlink" title="变量与可见性"></a>变量与可见性</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210505012155.png" alt="image-20210505012148755"></p><p>变量默认不可变,但你可以通过声明的变量名称前添加mut关键字来使其可变,出了使变量的值可变,mut还会向阅读的人暗示其他代码可能会改变这个变量的值.</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><ul><li><p>无符号整数永远为正,有符号可以为负.</p></li><li><p>isize和usize的长度取决于,程序运行的目标平台.64位架构 就是64位的.32位就是32位.</p></li><li><p>除了Byte,其余所有的字面量都可以使用类型后缀,比如57u8,代表一个使用了u8类型的整数57.</p></li></ul><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数有f32和f64,他们分别占用32位和64位空间.运行效率相差无几,默认f64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">let x &#x3D; 2.0 &#x2F;&#x2F;f64</span><br><span class="line">let y:f32 &#x3D; 3.0 &#x2F;&#x2F;f32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> tup:(<span class="built_in">i32</span>,<span class="built_in">f64</span>,<span class="built_in">u8</span>) = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//模式匹配</span></span><br><span class="line">    <span class="keyword">let</span> tup1 = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (x,y,z) = tup1;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>索引,使用点号(.)来访问</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line"><span class="keyword">let</span> x:(<span class="built_in">i32</span>,<span class="built_in">f64</span>,<span class="built_in">u8</span>) = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> five_hundred = x.<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> six_point_four = x.<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> one  = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>Rust中的数组拥有多个固定的长度,一但声明就不能随意改变大小,这与其他语言不同.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//i32是所有元素的类型,5表明有五个元素</span></span><br><span class="line">    <span class="keyword">let</span> a:[<span class="built_in">i32</span>;<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//等价于let a = [3,3,3,3,3];</span></span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">3</span>;<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    another_function(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>)&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is : &#123;&#125;&quot;</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果 The value of x is : 5</span></span><br><span class="line"><span class="comment">//输出结果 The value of x is : 6</span></span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = &#123;    <span class="comment">//二.表达式是一个代码块</span></span><br><span class="line">       <span class="keyword">let</span> x = <span class="number">3</span>;   </span><br><span class="line">        x + <span class="number">1</span>      </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is : &#123;&#125;&quot;</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果 The value of  y is : 4</span></span><br></pre></td></tr></table></figure><p>注意: </p><ul><li><p><code>x+1</code> 后没有添加分号,这与我们之前见过的大多数代码不同,假如我们在表达式的末尾添加上括分号,这一段代码就变成了语句而不会返回任何值.</p></li><li><p>在Rust中函数的返回值等同于函数体的最后一个表达式的值.</p></li></ul><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">five</span></span>() -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = five();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果 The value of x is : 5</span></span><br></pre></td></tr></table></figure><p>在以上的five函数中,除了数字5,没有任何其他的函数调用,甚至let 语句,但它在Rust中是一个有效的函数,函数的返回值通过<code>-&gt;i32</code>被指定了.</p><p>但是:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 The value of x  is : 6;</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当给 x+1后加分号后,x+1就变成语句,并非返回值,</span></span><br><span class="line"><span class="comment">//编译器提示错误mismatched types(类型不匹配)</span></span><br><span class="line"><span class="comment">//语句不会产生返回值,返回值后不打分号</span></span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number  = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: condition was true </span></span><br></pre></td></tr></table></figure><ul><li><p>代码表达式必须产生一个bool类型的值,否则就会触发编译错误.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> number &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number was three&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译错误, expected type &#x27;bool&#x27;</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> number != <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number was something other than zero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多重判断</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4,3,or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: number is divisble by 3</span></span><br><span class="line"><span class="comment">//虽然也能被2整除,但是Rust仅会之星第一个条件的代码块,一但满足就不检查剩余的</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在let 中使用if</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is : &#123;&#125;&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: The value of number is : 5</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码块输出的值就是其中最后一个表达式的值,另外,数字本身也可以作为一个表达式使用.</p></li><li><p>所有if的返回值都必须是同一种类型的例如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="string">&quot;six&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is : &#123;&#125;&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译错误,因为else 的返回值是字符串类型,if 的 返回值是 整数</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>Rust提供了三种循环: loop,while和for.</p><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4></li><li><p>我们可以使用loop关键字来指示Rust反复执行某一块代码,直到我们退出为止,</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">loop</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//    直到使用Ctrl + c 中断</span></span><br></pre></td></tr></table></figure></li><li><p>从loop循环中返回值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result  = <span class="keyword">loop</span>&#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span>&#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 The result is 20</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>,number);</span><br><span class="line">        number = number - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果:  3</span></span><br><span class="line"><span class="comment">//      2</span></span><br><span class="line"><span class="comment">//      1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter()&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is : &#123;&#125;&quot;</span>,element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">//结果: the value is : 10</span></span><br><span class="line"><span class="comment">//     the value is : 20</span></span><br><span class="line"><span class="comment">//     the value is : 30</span></span><br><span class="line"><span class="comment">//     the value is : 40</span></span><br><span class="line"><span class="comment">//     the value is : 50</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev()&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>,number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-Cargo&quot;&gt;&lt;a href=&quot;#Hello-Cargo&quot; class=&quot;headerlink&quot; title=&quot;Hello, Cargo!&quot;&gt;&lt;/a&gt;Hello, Cargo!&lt;/h2&gt;&lt;p&gt;Cargo是Rust工具链中内置的构建系统及包管理器.&lt;/p
      
    
    </summary>
    
    
    
      <category term="Rust" scheme="http://blog.isk.ink/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>git push超时问题解决方法</title>
    <link href="http://blog.isk.ink/2021/05/01/git-push%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.isk.ink/2021/05/01/git-push%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-01T11:13:14.000Z</published>
    <updated>2021-09-01T13:09:09.078Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>git push经常出现443错误,上传超时.修改多次后只能当时有效,所以解决后来记录下.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>今天上传要不是443错误,要不就是10054错误,10054产生原因:</p><p> 一般是因为服务的SSL证书没有经过第三方机构的签署.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;.......&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure><p>一般解决方法是:接触ssl验证后,再次git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>但是这种方法前几次还有效果,但是今天就没用了</p><p>一般和443错误轮流出现.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>方法一:</p><ul><li><p>如果开启vpn等翻墙工具,或者代理工具全局代理.因为代理的问题会出现上传超时等问题.比如我用的是clash,默认端口号是7890</p></li><li><p>所以在git bash命令中输出以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果你以前已经设置过了上述配置,则使用如下命令取消再进行配置即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看git的http代理设置</span><br><span class="line">git config --global http.proxy</span><br><span class="line">#查看git的https代理设置</span><br><span class="line">git config --global https.proxy</span><br><span class="line">#查看git的所有配置</span><br><span class="line">git config --global -l</span><br></pre></td></tr></table></figure></li></ul><p>方法二:</p><ul><li><p>修改hosts文件,把github的ip特殊照顾</p></li><li><p>打开<a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a> 记录IP Address</p></li><li><p>打开<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo记录IP">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo记录IP</a> Address</p></li><li><p>打开<a href="https://github.com.ipaddress.com/assets-cdn.github.com记录IP">https://github.com.ipaddress.com/assets-cdn.github.com记录IP</a> Address,注意这里会有三个,全部记录</p></li><li><p>打开电脑的hosts文件添加到最后,Windows的hosts文件在<code>C:\Windows\System32\drivers\etc</code>里,使用记事本打开,添加到最后</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210501195843.png" alt="image-20210501195836082"></p></li></ul><p>然后使用管理员权限打开Window poweShell输出ipconfig /flushdns</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210501200119.png" alt="image-20210501200048322"></p><p>这时候一般git push就不会出现超时问题了</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>实在不行就换个通道吧.别用https了。墙内墙外http,https通道不仅速度慢，也都有失败风险的。访问不到就返回空了。具体做法如下：</p><p>比如现在你的repo地址是：<br>https: //<a href="https://link.zhihu.com/?target=http%3A//github.com/xxx/xxx.github.io.git">http://github.com/xxx/xxx.github.io.git</a><br>那就把https://换成git@，如下：<br><a href="mailto:git@github.com">git@github.com</a>:xxx/xxx.github.io.git</p><p>xxx是你的github名称。</p><p>方法如下: </p><p>方法一: 通过命令直接修改远程仓库地址,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote #查看所有远程仓库</span><br><span class="line">git remote -v  #查看远程仓库地址命令</span><br><span class="line">git remote set-url origin xxx  #xxx是你新的远程仓库地址</span><br></pre></td></tr></table></figure><p>方法二:先删除在添加你的远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin </span><br><span class="line">git remote rm add origin xxx ## xxx是你的远程仓库地址(URL)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;git push经常出现443错误,上传超时.修改多次后只能当时有效,所以解决后来记录下.&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://blog.isk.ink/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>浅谈C++ STL的容器</title>
    <link href="http://blog.isk.ink/2021/04/22/%E6%B5%85%E8%B0%88C-STL%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://blog.isk.ink/2021/04/22/%E6%B5%85%E8%B0%88C-STL%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-04-22T13:08:06.000Z</published>
    <updated>2021-05-14T12:27:22.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C++ 中有许多好用的容器,在开发和算法中不可缺少.</p><p>首先理解一下,什么是容器,在C++中容器被定义为: 在数据存储上,有一种,对象类型,它可以持有其他对象,或者其他对象的指针,这种对象类型就叫容器.</p><p>容器有个特点就是可以自行扩展.在解决问题中,我们常常不知道我们要存储多少个对象,也就是说,我们不知到应该创建多大的内存空间来保存我们的对象.这里是对比数组,就体现了容器的优势.</p><p>几乎在所有的面向对象的语言中都伴随着一个容器集,在C++中,就是标准模板库(STL).</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="C-STL之动态数组vector的使用"><a href="#C-STL之动态数组vector的使用" class="headerlink" title="C++ STL之动态数组vector的使用"></a>C++ STL之动态数组vector的使用</h3><p>C++里有一个能完全代替数组的动态数组vector,优点是能在运行阶段设置数组的长度,在末尾增加新的数据,在中间插入新的值,长度任意改变.</p><p>vector,stack,quenue,map,set这些C++容器,都可以使用.size()获取到容器的大小,就像string       s的长度用s.length()获取一样(string其实也可以用s.size(),不过,对于容器我们一般讨论它的大小,字符串一般讨论长度.)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;     <span class="comment">//定义一个vector v1,定义时没有分配大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.size();   <span class="comment">//输出vector v1的大小,此处应该为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//直接定义长度为10的int数组,默认10个元素都为0</span></span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;   </span><br><span class="line">    v1.resize(<span class="number">8</span>);      <span class="comment">//先定义一个vector变量v2,然后将长度resize为8,8个元素默认为0;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义的时候就可以对vector变量进行初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">100</span>,<span class="number">9</span>)</span></span>; <span class="comment">//将100长度的数组中所有的值都初始化为9</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//访问的时候像数组一样直接用[]下表访问即可~或者迭代器访问</span></span><br><span class="line">    v[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用vector方法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;    <span class="comment">//注意,定义的时候未指定vector的大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这个时候size是0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        a.push_back(i);  <span class="comment">//在vector a 的末尾添加一个元素i;</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; a.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这时候发现a的大小变成了10</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">15</span>)</span></span>;   <span class="comment">//定义的时候指定vector的大小,默认b里面的元素都是0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出b的大小发现是15</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i ++)&#123;</span><br><span class="line">        b[i] = <span class="number">15</span>;          <span class="comment">//将每个数都定义为15,原来默认为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//打印出来是15个15 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">20</span>,<span class="number">2</span>)</span>    <span class="comment">//定义的时候指定vector的大小并把所有的元素夫一个指定的值</span></span></span><br><span class="line"><span class="function">    <span class="title">for</span><span class="params">(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; c.size(),i ++)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = c.begin(); it != c.<span class="built_in">endl</span>(); it ++)&#123;  <span class="comment">//使用迭代器的方法访问vector,auto相当于vector&lt;int&gt;::iterator</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//访问元素的值要对it指针取值,所以要在前面加星号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-STL之集合set的使用"><a href="#C-STL之集合set的使用" class="headerlink" title="C++STL之集合set的使用"></a>C++STL之集合set的使用</h3><p>set是集合,一个set里面的各元素是各不相同的,而且,set会按照元素进行从大到小排序(自动排序),自动排序利用的是平衡二叉搜索树,也就是红黑树维护.不仅能实现对数字的排序,还能实现对字母的排序(稍后会有演示代码).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  <span class="comment">//定义一个空集合s</span></span><br><span class="line">    s.insert(<span class="number">1</span>); <span class="comment">//向集合s里面插入一个1,会自动给你排序</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(s.begin()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出集合s的第一个元素(前面的星号表示要对指针取值)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; <span class="number">6</span> ; i ++)&#123;</span><br><span class="line">        s.insert(i);    <span class="comment">//向集合s里面插入i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用迭代器遍历集合s里面的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = s.begin(); it != s.end(); it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">//访问元素的值要对it指针取值,所以加星号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;  <span class="built_in">endl</span> &lt;&lt; (s.find(<span class="number">2</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//查找元素s的值,如果结果等于s.end()表示为找到.(因为s.end()表示s的最后一个元素的下一个元素所在的位置)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;  (s.find(<span class="number">10</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// s.find(10) != s.end()表示能找到10这个元素.</span></span><br><span class="line">    s.erase(<span class="number">1</span>); <span class="comment">// 删除集合s中的1这个元素</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; (s.fine(<span class="number">1</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这时候元素1就应该找不到了</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set集合对字母排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; st1;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it1;</span><br><span class="line">    st1.insert(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;bca&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(it1=st1.begin(); it1!=st1.end(); it1++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*it1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423100643.png" alt="image-20210423100643852"></p><h2 id="C-STL之栈stack的使用"><a href="#C-STL之栈stack的使用" class="headerlink" title="C++ STL之栈stack的使用"></a>C++ STL之栈stack的使用</h2><p>栈stack在头文件#include<stack>中,是数据结构里面的栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;   <span class="comment">//定义一个空栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span>;i ++)&#123;</span><br><span class="line">        s.push(i);    <span class="comment">//将元素压入栈中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//访问s的栈顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;s.size() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出s的元素个数</span></span><br><span class="line">   s.pop(); <span class="comment">//移除栈顶元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-STL之队列quenu的使用"><a href="#C-STL之队列quenu的使用" class="headerlink" title="C++ STL之队列quenu的使用"></a>C++ STL之队列quenu的使用</h2><p>队列queue在头文件#include<quenue>中,是数据结构中的队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;   <span class="comment">//定义一个空队列</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">        q.push(i);    <span class="comment">//将i的值依次压入队列q中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;q.back() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//访问队列的队首和队尾元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;q.size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出队列的元素个数</span></span><br><span class="line">    q.pop(); <span class="comment">//移除队列的队首元素</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;C++ 中有许多好用的容器,在开发和算法中不可缺少.&lt;/p&gt;
&lt;p&gt;首先理解一下,什么是容器,在C++中容器被定义为: 在数据存储上,有一种
      
    
    </summary>
    
    
    
      <category term="C++ ,STL" scheme="http://blog.isk.ink/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>关于过去一个月的小总结</title>
    <link href="http://blog.isk.ink/2021/04/19/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.isk.ink/2021/04/19/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-19T15:16:06.000Z</published>
    <updated>2021-04-23T02:11:33.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过去一个月多,没有更新博客,今天特意回来瞅瞅,原以为我的好友们一定更新了不少文章,结果都在摸鱼. 好家伙!  不过有位大佬的博客 又停了,可能是谈恋爱了.没时间维护,嗯,没错就是这样.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>最近去整蓝桥杯算法竞赛去了,不过,我是真的菜,昨天考完,估计省三是没戏了,我莽了,而且白给了.不过不要紧,至少,我还是学到了东西的. 不过也失去了一些,但是问题不大. 忙忙碌碌一个月,也不是没有收获. 而且一个月内 ,没时间学自己感兴趣的东西就有点遗憾.</p><h2 id="关于爱情"><a href="#关于爱情" class="headerlink" title="关于爱情"></a>关于爱情</h2><p>我收到了我初中同桌送的一个手工玩偶,是她亲手做的,她一定是喜欢我(人生十大错觉),不得不说,那个小东西还挺别致,等有时间了,补一张照片,挂在我的小米双肩包上刚刚好. 希望爱情别像算法那么难,要不然我的人生就太过悲惨了,菜鸡和舔狗终将一无所有.    </p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423073917.jpg" alt=""></p><p>我和她应该也算比较好的朋友,嗯…我单方面觉得,毕竟联系比较多(相对其他人来说),类似于友人以上,恋人未满的状态,这种情况,很难抉择,毕竟可能不表白没事,一表白就 :” 好家伙! 我把你当好朋友,你居然想泡我 “ 或者  “其实我也喜欢你很久了! 我们交往吧!”  第二种情况大概率不会发生,所以就错付了.</p><h2 id="关于折腾"><a href="#关于折腾" class="headerlink" title="关于折腾"></a>关于折腾</h2><p>最近在这个显卡价格起飞的时候,我组装了一台电脑,没错,我脑子坏掉了,然而我其实并不需要的,但是就是想捡垃圾.  配置 是 志强 x5645 ,x58丐板, RX 370显卡,8g三星内存条,前前后后大概一千左右,  这里就不得不说,我那颗牛逼的cup, 淘宝22块还包邮,是买主板的时候,咸鱼卖家送我的,用着还不错,至少 作为一个22块的cup它尽力了,万一用了一个星期,报废了,我还能拿来当挂坠,欸嘿,我真是个天才. </p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423074100.jpg" alt=""></p><p> 22块,性价比超级高的好吗?</p><p>洋垃圾真香!</p><p>希望电脑没事,毕竟我花了200软妹币买了好的电源,希望不要爆炸,阿弥陀佛..</p><h2 id="关于老婆"><a href="#关于老婆" class="headerlink" title="关于老婆"></a>关于老婆</h2><p>最近成为了Akie秋绘的粉丝,就是网易云唱歌的那个,在B站直播呢,所以我就去关注了,见人就喊老婆,谁还不是个DD呢?  上一年B站付定金的手办到了,结了尾款,加藤惠老婆真可爱,放在书架上真不错,二次元宅男不好吗? 要什么三次元老婆,不过最近由于忙着上课和准备比赛,所以没有很多时间看动漫和打游戏,所以,现在比赛结束了,适当抽个时间出校门放松下.</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423073928.jpg" alt=""></p><p>感受下 人间的四月天 , 虽然快五月了,这不重要.</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>最近瘦了不少,脸上的痘痘也没了不少,发际线又高了,依旧是单身,编程还是那么菜,不过买了个小米显示器挂灯,这让最近在电脑前写字舒服了不少.</p><p>爱情依旧没来,</p><p>人生还要继续,</p><p>哪怕我想成为舔狗,</p><p>都没人让我舔,</p><p>没有目标,没有动力,</p><p>我果然是废物.</p><p>感觉怎么不对,原来十二点十分了,网易云综合征犯了,不能写了. 故事不长.也不难讲(bushi)</p><p>下次想起来接着写…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;过去一个月多,没有更新博客,今天特意回来瞅瞅,原以为我的好友们一定更新了不少文章,结果都在摸鱼. 好家伙!  不过有位大佬的博客 又停了,可
      
    
    </summary>
    
    
    
      <category term="总结" scheme="http://blog.isk.ink/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux下使用Clash翻墙</title>
    <link href="http://blog.isk.ink/2021/03/20/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Clash%E7%BF%BB%E5%A2%99/"/>
    <id>http://blog.isk.ink/2021/03/20/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Clash%E7%BF%BB%E5%A2%99/</id>
    <published>2021-03-20T15:45:44.000Z</published>
    <updated>2021-05-16T05:00:16.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近在Ubuntu下编程,但是要用到Google搜索,毕竟我是面向浏览器编程,所以解决问题全都要Google,而且进入github也需要翻墙.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先 我所使用的是clash小猫咪,个人觉得这个软件比较好用,虽然英文版开始有点不熟悉.</p><ol><li><p>执行 <code>cd &amp;&amp; mkdir clash</code> 在用户目录下创建 clash 文件夹。</p><p>下载适合的 Clash 二进制文件并解压重命名为 <code>clash</code></p><p>一般个人的64位电脑下载 clash-linux-amd64.tar.gz 即可。</p><p>下载clash  <a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p></li></ol><p>   <img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321004357.png" alt="image-20210321004350458"></p><ol start="2"><li>解压并运行它代码如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gunzip clash-linux-arm64-v1.4.2.gz   </span><br><span class="line">mv clash-linux-arm64-v1.4.2 clash</span><br><span class="line">chmod +x clash</span><br></pre></td></tr></table></figure><p>对以上代码解释:</p><p>​                第一行: 解压gz文件</p><p>​                第二行: 给文件改名为clash,文件名太长很麻烦</p><p>​                第三行: 给文件权限</p><ol start="3"><li>在终端 <code>cd</code> 到 Clash 二进制文件所在的目录，执行 <code>wget -O config.yml *******************************?clash=1&amp;log-level=info</code> 下载 Clash 配置文件(上面*处是商机给你的链接)<img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321005846.png" alt="image-20210321005846119"></li></ol><p>​    此时会在clash文件下生成config.yml文件,这是配置文件</p><ol start="4"><li><p>在管理员权限下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;clash -d .</span><br></pre></td></tr></table></figure><p>此时出现<img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010135.png" alt="image-20210321010135107"></p></li><li><p>接着使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm config.yaml</span><br></pre></td></tr></table></figure><p>即删除它自动生成的config.yaml配置文件</p><p>再把原来商家给你下载的config.yml文件改名为config.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv config.yml config.yaml</span><br></pre></td></tr></table></figure><p>此时只有三个文件,即clash   和config.yaml 和Country.mmdb</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010534.png" alt="image-20210321010534845"></p></li><li><p>接着再在管理员权限下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;clash -d .</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010731.png" alt="image-20210321010731527"></p><p>如果没有警告那就成功了一半</p><ol start="7"><li><p>在系统设置里面设置网络代理,改为手动 改成下图所演示,一点不差</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010819.png" alt="img"></p></li><li><p>打开浏览器,输入clash.razord.top</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321011042.png" alt="image-20210321011042174"></p><p>在这里可以测速,和修改节点代理.</p><ol start="9"><li>好了,登录谷歌试试吧</li><li><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321011234.png" alt="image-20210321011234337"></li></ol></li></ol><p>如果不想代理就把网络代理设置为”已禁用”.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于最近在Ubuntu下编程,但是要用到Google搜索,毕竟我是面向浏览器编程,所以解决问题全都要Google,而且进入github也需要
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.isk.ink/categories/Linux/"/>
    
    
      <category term="Clash" scheme="http://blog.isk.ink/tags/Clash/"/>
    
  </entry>
  
  <entry>
    <title>无界面启动虚拟机通过VScode远程连接</title>
    <link href="http://blog.isk.ink/2021/02/01/%E6%97%A0%E7%95%8C%E9%9D%A2%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://blog.isk.ink/2021/02/01/%E6%97%A0%E7%95%8C%E9%9D%A2%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</id>
    <published>2021-02-01T02:01:48.000Z</published>
    <updated>2021-05-07T15:42:55.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天突然闲的无聊,看了下自己装的Ubuntu虚拟机,觉得把所有开发环境丢进去,这样无论什么编程语言都能在虚拟机上运行,通过远程连接虚拟机,一个vscode就可以写各种代码,感觉十分方便啊,因为要开虚拟机所以尽量把电脑的负载降到最小,所以选择无界面启动,编程时都是在win10上写代码.也不需要Ubuntu的图形界面.</p><h2 id="无界面启动VMware中的Ubuntu"><a href="#无界面启动VMware中的Ubuntu" class="headerlink" title="无界面启动VMware中的Ubuntu"></a>无界面启动VMware中的Ubuntu</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201100806.png" alt="image-20210201100759409"></p><ul><li>找到上图所示的vmrun.exe所在位置,通过cmd打开</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101009.png" alt="image-20210201101009371"></p><ul><li>再找到你要无界面开启的虚拟机,比如我的Ubuntu 64位.vmx</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101105.png" alt="image-20210201101105236"></p><p>在上上图所示的有vmrun的目录前,</p><ul><li>通过命令<code>vmrun -T ws start &quot;E:\VM_2\Ubuntu 64位 .vmx&quot; nogui</code></li></ul><p>无界面启动Ubuntu 64位.vmx,如何判断启动成功呢?输入<code>vmrun  list</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101410.png" alt="image-20210201101410229"></p><p>可以看到,启动的虚拟机数量为1,并列出启动的虚拟机名称</p><p>同样的,关机为<code>vmrun stop &quot;E:\VM_2\Ubuntu 64位 .vmx&quot; hard</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101615.png" alt="image-20210201101615730"></p><h3 id="脚本启动"><a href="#脚本启动" class="headerlink" title="脚本启动"></a>脚本启动</h3><p>那么每次启动虚拟机都这么麻烦,有没有快的方法呢?</p><p>当然.可以写个脚本呀</p><p>附上我的代码</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">::<span class="built_in">start</span> vmware </span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> s:<span class="built_in">start</span> vmware p:stop vmware</span><br><span class="line">@<span class="built_in">set</span> /p select=shuru:</span><br><span class="line">@<span class="keyword">if</span> &quot;<span class="variable">%select%</span>&quot; == &quot;s&quot; <span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line">@<span class="keyword">if</span> &quot;<span class="variable">%select%</span>&quot; == &quot;p&quot; <span class="keyword">goto</span> stop</span><br><span class="line"></span><br><span class="line">:stop</span><br><span class="line"><span class="function">    E: </span></span><br><span class="line"><span class="function">    <span class="title">cd</span> <span class="title">VM_1</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> <span class="title">stop</span> &quot;<span class="title">E</span>:\<span class="title">VM_2</span>\<span class="title">Ubuntu</span> 64位 .<span class="title">vmx</span>&quot; <span class="title">hard</span></span></span><br><span class="line"><span class="function">    @<span class="title">echo</span> <span class="title">stop</span> <span class="title">succeed</span>!</span></span><br><span class="line"><span class="function">    <span class="title">pause</span></span></span><br><span class="line"><span class="function">    <span class="title">exit</span></span></span><br><span class="line"><span class="function">:<span class="title">start</span></span></span><br><span class="line"><span class="function">    <span class="title">E</span>: </span></span><br><span class="line"><span class="function">    <span class="title">cd</span> <span class="title">VM_1</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> <span class="title">list</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> -<span class="title">T</span> <span class="title">ws</span> <span class="title">start</span> &quot;<span class="title">E</span>:\<span class="title">VM_2</span>\<span class="title">Ubuntu</span> 64位 .<span class="title">vmx</span>&quot; <span class="title">nogui</span></span></span><br><span class="line"><span class="function">    <span class="title">tasklist</span>|<span class="title">findstr</span> <span class="title">vmware</span></span></span><br><span class="line"><span class="function">    @<span class="title">echo</span> <span class="title">start</span> <span class="title">succeed</span>!</span></span><br><span class="line"><span class="function">    <span class="title">pause</span></span></span><br><span class="line"><span class="function">    <span class="title">exit</span></span></span><br></pre></td></tr></table></figure><p>对以上代码的解释,</p><ul><li><p>chcp 65001  是防止中文乱码,毕竟我有个”64位”,会出现乱码,以防万一</p></li><li><p>s:start vmware p:stop vmware   输入s,执行start后的所有命令,包括从C盘进入E盘.进入文件夹VM_1,输入p关闭虚拟机,只是将上面的许多DOS命令集合到一起运行.</p></li></ul><p>使用方法:</p><ul><li>在桌面上新建文件夹,改为bat后缀,把以上内容复制上去,自行修改内容,文件地址等.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天突然闲的无聊,看了下自己装的Ubuntu虚拟机,觉得把所有开发环境丢进去,这样无论什么编程语言都能在虚拟机上运行,通过远程连接虚拟机,
      
    
    </summary>
    
    
    
      <category term="VS code Linux" scheme="http://blog.isk.ink/tags/VS-code-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vim备忘录</title>
    <link href="http://blog.isk.ink/2021/01/12/Vim%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://blog.isk.ink/2021/01/12/Vim%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2021-01-12T01:35:28.000Z</published>
    <updated>2021-02-04T03:13:56.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim备忘单"><a href="#Vim备忘单" class="headerlink" title="Vim备忘单"></a>Vim备忘单</h1><h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><ul><li><strong>:h[elp]</strong> <strong>关键字</strong> - 打开关键字帮助</li><li><strong>:sav[eas]</strong> <strong>文件名</strong> - 另存为</li><li><strong>:clo[se]</strong> - 关闭当前窗口</li><li><strong>:ter[minal]</strong> -打开终端窗口</li><li><strong>K</strong> - 打开光标所在单词的man页面</li></ul><p><strong>提示**</strong>vimtutor**在终端上运行以学习第一个Vim命令。</p><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><ul><li><strong>h</strong> - 左移光标</li><li><strong>j</strong> - 下移光标</li><li><strong>k</strong> - 上移光标</li><li><strong>l</strong> - 右移光标</li><li><strong>H</strong> - 移动到当前页面顶部</li><li><strong>M</strong> - 移动到当前页面中间</li><li><strong>L</strong> - 移动到当前页面底部</li><li><strong>w</strong> - 移动到下个单词开头</li><li><strong>W</strong> - 移动到下个单词开头(单词含标点)</li><li><strong>e</strong> - 移动到下个单词结尾</li><li><strong>E</strong> - 移动到下个单词结尾(单词含标点)</li><li><strong>b</strong> - 移动到上个单词开头</li><li><strong>B</strong> - 移动到上个单词开头(单词含标点)</li><li><strong>%</strong> - 跳转到配对的符号(默认支持的配对符号组:: ‘()’,     ‘{}’, ‘[]’ - 在vim中使用 :h matchpairs 获得更多信息)</li><li><strong>0</strong> - 移动到行首</li><li><strong>^</strong> - 移动到行首的非空白符</li><li><strong>$</strong> - 移动到行尾</li><li><strong>g_</strong> - 移动到行内最后一个非空白符</li><li><strong>gg</strong> - 移动到文件第一行</li><li><strong>G</strong> - 移动到文件最后一行</li><li><strong>5gg</strong> or <strong>5G</strong> - 移动到第五行</li><li><strong>fx</strong> - 移动到字符 x 下次出现的位置</li><li><strong>tx</strong> - 移动到字符 x 下次出现的位置的前一个字符</li><li><strong>Fx</strong> - 移动到字符 x 上次出现的位置</li><li><strong>Tx</strong> - 移动到字符 x 上次出现的位置的后一个字符</li><li><strong>;</strong> - 重复之前的f、t、F、T操作</li><li><strong>,</strong> - 反向重复之前的f、t、F、T操作</li><li><strong>}</strong> - 移动到下一个段落 (当编辑代码时则为函数／代码块)</li><li><strong>{</strong> - 移动到上一个段落 (当编辑代码时则为函数／代码块)</li><li><strong>zz</strong> - 移动屏幕使光标居中</li><li><strong>Ctrl</strong> + <strong>e</strong> - 向下移动屏幕一行(保持光标不动)</li><li><strong>Ctrl</strong> + <strong>y</strong> - 向上移动屏幕一行(保持光标不动)</li><li><strong>Ctrl</strong> + <strong>b</strong> - 向上滚动一屏</li><li><strong>Ctrl</strong> + <strong>f</strong> - 向下滚动一屏</li><li><strong>Ctrl</strong> + <strong>d</strong> - 向下滚动半屏</li><li><strong>Ctrl</strong> + <strong>u</strong> - 向上滚动半屏</li></ul><p><strong>Tip</strong> 命令前追加数字表示命令的重复次数, 比如 <strong>4j</strong> 表示向下移动四行</p><h3 id="插入模式-插入-追加文本"><a href="#插入模式-插入-追加文本" class="headerlink" title="插入模式 - 插入/追加文本"></a>插入模式 - 插入/追加文本</h3><ul><li><p><strong>i</strong> - 从光标前开始插入字符</p></li><li><p><strong>I</strong> - 从行首开始插入字符</p></li><li><p><strong>a</strong> - 从光标后开始插入字符</p></li><li><p><strong>A</strong> - 从行尾开始插入字符</p></li><li><p><strong>o</strong> - 在当前行之下另起一行, 开始插入字符</p></li><li><p><strong>O</strong> - 在当前行之上另起一行, 开始插入字符</p></li><li><p><strong>ea</strong> - 从当前单词末尾开始插入</p></li><li><p><strong>Ctrl</strong> + <strong>h</strong> - 在插入模式下，删除光标前的字符</p></li><li><p><strong>Ctrl</strong> + <strong>w</strong> - 在插入模式下，删除光标前的单词</p></li><li><p><strong>Ctrl</strong> + <strong>j</strong> - 在插入模式下，另起一行</p></li><li><p><strong>Ctrl</strong> + <strong>t</strong> - 在插入模式下，向右缩进，宽度由 shiftwidth 控制</p></li><li><p><strong>Ctrl</strong> + <strong>d</strong> - 在插入模式下，向左缩进，宽度由 shiftwidth 控制</p></li><li><p><strong>Ctrl</strong> + <strong>n</strong> - 在插入模式下，在光标之前插入自动补全的下一个匹配项</p></li><li><p><strong>Ctrl</strong> + <strong>p</strong> - 在插入模式下，在光标之前插入自动补全的上一个匹配项</p></li><li><p><strong>Ctrl</strong>+ <strong>rx</strong>-插入寄存器x的内容</p></li><li><p><strong>Esc</strong> - 退出插入模式</p></li><li><p>222<strong>r</strong> - 替换当前字符</p></li><li><p><strong>J</strong> - 将下一行合并到当前行, 并在两部分文本之间插入一个空格</p></li><li><p><strong>gJ</strong> - 将下一行合并到当前行, 两部分文本之间不含空格</p></li><li><p><strong>gwip</strong> - 重新调整段落</p></li><li><p><strong>gu</strong> -更改为小写字母</p></li><li><p><strong>gU</strong> -更改为大写字母</p></li><li><p><strong>cc</strong> - 将光标所在的行删除, 然后进入插入模式</p></li><li><p><strong>C</strong> - 将光标处到行尾删除, 然后进入插入模式</p></li><li><p><strong>c$</strong> - 将光标处到行尾删除, 然后进入插入模式</p></li><li><p><strong>ciw</strong> - 将光标所在的单词删除, 然后进入插入模式</p></li><li><p><strong>cw</strong> - 从光标位置开始, 修改单词</p></li><li><p><strong>s</strong> - 删除当前字符, 然后进入插入模式</p></li><li><p><strong>S</strong> - 清空当前行, 然后进入插入模式 (同<kbd>cc</kbd>)</p></li><li><p><strong>xp</strong> - 当前字符后移</p></li><li><p><strong>u</strong> - 撤销</p></li><li><p><strong>U</strong> -恢复（撤消）上次更改的行</p></li><li><p><strong>Ctrl</strong> + <strong>r</strong> - 重复</p></li><li><p><strong>.</strong> - 再次执行上个命令</p></li></ul><h3 id="选择文本（可视化模式）"><a href="#选择文本（可视化模式）" class="headerlink" title="选择文本（可视化模式）"></a>选择文本（可视化模式）</h3><ul><li><strong>v</strong> - 进入可视化模式, 移动光标高亮选择, 然后可以对选择的文本执行命令(比如<kbd>y</kbd>-复制)</li><li><strong>V</strong> - 进入可视化模式(行粒度选择)</li><li><strong>o</strong> - 切换光标到选择区开头/结尾</li><li><strong>Ctrl</strong> + <strong>v</strong> - 进入可视化模式(矩阵选择)</li><li><strong>O</strong> - 切换光标到选择区的角</li><li><strong>aw</strong> - 选择当前单词</li><li><strong>ab</strong> - 选择被 () 包裹的区域(含括号)</li><li><strong>aB</strong> - 选择被 {} 包裹的区域(含花括号)</li><li><strong>at</strong> - 选择被 &lt;&gt; 标签包裹的区域(含&lt;&gt;标签)</li><li><strong>ib</strong> - 选择被 () 包裹的区域(不含括号)</li><li><strong>iB</strong> - 选择被 {} 包裹的区域(不含花括号)</li><li><strong>it</strong> - 选择被 &lt;&gt; 标签包裹的区域(不含&lt;&gt;标签)</li><li><strong>Esc</strong> - 退出可视化模式</li></ul><p><strong>Tip</strong> 也可以使用 <strong>(</strong> 和 <strong>{</strong> 分别代替 <strong>b</strong> 和 <strong>B</strong></p><h2 id="可视化模式命令"><a href="#可视化模式命令" class="headerlink" title="可视化模式命令"></a>可视化模式命令</h2><ul><li><strong>&gt;</strong> - 向右缩进</li><li><strong>&lt;</strong> - 向左缩进</li><li><strong>y</strong> - 复制</li><li><strong>d</strong> - 剪切</li><li><strong>~</strong> - 大小写切换</li><li><strong>u</strong> - 将选中文本转换为小写</li><li><strong>U</strong> - 将选中文本转换为大写</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><ul><li><strong>:reg[isters]</strong> - 显示寄存器内容</li><li><strong>“xy</strong> - 复制内容到寄存器 x</li><li><strong>“xp</strong> - 粘贴寄存器 x 中的内容</li><li><strong>“+y</strong> - 复制内容到系统剪贴板寄存器</li><li><strong>“+p</strong> - 粘贴系统剪贴板寄存器的内容</li></ul><p><strong>Tip</strong> 寄存器被存储在 ~/.viminfo 中, 在下次重启vim时仍会加载</p><p><strong>Tip</strong> 特殊寄存器：</p><p> <strong>0</strong> - 上次复制<br> <strong>“</strong> - 未命名寄存器，上次复制或删除<br> <strong>%</strong> - 当前文件名<br> <strong>#</strong> - 轮换文件名<br> <strong>*** - 剪贴板内容 (X11 primary)<br> **+</strong> - 剪贴板内容 (X11 clipboard)<br> <strong>/</strong> - 上次搜索的pattern<br> <strong>:</strong> - 上次执行的命令<br> <strong>.</strong> - 上次插入的文本<br> <strong>-</strong> - 上次剪切的短于一行的文本<br> <strong>=</strong> - 表达式寄存器<br> <strong>_</strong> - 黑洞寄存器</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul><li><strong>:marks</strong> - 标记列表</li><li><strong>ma</strong> - 设置当前位置为标记 a</li><li><strong>`a</strong> - 跳转到标记 a 的位置</li><li><strong>y`a</strong> - 复制当前位置到标记 a 的内容</li><li><strong>`0</strong> -转到先前退出Vim的位置</li><li><strong>`”</strong> -转到最后编辑此文件的位置</li><li><strong>`.</strong> -转到此文件中最后更改的位置</li><li><strong>``</strong> -跳到最后一跳之前的位置</li><li><strong>:ju[mps]</strong> -跳跃清单</li><li><strong>Ctrl</strong>+ <strong>i</strong>-跳转到跳转列表中的较新位置</li><li><strong>Ctrl</strong>+ <strong>o</strong>-在跳转列表中转到较旧的位置</li><li><strong>:changes</strong> -变更清单</li><li><strong>g,</strong> -转到更改列表中的较新位置</li><li><strong>g;</strong> -转到更改列表中的较旧位置</li><li><strong>Ctrl</strong>+ <strong>]</strong>-跳至光标下方的标签</li></ul><p><strong>提示</strong>要跳至标记，可以使用反引号（<strong>`</strong>）或撇号（<strong>‘</strong>）。使用撇号将跳转到持有该标记的行的开头（第一个非黑色）。</p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><ul><li><strong>qa</strong> - 录制宏 a</li><li><strong>q</strong> - 停止录制宏</li><li><strong>@a</strong> - 执行宏 a</li><li><strong>@@</strong> - 重新执行上次执行的宏</li></ul><h2 id="剪切-复制-粘贴"><a href="#剪切-复制-粘贴" class="headerlink" title="剪切, 复制, 粘贴"></a>剪切, 复制, 粘贴</h2><ul><li><strong>yy</strong> - 复制当前行</li><li><strong>2yy</strong> - 复制 2 行</li><li><strong>yw</strong> - 复制当前单词</li><li><strong>y$</strong> - 复制, 从光标位置到行末</li><li><strong>p</strong> - 在光标后粘贴</li><li><strong>P</strong> - 在光标前粘贴</li><li><strong>dd</strong> - 剪切当前行</li><li><strong>2dd</strong> - 剪切 2 行</li><li><strong>dw</strong> - 剪切当前单词</li><li><strong>D</strong> - 剪切, 从光标位置到行末</li><li><strong>d$</strong> - 剪切, 从光标位置到行末 (同<kbd>D</kbd>)</li><li><strong>x</strong> - 剪切当前字符</li></ul><h2 id="文字缩进"><a href="#文字缩进" class="headerlink" title="文字缩进"></a>文字缩进</h2><ul><li><strong>&gt;&gt;</strong> - 将当前行向右缩进，宽度由 shiftwidth 控制</li><li><strong>&lt;&lt;</strong> - 将当前行向左缩进，宽度由 shiftwidth 控制</li><li><strong>&gt;%</strong> - 向右缩进 () 或 {} 内的区域 (光标需置于括号上)</li><li><strong>&gt;ib</strong> - 向右缩进 () 内的区域</li><li><strong>&gt;at</strong> - 向右缩进 &lt;&gt; 标签内的区域</li><li><strong>3==</strong> - 自动缩进 3 行</li><li><strong>=%</strong> - 自动缩进 () 或 {} 内的区域 (光标需置于括号上)</li><li><strong>=iB</strong> - 自动缩进 {} 内的区域 (光标需置于括号上)</li><li><strong>gg=G</strong> - 自动缩进整个缓冲区</li><li><strong>]p</strong> - 粘贴并调整缩进至当前行</li></ul><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><ul><li><strong>:w</strong> - 保存</li><li><strong>:w !sudo tee %</strong> - 使用 sudo 保存当前文件</li><li><strong>:wq</strong> or <strong>:x</strong> or <strong>ZZ</strong> - 保存并退出</li><li><strong>:q</strong> - 退出(修改未保存时警告)</li><li><strong>:q!</strong> or <strong>ZQ</strong> - 不保存强制退出</li><li><strong>:wqa</strong> - 保存所有标签页并全部退出</li></ul><h2 id="查找-替换"><a href="#查找-替换" class="headerlink" title="查找/替换"></a>查找/替换</h2><ul><li><strong>/pattern</strong> - 查找<kbd>pattern</kbd></li><li><strong>?pattern</strong> - 向上查找<kbd>pattern</kbd></li><li><strong>\vpattern</strong> - <kbd>pattern</kbd> 中的非字母数字字符被视为正则表达式特殊字符 (不需转义字符)</li><li><strong>n</strong> - 查找下一个</li><li><strong>N</strong> - 查找上一个</li><li><strong>:%s/old/new/g</strong> - 替换全部</li><li><strong>:%s/old/new/gc</strong> - (逐个)替换</li><li><strong>:noh[lsearch]</strong> - 移除搜索结果的高亮显示</li></ul><h2 id="多文件搜索"><a href="#多文件搜索" class="headerlink" title="多文件搜索"></a>多文件搜索</h2><ul><li><strong>:vim[grep] /pattern/ {<code>&#123;file&#125;</code>}</strong> - 在多个文件中搜索 <kbd>pattern</kbd></li></ul><p>例如 <strong>:vim[grep] /foo/ \</strong>/***</p><ul><li><strong>:cn[ext]</strong> - 移动至下一个</li><li><strong>:cp[revious]</strong> - 移动至上一个</li><li><strong>:cope[n]</strong> - 打开搜索结果列表</li><li><strong>:ccl[ose]</strong> -关闭快速修复窗口</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><strong>:tabnew</strong> or <strong>:tabnew {page.words.file}</strong> - 在新标签中打开文件</li><li><strong>Ctrl</strong> + <strong>wT</strong> - 将窗口变成标签</li><li><strong>gt</strong> or <strong>:tabn[ext]</strong> - 切换到下一个标签</li><li><strong>gT</strong> or <strong>:tabp[revious]</strong> - 切换到上一个标签</li><li><strong>#gt</strong> - 切换到第 <kbd>#</kbd> 个标签</li><li><strong>:tabm[ove] #</strong> - 移动标签到第 <kbd>#</kbd> 位(下标从 0 开始)</li><li><strong>:tabc[lose]</strong> - 关闭当前标签</li><li><strong>:tabo[nly]</strong> - 关闭其他标签</li><li><strong>:tabdo</strong> command - 在所有标签中执行命令 (例如 <strong>:tabdo q</strong> 关闭所有标签)</li></ul><h2 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h2><ul><li><strong>:e[dit]</strong> <strong>文件名</strong> - 新建缓冲区打开 filename</li><li><strong>:bn[ext]</strong> - 切换到下个缓冲区</li><li><strong>:bp[revious]</strong> - 切换到上个缓冲区</li><li><strong>:bd[elete]</strong> - 关闭缓冲区</li><li><strong>:b[uffer]#</strong> -通过＃进入缓冲区</li><li><strong>:b[uffer] file</strong> -按文件转到缓冲区</li><li><strong>:ls</strong> or <strong>:buffers</strong> - 列出所有打开的缓冲区</li><li><strong>:sp[lit]</strong> <strong>文件名</strong> - 新建缓冲区打开 filename 并水平分割窗口</li><li><strong>:vs[plit]</strong> <strong>文件名</strong> - 新缓冲区打开 filename 并垂直分割窗口</li><li><strong>:vert[ical] ba[ll]</strong> -将所有缓冲区编辑为垂直窗口</li><li><strong>:tab ba[ll]</strong> -将所有缓冲区编辑为选项卡</li><li><strong>Ctrl</strong> + <strong>ws</strong> - 水平分割窗口</li><li><strong>Ctrl</strong> + <strong>wv</strong> - 垂直分割窗口</li><li><strong>Ctrl</strong> + <strong>ww</strong> - 在窗口间切换</li><li><strong>Ctrl</strong> + <strong>wq</strong> - 关闭窗口</li><li><strong>Ctrl</strong>+ <strong>wx</strong>-与下一个交换当前窗口</li><li><strong>Ctrl</strong>+ <strong>w=</strong>-使所有窗口的高度和宽度相等</li><li><strong>Ctrl</strong> + <strong>wh</strong> - 切换到左侧窗口</li><li><strong>Ctrl</strong> + <strong>wl</strong> - 切换到右侧窗口</li><li><strong>Ctrl</strong> + <strong>wj</strong> - 切换到下侧窗口</li><li><strong>Ctrl</strong> + <strong>wk</strong> - 切换到上侧窗口</li></ul><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><ul><li><strong>zf</strong> -手动定义向上折叠</li><li><strong>zd</strong> -删除光标下方的折叠</li><li><strong>za</strong> -在光标下方切换折叠</li><li><strong>zo</strong> -在光标下方打开折叠</li><li><strong>zc</strong> -光标下方折叠</li><li><strong>zr</strong> -将所有折叠减少（打开）一级</li><li><strong>zm</strong> -折叠更多（关闭）所有折叠一级</li><li><strong>zi</strong> -切换折叠功能</li><li><strong>]c</strong> -跳转到下一个更改的开始</li><li><strong>[c</strong> -跳至上一个更改的开始</li><li><strong>do</strong>或<strong>:diffg[et]</strong>-从其他缓冲区获取（获取）差异</li><li><strong>dp</strong>或<strong>:diffpu[t]</strong>-存入差额（至其他缓冲区）</li><li><strong>:diffthis</strong> -使当前窗口成为差异的一部分</li><li><strong>:dif[fupdate]</strong> -更新差异</li><li><strong>:diffo[ff]</strong> -关闭当前窗口的差异模式</li></ul><p><strong>提示</strong>折叠命令（例如<strong>za</strong>）在一级上操作。要在所有级别上操作，请使用大写字母（例如<strong>zA</strong>）。</p><p><strong>提示</strong>要查看文件的差异，可以通过<strong>vimdiff</strong>在终端上运行来直接在diff模式下启动Vim 。甚至可以将其设置为<strong>git difftool</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vim备忘单&quot;&gt;&lt;a href=&quot;#Vim备忘单&quot; class=&quot;headerlink&quot; title=&quot;Vim备忘单&quot;&gt;&lt;/a&gt;Vim备忘单&lt;/h1&gt;&lt;h2 id=&quot;全局&quot;&gt;&lt;a href=&quot;#全局&quot; class=&quot;headerlink&quot; title=&quot;全局&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Vim" scheme="http://blog.isk.ink/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>我的2020年度总结</title>
    <link href="http://blog.isk.ink/2021/01/04/%E6%88%91%E7%9A%842020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.isk.ink/2021/01/04/%E6%88%91%E7%9A%842020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-04T14:51:04.000Z</published>
    <updated>2021-02-04T03:12:53.186Z</updated>
    
    <content type="html"><![CDATA[<p>  光阴荏苒，日月如梭,一晃匆匆又是一年.</p><p>2020是我人生重要的转折点.我呆在里整整半年.也在暑假体验了真正的人情世故.学到了许多东西,也认识了更广阔的世界.</p><h2 id="春季"><a href="#春季" class="headerlink" title="春季"></a>春季</h2><p>2020的春节可以说是一切的开始,从学校听到肺炎的开始,我并没有重视这个东西,以为就几个人,很容易控制,可是它却出乎所有人的预料.从学校回到家里,一切的一切都是那么普通,见了几个从小认识的朋友,都没有什么变化.</p><p>现在看来当时我所做的最正确的决定就是,在快递彻底停运前买了两张无限流量卡,这个卡成了我半年内所有的流量来源(我家并没有WIFI,因为我不在家就没办),40块一个月,每天都是手机给笔记本电脑开热点.当时买了两张,另一张给了我一个朋友.每天看直播,看视频,玩游戏,学编程的所有网络来源都来源于这一张小小的流量卡.真不敢想想如果我当时没有买这张卡,等春节快递停运,可能我的网课,和我上半年所有的娱乐都过的小心翼翼,而快递业务直到5月份才恢复.</p><p>因为这时学校也觉得疫情很快就会过去,所以当时还没有全面上网课,只是把一些水课上一上,这也给了我们许多时间去做一些自己的爱好.</p><p>从这时起,我决定这个学校教的东西并不是我想要的那种效果,学了一年软件工程,结果写不出任何东西,基本磨灭了我对计算机的热爱,我以前大概是小学的时候,特别喜欢数学 ,大概是初一的时候,遇到一个老师,教的特别敷衍,根本感受不到任何意义,慢慢的,就失去了对这个学科的热爱,到初二也就成绩平平,我认为也有我的原因,在大学也是这种感觉,我不想再重复这个磨灭热爱的过程,所以我在那段时间开始深入了解IT行业,我以前在高中时,认为已经足够了解了,才选择这个专业,现在发现当时好像什么都不懂,还好没有选错道路.在这个春天,看了许多大佬的视频,都是关于这个行业的发展,包括用什么编程语言能干什么事 ,学习路线,当时看了B站程序羊(CodeSheep)的视频,决定先弄个博客,毕竟前端好入门.</p><p>自己从零开始学习各种东西,首先学会的 就是翻墙,即学会用谷歌,因为国家禁止,所以平时只在手机上去谷歌,推特看看,我在Youtube上找到了别人的翻墙教程,学着在windows电脑上安装使用,感谢那些人一步一步的操作,让我了解了当时我认为很复杂的软件V2ray(现在玩的很溜),买了个速度快的节点,终于不再用老王VPN那个无聊的翻墙软件了.虽然那个开发者是个佛系的人,完全免费,但是就是不好用.我从那时开始上推特,认识了很多大佬,包括阿里P7等很多优秀的程序员,他们每天分享的东西也让我受益匪浅,认识了和我一样年纪的编程大佬,才知道有那么多优秀的同龄人.我也开始向他们学习.</p><p>我很喜欢一首禅诗.</p><p>沿着这样一条道路:</p><p>关注大师,</p><p>跟随大师,</p><p>与大师同行,</p><p>洞察大师,</p><p>成为大师. </p><p>继续说博客哈,当时我就看着CodeSheep的视频自己跟着做,遇到很多问题就在谷歌上查找,不得不说,谷歌真好用.在建博客的同时,遇到了很多朋友,像<code>邢家辉大佬</code>.简直是太他妈牛逼了,我要是女的,我差点就爱上他了.在搭建博客的过程中,也学会了独立解决问题的能力,当时,完全没有任何编程经历,C语言都算学到不好,建博客花了3天才算建好,后来又发现了许多好看的主题,加了一个群开始和一些志同道合的大佬一起聊天.</p><p>建起一个博客并没有花很多时间,在博客的完善中才是真要命,总是会出各种问题,很多都在邢家辉大佬的帮助下解决了,但是很多问题就只能自己去解决了,当时一个问题我可能要花两天时间去解决,因为没有任何经验,后来是真佩服当时的我,还记得那时好几次都想砸电脑,终于懂了,代码本地没问题是一码事,上传上去就看玄学了.</p><p>后来那个春天真的学了很多东西,除了狗娘养的数据结构没学明白,还有线性代数.开学考试没挂科真是谢天谢地了.</p><p>当时学了很多东西,看了半本C primer plus和半本大话数据结构,看了一些C++的视频,git的使用,和DOS命令,后来装了给虚拟机,在虚拟机里学习C语言,学了点Linux,最多的还是前端的处理流程,在慕课网上,学了C的一些东西.也把以前学过的JAVA捡起来一部分,高三毕业后因为兴趣学过一段时间JAVA,但是并不成体系,所以又学了一遍.</p><p>写了几篇博客,重点写了虚拟机的一些东西.</p><h2 id="夏季"><a href="#夏季" class="headerlink" title="夏季"></a>夏季</h2><p>我人生中干的最蠢的事就是在那个暑假去打工当保安.去深圳当了一个月保安,赚了三千多,但失去了更多.</p><p>前半个月上白班,在别人小区门口量体温,太无聊了,条件艰苦,沥青路面上一站站一天,测温枪除了早上能用基本其他任何时候都是43度爆表,量了个寂寞,但是更恶心的是还有人随机过来偷偷看你有没有好好工作,发现一次一天的工资就没了,一次扣一百.还容易得罪人,唯一学到了的东西就是,越是有钱的人(开宝马奥迪的),越容易心平气和的过来主动检查,越是没钱的,你拦他他还不停直接向我撞过来,大多是开一些比较次的车的,比如五菱宏光和摩托,电动车.有钱人的一些涵养确实不同,我一个小保安也得罪不起人,况且是在”异国他乡”,明白了一个道理,有钱人之所以有钱,是因为有高的涵养高的能力,并不会因为你是一个保安就不尊重你的工作,尊重他人,才会有好的人缘,有更多成功的机会.很多时候,大多是下午一点最热的时候,那时没什么人进出,大多是清洁工阿姨叔叔坐在我哪里和我聊天,我有一个遮阳棚,我那里的水是免费的,所以我会打给他们喝,大多他们都不愿意,他们带的也有水,和他们聊家常,也理解了很多人的不容易,我以为我那个保安已经够惨了,一个月3000多,完全不需要什么技术含量,清洁工还不如我,聊到他们的孩子,大多都在上学,叔叔阿姨大多都是来自贵州湖南这些地方,见识颇多.</p><p>实在是没得意义去干了半个月夜班,转到了高速公路路口,这他妈真是我噩梦的开始.我觉得白天很热转到晚上可能会好一点,日了狗了,高速路口,车非常多,一个小时等于我在小区门口一上午的工作量,而且是晚上,八点上班,第二天8点下班,不能睡觉,而且会有生命危险.站在一个地方不停重复一个动作,等他们开车窗,伸手,关车窗.晚上很困不能睡觉是真的难顶,我来后一个星期不到,我有个同事猝死了,40多岁,也是上夜班,不过我在高速路口他在另一个路口,具体是哪里就不清楚了.</p><p>那段时间很幸苦,白天我又不想睡觉,想去上网打游戏,深圳的网吧比我老家网费便宜太多了,配置还好,这能忍?所以基本白天就睡四个小时就去上网,晚上一直站着睡不着特难受,不过后来还好.</p><p>那段时间我特别飘,就没有我不敢拦的车,我管你什么宝马奔驰玛莎拉蒂,最飘的是我拦了不少警车,好家伙够我吹一年的,后来领导实在看不下去了,说让我别拦了,印象最深的是,我半夜拦的一辆奔驰,那个漂亮的女司机给了我一瓶红牛还是乐虎,忘记了,而且她副驾驶上的女儿特别好看(完了暴露我是lsp了),不过当时困得要死,也没怎么在意.</p><p>干了一个月,八月回到家,不想干了,回家继续开始我上半年的无聊生活,但是由于我去了深圳一个月,也把上半年学到东西忘记的差不多了,所以那段时间基本没学到什么东西,就是把博客整理了一下,水了几篇博文.</p><p>那个八月,也是我印象特别深刻的八月,我从来没有在一段时间,一个晚上,真正去做自己想做的事情,看一整晚的星星,天文学,也算我的一个爱好之一,我能清楚的记下来天空中的八十八个星座,而且能在天气好的情况下认出他们,我最喜欢的科学家之一南仁东,他有一首诗我特别喜欢,上高三时看到了南仁东传,从此特别喜欢这个科学家,他有一首诗,是赞美中国五百米口径设点望远镜(天眼fast)的,我现在还会背.</p><p><code>春雨催醒期待的嫩绿,夏露折射万物的欢歌,秋风编制七色锦缎,冬日里的生命乐章延续着它的优雅.大窝凼,大窝凼;时刻给我们惊喜,让我们惊奇.</code> </p><p><code>感官安宁,万籁无声,美丽的宇宙太空,以它的神秘和绚丽,召唤我们踏过平庸,进入到广袤的无垠.-----南仁东</code></p><h2 id="秋季"><a href="#秋季" class="headerlink" title="秋季"></a>秋季</h2><p>开学季,那时一个悲伤的九月,开学考试,还好没挂科.</p><p>开的全是无聊的课,JAVA也没学到什么,全是我自学的东西,web课学会了切图,难怪一些人把前端工程师叫做前端切图仔.</p><p>这段时间基本没弄过博客了,但是,自己又看了一边JAVA的视频,这次整理了笔记,和HTML+CSS的学习笔记.</p><h2 id="没写完-继续更新"><a href="#没写完-继续更新" class="headerlink" title="没写完,继续更新"></a>没写完,继续更新</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  光阴荏苒，日月如梭,一晃匆匆又是一年.&lt;/p&gt;
&lt;p&gt;2020是我人生重要的转折点.我呆在里整整半年.也在暑假体验了真正的人情世故.学到了许多东西,也认识了更广阔的世界.&lt;/p&gt;
&lt;h2 id=&quot;春季&quot;&gt;&lt;a href=&quot;#春季&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git配置SSH Key</title>
    <link href="http://blog.isk.ink/2020/12/14/Git%E9%85%8D%E7%BD%AESSH-Key/"/>
    <id>http://blog.isk.ink/2020/12/14/Git%E9%85%8D%E7%BD%AESSH-Key/</id>
    <published>2020-12-14T13:35:10.000Z</published>
    <updated>2020-12-14T14:01:25.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>设置git的user name和email</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Yaoguang161&quot;</span><br><span class="line">git config --global user.email &quot;yaoguang161@outlook.com&quot;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>生成ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yaoguang161@outlook.com&quot;&#x2F;&#x2F;这里填你设置的邮箱地址</span><br></pre></td></tr></table></figure><p>接着出现： Generating pulbic/private rsa key pair</p><p>​                    Enter file in which to save the key</p><p>然后一直回车</p><p>系统会在用户目录下生成ssh文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214427.png" alt="image-20201214214427300"></p></li><li><p>打开github，登录你的账户，进入设置</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214517.png" alt="image-20201214214517870"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214536.png" alt="image-20201214214536399"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214553.png" alt="image-20201214214553588"></p><ol start="5"><li><p>将id_rsa.pub用记事本打开，复制粘贴到ssh key里</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214820.png" alt="image-20201214214820879"></p></li><li><p>然后在git中输入命令：</p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p><p>然后蹦出一堆话</p><p>输入命令：yes</p><p>回车</p><p>然后就成功了</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置git的user name和email&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://blog.isk.ink/tags/git/"/>
    
  </entry>
  
</feed>
