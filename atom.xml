<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>昨日晴空</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.isk.ink/"/>
  <updated>2021-09-01T12:17:47.118Z</updated>
  <id>http://blog.isk.ink/</id>
  
  <author>
    <name>Asakiii</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JAVA学习笔记(三)</title>
    <link href="http://blog.isk.ink/2021/06/26/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/"/>
    <id>http://blog.isk.ink/2021/06/26/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89/</id>
    <published>2021-06-26T13:18:26.000Z</published>
    <updated>2021-09-01T12:17:47.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><ol><li><p>Java8中,可以为接口添加静态方法和默认方法</p><ul><li><p>静态方法: 使用 static 关键字修饰. 可以通过接口直接调用静态方法</p></li><li><p>默认方法: 使用default 关键字修饰. 可以通过实现类对象来调用</p></li></ul></li></ol><ol start="2"><li>知识点<ul><li>接口中定义的静态方法,只能通过接口来调用</li><li>通过实现类的对象,可以调用接口中的默认方法</li><li>如果实现类重写了接口中的默认方法,调用时,仍然调用的时重写以后的方法</li><li>如果子类继承的父类和实现的接口中声明了同名同参数的方法(类优先原则)  ,  那么子类在没有重写此方法的情况下,默认调用的是父类中的同名同参数的方法</li><li>如果实现类实现了多个接口,而这么多接口中定义了同名参数的默认方法,那么在实现类没有重写此方法的情况下,报错. (接口冲突),这就必须我们在实现类中重写此方法</li></ul></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">    method3(); <span class="comment">//调用的是自己定义的重写的方法</span></span><br><span class="line">    <span class="keyword">super</span>.method3();<span class="comment">//调用的是父类中声明的</span></span><br><span class="line">    <span class="comment">//调用接口中的默认方法</span></span><br><span class="line">    CompareA.<span class="keyword">super</span>.method3();</span><br><span class="line">    COmpareB.<span class="keyword">super</span>.method3();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//成员内部类</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">AA</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//代码块中内部类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BB</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//构造器中内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">CC</span></span>&#123;&#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2><ol><li><p>作为外部类的成员</p><ul><li>调用外部类的结构</li></ul></li><li><p>另一方面 ,作为一个类</p><ul><li>类内可以定义属性 , 方法 , 构造器</li><li>可以被 <code>final</code> 修饰, 表示此类不能被继承. </li><li>可以被 <code>abstract</code> 修饰</li></ul></li><li><p>如何实例化成员内部类的对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建Dog实例(静态成员内部类)</span></span><br><span class="line"> Person.Dog dog = <span class="keyword">new</span> Person();</span><br><span class="line">dog.show();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Bird实例(非静态的成员内部类)</span></span><br><span class="line">Person p = <span class="keyword">new</span> Person();</span><br><span class="line">Person.Bird bird = p.<span class="function">new <span class="title">Bird</span><span class="params">()</span></span>;</span><br><span class="line">bird.sing();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><ol start="4"><li>如何在成员内部类中区分调用外部类的结构</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//方法的形参</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//内部类的属性</span></span><br><span class="line">        System.out.println(Person.<span class="keyword">this</span>.name);<span class="comment">//外部类的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="5"><li>开发中局部内部类的使用</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//返回一个实现了Comparable 接口的类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//方式一</span></span><br><span class="line">      <span class="comment">//创建一个实现了Comparable 接口的类: 局部内部类</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">MyComparable</span> <span class="keyword">implements</span> <span class="title">Comparable</span>()</span>&#123;</span><br><span class="line"></span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareT</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> MyComparable();</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回一个实现了Comparable 接口的类的对象</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Comparable <span class="title">getComparable</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//方式二:</span></span><br><span class="line">      <span class="keyword">return</span>  <span class="keyword">new</span> Comparable() &#123;</span><br><span class="line">          <span class="meta">@Override</span></span><br><span class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">              <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><ol><li>栈溢出  <code>java.lang.StackOverflowError</code></li><li>堆溢出  <code>java.lang.OutfMeoryError</code></li></ol><h2 id="java-lang-Throwable"><a href="#java-lang-Throwable" class="headerlink" title="java.lang.Throwable"></a>java.lang.Throwable</h2><ol><li><code>java.lang.Error:</code> 一般部编写针对性的代码进行处理</li><li><code>java.lang.Exception</code>: 可以进行异常的处理<ol><li>编译时异常(checked)<ul><li><code>FileNotFoundException</code></li><li><code>ClassNotFoundException</code></li></ul></li><li>运行时异常(unchecked)<ul><li><code>NullPointerException</code></li><li><code>ArrayIndexOutOfBoundsExcetption</code></li><li><code>ClassCastException</code></li><li><code>NumberForMatException</code></li><li><code>InputMismatchException</code></li><li><code>ArithmeticException</code></li></ul></li></ol></li></ol><h2 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NullPointerException</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="comment">//1.</span></span><br><span class="line">       <span class="keyword">int</span> [] arr = <span class="keyword">null</span>;</span><br><span class="line">       System.out.println(arr[<span class="number">3</span>]);</span><br><span class="line">       <span class="comment">//2.</span></span><br><span class="line">       String str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">       str = <span class="keyword">null</span>;</span><br><span class="line">       System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="数组越界"><a href="#数组越界" class="headerlink" title="数组越界"></a>数组越界</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArrayIndexOutOfBoundsException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    System.out.println(arr[<span class="number">10</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="类转换异常"><a href="#类转换异常" class="headerlink" title="类转换异常"></a>类转换异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ClassCastException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Object obj  = <span class="keyword">new</span> Date();</span><br><span class="line">    String str = (String) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数字格式异常"><a href="#数字格式异常" class="headerlink" title="数字格式异常"></a>数字格式异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NumberFormatException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test4</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">int</span> num = Interger.parseInt(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="输入不匹配"><a href="#输入不匹配" class="headerlink" title="输入不匹配"></a>输入不匹配</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//InputmismatchException</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test5</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">int</span> score = scanner.nextInt();</span><br><span class="line">        System.out.println(score);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入数字一切正常</span></span><br><span class="line"><span class="comment">//输入字母则抛出输入不匹配</span></span><br></pre></td></tr></table></figure><h2 id="算数异常"><a href="#算数异常" class="headerlink" title="算数异常"></a>算数异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ArithmeticException</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test6</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    System.out.println(a / b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="异常处理的方式"><a href="#异常处理的方式" class="headerlink" title="异常处理的方式"></a>异常处理的方式</h1><ul><li><p>异常的处理: 抓抛模型</p><ol><li><p>过程一: “抛” : 程序正常执行的过程中,一旦出现异常,就会在异常代码处生成一个对应异常类的对象,并将此对象抛出</p><p>一旦对象抛出以后,其后的代码就不再执行</p></li><li><p>过程二: “抓”: 可以理解为异常处理的方式: 1. <code>try-catch-finally</code> 2. <code>throws</code></p></li></ol></li></ul><h2 id="try-catch-finally"><a href="#try-catch-finally" class="headerlink" title="try-catch-finally"></a>try-catch-finally</h2><p>结构</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//可能出现异常的代码</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型一 变量名<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式一</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型二 变量名<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式二</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型三 变量名<span class="number">3</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式三</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(异常类型四 变量名<span class="number">4</span>)&#123;</span><br><span class="line">    <span class="comment">//处理异常的方式四</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">    <span class="comment">//一定会执行的代码放在这里</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String str = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">    str = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num  = Integer.parseInt(str);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (NumberFormatException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;出现数值转换异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p><code>finally</code>是一个可选的,不一定非要写</p></li><li><p>使用<code>try</code>将可能出现的异常代码包装起来,在执行过程中,一旦出现异常,机会生成一个对象异常的类型,去<code>catch</code>中进行匹配.</p></li><li><p>一旦try中的异常对象匹配道某一个<code>catch</code>时,就进入<code>catch</code>中进行异常处理.一旦处理完成,就跳出<code>try-catch</code>结构(在没有写<code>finally</code>的情况下),继续执行其后的代码</p></li><li><p><code>catch</code>中的异常类型如果没有子父类关系,则谁声明在上,谁声明在下,无所谓.<code>catch</code>中的异常类型如果没有满足子父类关系,则要求子类一定声明在父类的上面.否则,报错.</p></li><li><p>常用的异常对象处理的方式: 1. <code>String getMessage()</code> 2. <code>printStackTrace()</code></p></li><li><p>在try结构中声明的变量,再出了try结构后,就不能再被调用</p></li><li><p><code>try-catch-finally</code>可以相互嵌套</p></li></ol><h3 id="finally的使用"><a href="#finally的使用" class="headerlink" title="finally的使用"></a>finally的使用</h3><ol><li><code>finally</code>是可选的</li><li><code>finally</code>中声明的是一定会被执行的代码.即使<code>catch</code>中又出现异常了,<code>try</code>中有<code>return</code>语句,<code>catch</code>中有<code>return</code>语句等情况.</li><li>像数据库连接,输入输出流,网络编程 <code>Socket</code> 等资源.<code>JVM</code>是不能自动回收的,我们需要手动的进行资源的释放,就需要声明在<code>finally</code>中.</li></ol><p>小结:  </p><ul><li>使用 <code>try-catch-finally</code> 处理编译时异常,使得程序再编译时就不再报错,但是运行时仍可能报错.相当于我们使用 <code>try-catch-finally</code> 将一个编译时可能出现的异常,延迟到运行时出现.</li><li>开发中,由于运行时异常比较常见,所以我们通常就不针对运行时异常编写 <code>try-catch-finally</code> 了针对编译时异常,我们说一定要考虑异常的处理.</li></ul><h2 id="throws-异常类型"><a href="#throws-异常类型" class="headerlink" title="throws + 异常类型"></a>throws + 异常类型</h2><ol><li><p>“throws + 异常处理” 写在方法的声明处.  指明此方法执行时,可能会抛出的异常类型,一旦当方法执行时,出现异常,仍会再异常代码处生成一个异常类的对象,此对象满足 <code>throw</code> 后异常类型时,就会被抛出. 异常代码后边的代码就不再执行了.</p></li><li><p><code>try-catch-finally</code> :真正的将异常处理掉了.<code>throws</code> 的方法只是将异常抛给了方法的调用者,并没有真正的将异常处理掉.</p></li><li><p>开发中如何去选择使用 <code>try-catch-finally</code> 还是使用 <code>throws</code></p><ol><li>如果父类中被重写的方法没有 <code>throws</code> 方法处理异常,则子类重写的方法也不能使用 <code>throws</code>,意味着如果子类重写的方法中有异常, 必须使用 <code>try-catch-finally</code> 方式处理.</li><li>执行的方法 a 中,先后又调用了另外的几个方法,这几个是递进关系执行的.我们建议这几个方法使用 <code>throws</code> 的方法进行处理. 而执行的方法 a 可以考虑使用  <code>try -catch - finlly</code> 方式进行处理</li></ol></li></ol> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OverrideTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OverrideTest test = <span class="keyword">new</span> OverrideTest();</span><br><span class="line">        test.display(<span class="keyword">new</span> SubClass());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(SuperClass s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            s.method();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 父类没有抛异常子类绝对不能抛异常</span></span><br><span class="line"><span class="comment">//子类抛的异常不能超过父类的异常</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass</span> <span class="keyword">extends</span>  <span class="title">SuperClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span><span class="keyword">throws</span> FileNotFoundException</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="手动抛出异常"><a href="#手动抛出异常" class="headerlink" title="手动抛出异常"></a>手动抛出异常</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Student s =<span class="keyword">new</span> Student();</span><br><span class="line">            s.regist(-<span class="number">1000</span>);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">regist</span><span class="params">(<span class="keyword">int</span> id)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(id &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">this</span>.id = id;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;您输入的数据有误! &quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常处理的练习"><a href="#异常处理的练习" class="headerlink" title="异常处理的练习"></a>异常处理的练习</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReturnExceptionDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">methodA</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;进入方法A&quot;</span>);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;制造异常&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;用A方法的finally&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            methodA();</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">进入方法A</span></span><br><span class="line"><span class="comment">用A方法的finally</span></span><br><span class="line"><span class="comment">制造异常</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="异常处理的综合练习"><a href="#异常处理的综合练习" class="headerlink" title="异常处理的综合练习"></a>异常处理的综合练习</h2><p> 编写应用程序EcmDef.java, 接收命令行的两个参数,要求不过输入负数,计算两数相除.</p><p>对数据类型不一致 <code>NumberFOrmatException</code> ,缺少命令行参数 <code>ArryIndexOutOfBoundsException</code>, 除零 <code>ArithmeticException</code>, 输入负数(EcDef 自定义的异常) 进行处理.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcmDef</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i = Integer.parseInt(args[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">int</span> j = Integer.parseInt(args[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">int</span> result = ecm(i,j);</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;数据类型不一致&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArrayIndexOutOfBoundsException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;缺少命令行参数&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (ArithmeticException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;除零&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (EcDef e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">ecm</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> <span class="keyword">throws</span> EcDef</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; <span class="number">0</span> || j &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">throw</span>  <span class="keyword">new</span> EcDef(<span class="string">&quot;分子或分母为负数!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  i / j;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EcDef</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">338751699314229948L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EcDef</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h1><h2 id="测试-Thread-中的常用方法"><a href="#测试-Thread-中的常用方法" class="headerlink" title="测试 Thread 中的常用方法"></a>测试 Thread 中的常用方法</h2><ol><li><code>start()</code>: 启动当前线程; 调用当前线程的<code>run()</code></li><li><code>run()</code>: 通常需要重写Thread类中的此方法,将创建的线程要执行的操作声明在此方法中</li><li><code>currentThread()</code>: 静态方法,返回执行房前代码的线程</li><li><code>getName()</code>: 获取当前线程的名字</li><li><code>setName()</code>:设置当前线程的名字</li><li><code>yield()</code>: 释放当前<code>cpu</code>的执行权</li><li><code>join()</code>: 在线程 <code>a</code> 中调用线程 <code>b</code>的 <code>join()</code>,此时线程 <code>a</code>就完全进入阻塞,直到线程 <code>b</code>完全执行完以后线程 <code>a</code>才完全结束阻塞状态.</li><li><code>sleep(long millitime)</code>: 让当前线程 “睡眠” 指定的<code>millitime</code> 毫秒,在指定的<code>millitime</code>毫秒时间内,当前线程是阻塞状态.</li><li><code>isAlive()</code>: 判断当前线程是否存活</li></ol><h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><ol><li><code>MAX_PRIORITY</code>: 10</li></ol><p>​      <code>MIN_ PRIORITY</code>: 1</p><p>​      <code>NORM_PRIORITY</code>:5  -&gt; 默认优先级</p><ol start="2"><li><p>如何获取和设置当前线程的优先级?</p><p><code>getPriority()</code>: 获取当前线程的优先级</p><p><code>setPriority(int p)</code> :设置线程的优先级</p></li></ol><p>​        说明: 高优先级的线程要抢占低优先级线程的<code>CPU</code>的执行权.但是只是从概率上讲,高优先级的线程高概率的情况下被执行,并不意味着高优先级的线程执行完以后,低优先级的线程才执行.</p><h2 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h2><ol><li><p>同步代码块          </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(同步监视器)&#123;</span><br><span class="line">    <span class="comment">//需要被同步的代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol><li><p>说明: 操作共享数据的代码,即为需要被同步的代码</p></li><li><p>共享数据: 多个线程共同操作的变量.比如 : ticket就是共享数据.</p></li><li><p>同步监视器: 俗称: 锁.  任何一个类的对象,都可以充当锁.</p><ul><li>要求:  多个现场必须要共用同一把锁.</li></ul></li></ol></li></ol><ol start="2"><li><p>同步方法</p><p>同步的方式,解决了线程的安全问题. –好处</p><p>操作代码同步代码时,只能有一个线程参与,其他线程等待.相当于一个单线程的过程.效率低. –坏处</p></li></ol><p>在Runnable接口创建多线程的的方式中,我们可以考虑使用this充当同步监视器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 使用同步方法解决实现Runnable接口的线程安全问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Windows3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            show();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;  <span class="comment">//: 同步监视器 默认: this</span></span><br><span class="line">            <span class="keyword">if</span> (ticket &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">&quot;:卖票,票号为:&quot;</span> + ticket);</span><br><span class="line">                ticket--;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WindowTest3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Windows1 w = <span class="keyword">new</span> Windows1();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口1&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口2&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口3&quot;</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>解决线程安全问题的方式三： lock锁， – JDK5。0新增</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 解决线程安全问题的方式三： lock锁， -- JDK5。0新增</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Window</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticket = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">//实例化 ReentrantLock</span></span><br><span class="line">    <span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);  <span class="comment">//fair 公平</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//2.调用lock();</span></span><br><span class="line">                lock.lock();</span><br><span class="line">                <span class="keyword">if</span>(ticket &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">&quot;: 售票，票号为 &quot;</span> + ticket );</span><br><span class="line">                    ticket --;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="comment">//3.调用解锁方法： unlock();</span></span><br><span class="line">                    lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span>  </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Window w = <span class="keyword">new</span> Window();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(w);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(w);</span><br><span class="line"></span><br><span class="line">        t1.setName(<span class="string">&quot;窗口一&quot;</span>);</span><br><span class="line">        t2.setName(<span class="string">&quot;窗口二&quot;</span>);</span><br><span class="line">        t3.setName(<span class="string">&quot;窗口三&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t3.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="线程安全的单例模式之懒汉式"><a href="#线程安全的单例模式之懒汉式" class="headerlink" title="线程安全的单例模式之懒汉式"></a>线程安全的单例模式之懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123; <span class="comment">//此时已经线程安全，Bank是锁</span></span><br><span class="line"><span class="comment">//        if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//            instance = new Bank();</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//         方式一： 效率稍差</span></span><br><span class="line"><span class="comment">//        synchronized(Bank.class)&#123;</span></span><br><span class="line"><span class="comment">//            if(instance == null)&#123;</span></span><br><span class="line"><span class="comment">//                instance = new Bank();</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//        方式二： 效率更高</span></span><br><span class="line">          <span class="keyword">if</span>(instance ==<span class="keyword">null</span>)&#123;</span><br><span class="line">              <span class="keyword">synchronized</span>(Bank.class)&#123;</span><br><span class="line">                  <span class="keyword">if</span>(instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                      instance = <span class="keyword">new</span> Bank();</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><p>定义： 不同的线程分别占用对方需要的同步资源不放弃，都在等对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>出现死锁后，不会出现异常，不好形成提示，只是所有的线程都处阻塞状态，无法继续</p><p>解决方法： </p><ul><li>专门的算法，原则</li><li>尽量减少同步资源的定义，</li><li>尽量避免嵌套同步</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;接口&quot;&gt;&lt;a href=&quot;#接口&quot; class=&quot;headerlink&quot; title=&quot;接口&quot;&gt;&lt;/a&gt;接口&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Java8中,可以为接口添加静态方法和默认方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;静态方法: 使用 static 关键字修饰
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="http://blog.isk.ink/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>JAVA学习笔记(二)</title>
    <link href="http://blog.isk.ink/2021/06/19/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://blog.isk.ink/2021/06/19/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2021-06-19T09:22:13.000Z</published>
    <updated>2021-06-26T01:24:24.903Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Object类及其内部方法"><a href="#Object类及其内部方法" class="headerlink" title="Object类及其内部方法"></a>Object类及其内部方法</h1><ol><li><p>java.lang.Object类的说明:</p><ul><li><p>Object类是所有java类的根父类</p></li><li><p>如果在类的声明中未使用 extends 关键字指明其父类, 则默认父类为  java.lang.Object  类</p></li><li><p>Object类中的功能(属性 , 方法) 就具有通用性.              属性 : 无</p><p>方法 :  equals()  /           toString()/getClass()/hashCode()/clone() /finalize() / wait()   , notify()  , notifyAll()</p></li><li><p>Object类声明类一个车空的构造器</p></li></ul></li><li><p>equals方法()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">        String name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(obj == <span class="keyword">this</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> User)&#123;</span><br><span class="line">                User u = (User) obj;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.age == u.age</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>toString()方法:</p><ul><li><p>当我们输出一个对象的引用时,实际上就是调用当前对象的toString()</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test3</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String s = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">    System.out.println(s);</span><br><span class="line">    System.out.println(s.toString());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果一样</span></span><br></pre></td></tr></table></figure></li><li><p>Object类中toString()的定义</p></li><li><p>public String to String()的定义:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="keyword">return</span> getClass().getName() + <span class="string">&quot;@&quot;</span> + Integer.toHexString(hashCode());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>像String , Date , File . 包装类等都重写了 Object 类中的 toString() 方法使得像在调用对象的 toString() 时 , 返回 “实体内容” 信息</p></li><li><p>自定义类也可以重写 toString() 方法, 当调用此方法时, 放回对象的实体内容</p></li></ul></li></ol><h1 id="static关键字的使用"><a href="#static关键字的使用" class="headerlink" title="static关键字的使用"></a>static关键字的使用</h1><ol><li><p>static : 静态的</p></li><li><p>static可以用来修饰: 属性, 方法 , 代码块 , 内部类</p></li><li><p>使用 static 修饰属性: 静态变量</p><ol><li><p>属性:  按是否使用了 static 修饰,又分为: 静态属性 和 非静态属性</p><p>​    实例属性:  我们创建了类的多个对象, 我们每个对象都独立的拥有一套类中的非 静态属性. 当修改其中一个非静态属性时,不会导致其他对象中同样的属性值的修改.</p><p>​    静态变量:  我们创建了类的多个对象,多个对象共享一个静态变量.当通过某一个对象修改静态变量,其他对象调用此静态变量时,是修改过的.</p></li><li><p>static 修饰属性的其他说明:</p></li></ol><ul><li><p>静态变量随着类的加载而加载.可以通过 “类.静态变量” 的方式进行调用</p></li><li><p>静态变量的加载要早于对象的创建.</p></li><li><p>由于类只会加载一次,则静态变量在内存中也只会存在一份: 存在方法的静态域中.</p></li><li><table><thead><tr><th></th><th>静态变量</th><th>实例变量</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li></ul></li></ol><h1 id="static-静态方法"><a href="#static-静态方法" class="headerlink" title="static 静态方法"></a>static 静态方法</h1><ol><li><p>使用 static 修饰方法,静态方法</p><ul><li><p>随着类的加载而加载,可以通过 “类.静态方法” 的方式进行调用</p></li><li><table><thead><tr><th></th><th>静态方法</th><th>非静态方法</th></tr></thead><tbody><tr><td>类</td><td>yes</td><td>no</td></tr><tr><td>对象</td><td>yes</td><td>yes</td></tr></tbody></table></li></ul></li></ol><ul><li><p>静态方法中, 只能调用静态的方法或属性</p></li><li><p>非静态方法中,既可以调用静态的又可以调用非静态的</p></li></ul><ol start="2"><li>static 注意点:<ol><li>在静态方法内,不能使用 this 关键字, super关键字</li><li>关于静态属性和静态方法的使用, 从生命周期的角度去理解</li></ol></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Chinese c1 = <span class="keyword">new</span> Chinese();</span><br><span class="line">        </span><br><span class="line">        c1.eat();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//静态方法直接通过类名调用</span></span><br><span class="line">        Chinese.show();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不能使用类去调用非静态方法</span></span><br><span class="line">        <span class="comment">//例如 Chinese.eat();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chinese</span></span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">static</span> String nation;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;中国人吃中餐&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是一个中国人&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>开发中 , 如何确定一个属性是否要声明为 static 的 ?</p><ul><li>属性是可以被多个对象所共享的,不会随着对象的不同而不同</li><li>类中的常量也通常声明为 static</li></ul></li><li><p>开发中,如何确定一个方法是否要声明为 static 的?</p><ul><li><p>操作静态属性的方法,通常也是静态 static 的.</p></li><li><p>工具类中的方法,习惯上声明为static 的, 比如 Math , Arrays , Collections</p></li></ul></li></ol><h1 id="static-案例-设计模式"><a href="#static-案例-设计模式" class="headerlink" title="static 案例 _设计模式"></a>static 案例 _设计模式</h1><h2 id="单例设计模式-饿汉式"><a href="#单例设计模式-饿汉式" class="headerlink" title="单例设计模式_饿汉式"></a>单例设计模式_饿汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//饿汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Bank bank1 = Bank.getInstance();</span><br><span class="line">        Bank bank2 = Bank.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bank</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Bank</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.内部创建类的对象</span></span><br><span class="line">    <span class="comment">//4.要求此对象也必须声明为静态的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Bank instance =  <span class="keyword">new</span> Bank();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供公共的静态的静态方法.返回类的对象/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bank <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例设计模式-懒汉式"><a href="#单例设计模式-懒汉式" class="headerlink" title="单例设计模式_懒汉式"></a>单例设计模式_懒汉式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//懒汉式</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Order order1 = Order.getInstance();</span><br><span class="line">        Order order2 = Order.getInstance();</span><br><span class="line">        System.out.println(order1 == order2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Order</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.私有化类的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Order</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.声明当前类对象,没有初始化</span></span><br><span class="line">    <span class="comment">//4.此对象也必须声明为static</span></span><br><span class="line">    <span class="comment">//区分饿汉式和懒汉式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Order instance = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.声明public, static 的返回当前对象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Order <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Order(); <span class="comment">//每次调用都会创建对象,有问题</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th>饿汉式</th><th>好处:饿汉式是线程安全的</th><th align="center">坏处:加载对象时间过长</th></tr></thead><tbody><tr><td>懒汉式</td><td>好处:延迟对象的创建.</td><td align="center">坏处:线程不安全</td></tr></tbody></table><h1 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h1><ol><li><p>代码块的作用: 用来初始化类,对象</p></li><li><p>代码块如果有修饰的话,只能使用static</p></li><li><p>分类: 静态代码块 和 非静态代码块</p></li><li><p>静态代码块</p><ul><li><p>内部可以用输出语句</p></li><li><p>随着类的加载而加载,而且只执行一次</p></li><li><p>初始化类的信息</p></li></ul></li></ol><ol start="5"><li><p>非静态代码块</p><ul><li><p>内部可以有输出语句</p></li><li><p>随着对象的创建而执行</p></li><li><p>每创建一个对象就执行一次非静态代码块</p></li><li><p>作用:  可以在创建对象时,对对象的属性进行初始化</p></li></ul></li></ol><p>属性可以赋值的位置:</p><ul><li>默认初始化</li><li>显示初始化</li><li>构造器中初始化</li><li>有了对象以后,可以通过”对象.属性” 或 “对象.方法” 进行赋值</li><li>在代码块中赋值</li></ul><h1 id="final关键值"><a href="#final关键值" class="headerlink" title="final关键值"></a>final关键值</h1><ol><li><p>fina 可以用来修饰的结构: 类 , 方法 , 变量</p></li><li><p>final 用来修饰一个类,不能有子类 , 不能被继承了,比如: String 类 ,System类, StringBuffer 类</p></li><li><p>final 用来修饰方法: 表明此方法不能被重写</p></li><li><p>final 用来修饰变量,此时的” 变量” 就称为是一个常量</p><ol><li>final用来修饰属性, 可以考虑的位置有:  显示初始化, 代码块中初始化, 构造器中初始化.</li><li>final 修饰局部变量:  表明此形参是一个常量. 当我们调用此方法时, 给形参赋一个实参. 一旦赋值以后,就只能在方法体内,使用此形参,但不能进行重新赋值.</li></ol></li><li><p>static final 用来修饰属性: 全局常量</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Something</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">addOne</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ++x;   <span class="comment">//此方法不能通过</span></span><br><span class="line">        <span class="comment">//return x + 1; 却可以</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h1><ol><li><p>static 修饰的属性,相较于实例变量,有哪些特别之处?</p><ul><li>随着类的加载而加载; </li><li>早于对象的创建 , 只要权限允许,可以通过”对象.static 属性” 的方式进行调用; </li><li>存在于方法区的静态域</li></ul></li><li><p>类的属性赋值的位置有那些? 先后顺序如何?</p><ol><li>默认初始化</li><li>显式初始化 , 代码块中初始化</li><li>构造器中初始化</li><li>通过 “对象.属性” 或  “对象.方法” 的方式赋值</li></ol></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Object类及其内部方法&quot;&gt;&lt;a href=&quot;#Object类及其内部方法&quot; class=&quot;headerlink&quot; title=&quot;Object类及其内部方法&quot;&gt;&lt;/a&gt;Object类及其内部方法&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;java.lang.Object类
      
    
    </summary>
    
    
    
      <category term="JAVA" scheme="http://blog.isk.ink/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>浅谈C++封装</title>
    <link href="http://blog.isk.ink/2021/05/30/%E6%B5%85%E8%B0%88C-%E5%B0%81%E8%A3%85/"/>
    <id>http://blog.isk.ink/2021/05/30/%E6%B5%85%E8%B0%88C-%E5%B0%81%E8%A3%85/</id>
    <published>2021-05-29T17:25:25.000Z</published>
    <updated>2021-06-19T03:34:58.829Z</updated>
    
    <content type="html"><![CDATA[<h3 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;</span><br><span class="line">        age = _age</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> getAge()&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> name;</span><br><span class="line">    <span class="keyword">int</span> age ;</span><br><span class="line">    ....</span><br><span class="line">   </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">可变化为:  <span class="comment">//增加了判断的机会</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(_age &gt; <span class="number">0</span> &amp;&amp; _age &lt; <span class="number">100</span>)&#123;</span><br><span class="line">        age = _age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        ......</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>只拥有被读取的轮子的方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWheelCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_iWheelCount;</span><br><span class="line">    &#125;</span><br><span class="line">privateL</span><br><span class="line">    <span class="keyword">int</span> m_iWheelCount;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只被读取,不被设置</span></span><br><span class="line"><span class="comment">//只读属性</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="数据的封装"><a href="#数据的封装" class="headerlink" title="数据的封装"></a>数据的封装</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Asaki on 2021/5/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">        m_strName = _name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>&#123;</span><br><span class="line">        m_strGender  = _gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strGender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_iScore;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">initScore</span><span class="params">()</span></span>&#123;</span><br><span class="line">        m_iScore = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">study</span><span class="params">(<span class="keyword">int</span> _score)</span></span>&#123;</span><br><span class="line">        m_iScore += _score;     <span class="comment">//m_iScore = m_iScore + _score;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="built_in">string</span> m_strGender;</span><br><span class="line">    <span class="keyword">int</span> m_iScore;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu;</span><br><span class="line">    stu.initScore();  <span class="comment">//必须要加初始值</span></span><br><span class="line">    stu.setName(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">    stu.setGender(<span class="string">&quot;女&quot;</span>);</span><br><span class="line">    stu.study(<span class="number">5</span>);</span><br><span class="line">    stu.study(<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; stu.getName() &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt; stu.getGender() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; stu.getScore() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>定义一个 Student 类，包含名字一个数据成员，使用 get 和 set  函数封装名字这个数据成员。在 main 函数中通过 new 实例化对象，并打印其相关函数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 定义类：Student</span></span><br><span class="line"><span class="comment">  * 数据成员：m_strName</span></span><br><span class="line"><span class="comment">  * 数据成员的封装函数：setName()、getName()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 定义数据成员封装函数setName()</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span>  <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>&#123;</span><br><span class="line">         m_strName = _name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 定义数据成员封装函数getName()</span></span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> m_strName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">//定义Student类私有数据成员m_strName</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 使用new关键字，实例化对象</span></span><br><span class="line">Student *str = <span class="keyword">new</span> Student();</span><br><span class="line">    <span class="comment">// 设置对象的数据成员</span></span><br><span class="line">str-&gt;setName(<span class="string">&quot;练习&quot;</span>);</span><br><span class="line">    <span class="comment">// 使用cout打印对象str的数据成员</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; str-&gt;getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="comment">// 将对象str的内存释放，并将其置空</span></span><br><span class="line"><span class="keyword">delete</span> str;</span><br><span class="line">str = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="内联函数"><a href="#内联函数" class="headerlink" title="内联函数"></a>内联函数</h3><h4 id="类内定义"><a href="#类内定义" class="headerlink" title="类内定义"></a>类内定义</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Studen</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>&#123;age = _age&#125;</span><br><span class="line">    <span class="keyword">int</span> getAge()&#123;<span class="keyword">return</span> age;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">student</span><span class="params">()</span></span>&#123;<span class="comment">//todo&#125;</span></span><br><span class="line"><span class="keyword">private</span> :</span><br><span class="line">        <span class="built_in">string</span> name;</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="类外定义"><a href="#类外定义" class="headerlink" title="类外定义"></a>类外定义</h4><ul><li><p>同文件类外定义</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Class car&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::changgeSpeed</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Created by Asaki on 2021/5/29.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="built_in">string</span> _name)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span></span>;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">getGender</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> _age)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="built_in">string</span> m_strGender;</span><br><span class="line">    <span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setName</span><span class="params">(<span class="built_in">string</span> _name)</span> </span>&#123;</span><br><span class="line">    m_strName = _name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Teacher::getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_strName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setGender</span><span class="params">(<span class="built_in">string</span> _gender)</span> </span>&#123;</span><br><span class="line">    m_strGender = _gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">Teacher::getGender</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_strGender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::setAge</span><span class="params">(<span class="keyword">int</span> _age)</span> </span>&#123;</span><br><span class="line">    m_iAge = _age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Teacher::getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> m_iAge;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Teacher::teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot; 现在上课&quot;</span> &lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Teacher t;</span><br><span class="line">    t.setName(<span class="string">&quot;孔子&quot;</span>);</span><br><span class="line">    t.setGender(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">    t.setAge(<span class="number">30</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.getName() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; t.getAge() &lt;&lt; t.getGender() ;</span><br><span class="line">    t.teach();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>分文件类外定义 //常用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//常用</span></span><br><span class="line">在Car.h中</span><br><span class="line"> </span><br><span class="line"> Class Car&#123;</span><br><span class="line"> <span class="keyword">public</span>:</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">changeSpeed</span><span class="params">()</span></span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">在Car.cpp中</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Car.h&quot;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::run</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::stop</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Car::changeSpeed</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><ul><li>栈区: int x = 0; int * p = NULL;</li><li>堆区: int *p = new int[20];</li><li>全局区: 存储全局变量及静态变量</li><li>常量区: string str = “hello”;</li><li>代码区: 存储逻辑代码的二进制</li></ul><h4 id="构造函数的规则和特点"><a href="#构造函数的规则和特点" class="headerlink" title="构造函数的规则和特点"></a>构造函数的规则和特点</h4><ul><li>构造函数在对象实例化时被自动调用</li><li>构造函数与类同名</li><li>构造函数没有返回值</li><li>构造函数可以又多个重载形式</li><li>实例化队形时仅用到一个构造函数</li><li>当用户没有定义构造函数时,编译器自动生成一个构造函数</li></ul><ol><li><p>无参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        m_strName = <span class="string">&quot;jim&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>有参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student(<span class="built_in">string</span> name) &#123;</span><br><span class="line">        m_strName = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>重载构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        m_strName = <span class="string">&quot;jim&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Student(<span class="built_in">string</span> name)&#123;</span><br><span class="line">        m_strName = name;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol><h4 id="初始化列表"><a href="#初始化列表" class="headerlink" title="初始化列表"></a>初始化列表</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student():m_strName(<span class="string">&quot;Jim&quot;</span>),m_iAge(<span class="number">10</span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">    <span class="keyword">int</span> m_iAge;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="初始化列表特征"><a href="#初始化列表特征" class="headerlink" title="初始化列表特征"></a>初始化列表特征</h5><ul><li>初始化列表优先于构造函数执行</li><li>初始化列表只能用于构造函数</li><li>初始化列表可以同时初始化多个数据类型</li></ul><h4 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Student&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Student stu1;</span><br><span class="line">    Student stu2 = stu1;</span><br><span class="line">    <span class="function">Student <span class="title">stu3</span><span class="params">(stu1)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上代码只输出一遍Student</span></span><br><span class="line"><span class="comment">//调用拷贝构造函数</span></span><br></pre></td></tr></table></figure><ul><li>定义格式: 类名 (const 类名 &amp; 变量名)</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;m_strName = <span class="string">&quot;jim&quot;</span>&#125;</span><br><span class="line">    Student(<span class="keyword">const</span> Student&amp; stu)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Student()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Student&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line">    ~Student()&#123;<span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;~ Student&quot;</span> &lt;&lt; <span class="built_in">endl</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="built_in">string</span> m_strName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   Student()&#123;m_pName = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">20</span>];&#125;</span><br><span class="line">   ~Student()&#123;<span class="keyword">delete</span> []m_pName;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">char</span> *m_pName;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>如果没有自定义析构函数则系统自动生成</li><li>析构函数在对象销毁时自动调用</li><li>析构函数没有返回值,没有参数也不能重载</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;封装的好处&quot;&gt;&lt;a href=&quot;#封装的好处&quot; class=&quot;headerlink&quot; title=&quot;封装的好处&quot;&gt;&lt;/a&gt;封装的好处&lt;/h3&gt;&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="C++" scheme="http://blog.isk.ink/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 C++ 类模板</title>
    <link href="http://blog.isk.ink/2021/05/22/%E6%B5%85%E8%B0%88-C-%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>http://blog.isk.ink/2021/05/22/%E6%B5%85%E8%B0%88-C-%E7%B1%BB%E6%A8%A1%E6%9D%BF/</id>
    <published>2021-05-22T13:17:07.000Z</published>
    <updated>2021-05-22T13:18:51.380Z</updated>
    
    <content type="html"><![CDATA[<h2 id="函数模板"><a href="#函数模板" class="headerlink" title="函数模板"></a>函数模板</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ul><li><p>作用:  建立一个通用函数,其函数返回值和形参类型可以不具体定制,用一个虚拟的类型来代替</p></li><li><p>语法:</p></li><li><pre><code class="C++"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;<span class="comment">//template 声明创建模板</span><span class="comment">//typename 表面其后面的符号是一种数据类型,可以用class代替</span><span class="comment">// T  通用的数据类型,名称可以替换,通常为大写字母</span>&lt;!--code￼<span class="number">0</span>--&gt;</code></pre></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySwap</span><span class="params">(T&amp;a,T&amp;b)</span></span>&#123;</span><br><span class="line">    T temp = a;</span><br><span class="line">    a = b;</span><br><span class="line">    b = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MySort</span><span class="params">(T arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//从大到小排序</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len ;i ++)&#123;</span><br><span class="line">        <span class="keyword">int</span> max = i ;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i +<span class="number">1</span> ; j &lt; len; j ++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(arr[max] &lt; arr[j])&#123;</span><br><span class="line">                max = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(max != i)&#123;</span><br><span class="line">            MySwap(arr[max],arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印数组的模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(T arr[],<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;  arr[i] &lt;&lt; <span class="string">&quot; &quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> charArr[] = <span class="string">&quot;badcfe&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><ul><li>普通函数调用可以发生隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">char</span> c = <span class="string">&#x27;c&#x27;</span>;  <span class="comment">// ascii码 c = 99;</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd01(a,c) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//c在这里发生隐式转换 变为int类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>函数模板可以自动类型推导,不可以发生隐式类型转换</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">myAdd01</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T &amp;a, T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    char c = &#x27;c &#x27;;  // ascii码 c = 99;</span><br><span class="line"><span class="comment">//    cout &lt;&lt; myAdd01(a,c) &lt;&lt; endl; //c在这里发生隐式转换 变为int类型</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd02(a,c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//以上程序无法通过,出错在15行  ,一个为int ,一个为char</span></span><br></pre></td></tr></table></figure></li><li><p>显示指定类型可以通过</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function">T <span class="title">myAdd02</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    char c = &#x27;c &#x27;;  // ascii码 c = 99;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; myAdd02&lt;<span class="keyword">int</span>&gt;(a,c) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 109</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="调用规则"><a href="#调用规则" class="headerlink" title="调用规则"></a>调用规则</h3><ul><li>如果普通函数和函数模板都可以实现,优先普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板可以发生重载</li><li>如果函数模板可以产生更好的匹配,优先调用函数模板</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//这里是普通模板</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用普通函数&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用函数模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(T a, T b,T c)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;调用重载的函数模板&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//使用空模板参数列表,强制调用函数模板.</span></span><br><span class="line">    myPrint&lt;&gt;(a,b);</span><br><span class="line">    <span class="comment">//使用重载的函数模板</span></span><br><span class="line">    myPrint(a,b,<span class="number">100</span>);</span><br><span class="line">    <span class="comment">//如果函数模板产生更好的匹配,优先调用函数模板</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="模板的局限性"><a href="#模板的局限性" class="headerlink" title="模板的局限性"></a>模板的局限性</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模板的通用性并不是万能的</span></span><br><span class="line"><span class="comment">//如果传入的a和b是一个数组,就无法实现了</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(<span class="built_in">string</span> name,<span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(T &amp;a,T &amp;b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用具体化的Persion的版本实现代码,具体化优先调用</span></span><br><span class="line"><span class="keyword">template</span>&lt;&gt; <span class="function"><span class="keyword">bool</span> <span class="title">myCompare</span><span class="params">(Person &amp;p1,Person &amp;p2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p1.m_Name == p2.m_Name &amp;&amp; p1.m_Age == p2.m_Age)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;Tom&quot;</span>,<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">bool</span> ret = myCompare(p1,p2);</span><br><span class="line">    <span class="keyword">if</span>(ret)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1 == p2&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;p1 != p2&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板"><a href="#类模板" class="headerlink" title="类模板"></a>类模板</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用:"></a>作用:</h4><ul><li><p>建立一个通用类,类中的成员数据类型可以不具体制定,用一个虚拟的类型来代表</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>  <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">NameType</span>,<span class="keyword">class</span> <span class="title">AgeType</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(NameType name,AgeType age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;name: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;age: &quot;</span> &lt;&lt;<span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    NameType m_Name;</span><br><span class="line">    AgeType m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p1(&quot;孙悟空&quot;,999);</span><br><span class="line">    p1.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;猪八戒&quot;,999);</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板中成员函数创造时机"><a href="#类模板中成员函数创造时机" class="headerlink" title="类模板中成员函数创造时机"></a>类模板中成员函数创造时机</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板中成员函数创造时机</span></span><br><span class="line"><span class="comment">//类模板中成员函数在调用时才去创建</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person1</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person1 show&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person2</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;Person2 show&quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    T obj;</span><br><span class="line">    <span class="comment">//类模板中的成员函数</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func1</span><span class="params">()</span></span>&#123;</span><br><span class="line">        obj.showPerson1();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">func2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        obj.showPerson2();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    MyClass&lt;Person1&gt; m;</span><br><span class="line">    m.func1();</span><br><span class="line">    <span class="comment">//只能调用一个 Person1</span></span><br><span class="line">   <span class="comment">// m.func2();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板对象做函数参数"><a href="#类模板对象做函数参数" class="headerlink" title="类模板对象做函数参数"></a>类模板对象做函数参数</h3><p>三种传入方法:</p><ol><li><p>指定传入类型 — 直接显示对象的数据类型</p></li><li><p>参数模板化     —将对象中的参数变为模板进行传递</p></li><li><p>整个类模板化   —将这个对象类型 模板进行传递</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板对象做函数参数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name, T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//1.指定传入类型,对象做函数中的一个参数    最常用</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson1</span><span class="params">(Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;&amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;孙悟空&quot;,100);</span><br><span class="line">    printPerson1(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.参数模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1,T2&gt;&amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;T1的类型为: &quot; &lt;&lt; typeid(T1).name() &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;T2的类型为: &quot; &lt;&lt; typeid(T2).name() &lt;&lt; endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p(<span class="string">&quot;猪八戒&quot;</span>,<span class="number">90</span>);</span><br><span class="line">    printPerson2(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//3.整个类模板化</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson3</span><span class="params">(T &amp;p)</span></span>&#123;</span><br><span class="line">    p.showPerson();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;T的数据类型: &quot;</span> &lt;&lt; <span class="keyword">typeid</span>(T).name() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;唐僧&quot;,30);</span><br><span class="line">    printPerson3(p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line">    test02();</span><br><span class="line">    test03();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul><h3 id="类模板和继承"><a href="#类模板和继承" class="headerlink" title="类模板和继承"></a>类模板和继承</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//类模板与继承</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>&#123;</span></span><br><span class="line">    T m;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//class Son: public Base&#123;  //错误</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:</span> <span class="keyword">public</span> Base&lt;<span class="keyword">int</span>&gt;&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Son s1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如果像灵活指定父类中T类型,子类也需要类变模板</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son2</span>:</span> <span class="keyword">public</span> Base&lt;T2&gt;&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Son2()&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;T1的数据类型为:&quot;</span> &lt;&lt;<span class="keyword">typeid</span>(T1).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt;<span class="string">&quot;T2的数据类型为:&quot;</span> &lt;&lt;<span class="keyword">typeid</span>(T2).name()&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    T1 obj;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Son2&lt;<span class="keyword">int</span>,<span class="keyword">char</span>&gt;S2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test2();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板成员函数类外实现"><a href="#类模板成员函数类外实现" class="headerlink" title="类模板成员函数类外实现"></a>类模板成员函数类外实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">    Person(T1 name,T2 age);</span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Name = name;</span></span><br><span class="line"><span class="comment">//    this-&gt;m_Age = age;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;姓名:&quot; &lt;&lt; this-&gt;m_Name &lt;&lt; &quot;姓名: &quot; &lt;&lt; this-&gt;Age &lt;&lt;endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//构造函数的类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::Person(T1 name,T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//成员函数类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1,T2&gt;::showPerson()&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string ,int &gt; P(&quot;Tom&quot;,20);</span><br><span class="line">    P.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="类模板函数份文件编写"><a href="#类模板函数份文件编写" class="headerlink" title="类模板函数份文件编写"></a>类模板函数份文件编写</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name,T2 age);</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showPerson</span><span class="params">()</span></span>;</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line">Person&lt;T1,T2&gt;::Person(T1 name,T2 age)&#123;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">    <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>, <span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="keyword">void</span> Person&lt;T1,T2&gt;::showPerson() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;m_Age &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种解决方法</span></span><br><span class="line"><span class="comment">//#include &quot;person.cpp&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种解决方式,将.h和.cpp中的内容写到一起</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&quot;person2.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string,int&gt; p(&quot;Jerry&quot;,18);</span><br><span class="line">    p.showPerson();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    test01();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>主流方法是第二种,将类模板成员函数写到一起,并将后缀名改为.hpp</li></ul><h3 id="类模板与友元"><a href="#类模板与友元" class="headerlink" title="类模板与友元"></a>类模板与友元</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过全局函数   打印Person信息</span></span><br><span class="line"><span class="comment">//提前让编译器知道Person类</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//类外实现</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printPerson2</span><span class="params">(Person&lt;T1,T2&gt; p)</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;类外实现--姓名: &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="keyword">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line">    <span class="comment">//全局函数 类内实现</span></span><br><span class="line">    <span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">printPerson</span><span class="params">(Person&lt;T1,T2&gt; p)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;姓名: &quot;</span> &lt;&lt; p.m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; p.m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//全局函数 类外实现</span></span><br><span class="line">    <span class="comment">//加空模板的参数列表</span></span><br><span class="line">    <span class="comment">//如果全局函数是类外实现,需要让编译器提前知道这个函数的存在</span></span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">void</span> printPerson2&lt;&gt;(Person&lt;T1,T2&gt; p);</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person(T1 name,T2 age)&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T1 m_Name;</span><br><span class="line">    T2 m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////类外实现</span></span><br><span class="line"><span class="comment">//template&lt;class T1,class T2&gt;</span></span><br><span class="line"><span class="comment">//void printPerson2(Person&lt;T1,T2&gt; p)&#123;</span></span><br><span class="line"><span class="comment">//    cout &lt;&lt; &quot;类外实现--姓名: &quot; &lt;&lt; p.m_Name &lt;&lt; &quot;年龄: &quot; &lt;&lt; p.m_Age &lt;&lt; endl;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.全局函数在类内的实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;<span class="built_in">string</span>,<span class="keyword">int</span>&gt;p(<span class="string">&quot;Tom&quot;</span>,<span class="number">20</span>);</span><br><span class="line">    printPerson(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.全局函数在类外实现</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Person&lt;string ,int&gt; p(&quot;Jerry&quot;,20);</span><br><span class="line">    printPerson2(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//test01();</span></span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板案例-数组类封装"><a href="#类模板案例-数组类封装" class="headerlink" title="类模板案例__数组类封装"></a>类模板案例__数组类封装</h3><ul><li><p>可以对内置数据类型以及自定义数据类型的数据进行存储</p></li><li><p>将数组中的数据类型存储到堆区</p></li><li><p>构造函数中可以传入数组的容量;</p></li><li><p>提供对应的拷贝函数以及opperator=防止浅拷贝问题</p></li><li><p>提供尾插法和尾删法对数组中的数据进行增加和删除</p></li><li><p>可以通过下标的方式访问数组中的元素</p></li><li><p>可以获取数据中当前元素个数和数组的容量</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> UNTITLED1_MYARRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNTITLED1_MYARRAY_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">//UNTITLED1_MYARRAY_H</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//有参构造 参数 容量</span></span><br><span class="line">    MyArray(<span class="keyword">int</span> capacity) &#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray有参构造调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[<span class="keyword">this</span>-&gt;m_Capacity];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//拷贝构造</span></span><br><span class="line">    MyArray(<span class="keyword">const</span> MyArray&amp; arr)&#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray拷贝构造调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">        <span class="comment">//this-&gt;pAddress = arr.pAddress;</span></span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将arr中的数据都拷贝过来</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="keyword">this</span>-&gt;m_Size; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i]  = arr.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//operator= 防止浅拷贝的问题</span></span><br><span class="line">    MyArray&amp; <span class="keyword">operator</span> = (<span class="keyword">const</span> MyArray &amp;arr)&#123;</span><br><span class="line"><span class="comment">//        cout &lt;&lt;&quot;Myarray的operator=调用&quot;&lt;&lt;endl;</span></span><br><span class="line">        <span class="comment">//先判断原来堆区是否有数据 ,如果有先释放</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Capacity = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">this</span>-&gt;m_Size = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//深拷贝</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Capacity = arr.m_Capacity;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size = arr.m_Size;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress  = <span class="keyword">new</span> T[arr.m_Capacity];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>;i &lt; <span class="keyword">this</span>-&gt;m_Size; i ++)&#123;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress[i] = arr.pAddress[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//尾插法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Push_Back</span><span class="params">(<span class="keyword">const</span> T &amp; val)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断容量是否等于大小</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Capacity == <span class="keyword">this</span>-&gt;m_Size)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;pAddress[<span class="keyword">this</span>-&gt;m_Size] = val; <span class="comment">//在数组末尾插入数据</span></span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size ++; <span class="comment">// 更新数组大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删法</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Pop_Back</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//让用具访问不到早最后一个元素</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;m_Size == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Size --;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//通过下标方式访问数组中的元素</span></span><br><span class="line">    T&amp; <span class="keyword">operator</span>[](<span class="keyword">int</span> index)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;pAddress[index];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回数组容量</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getCapacity</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回数组大小</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>-&gt;m_Size;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//析构函数</span></span><br><span class="line">    ~MyArray()&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>-&gt;pAddress != <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="comment">//            cout &lt;&lt;&quot;Myarray析构函数调用&quot;&lt;&lt;endl;</span></span><br><span class="line">            <span class="keyword">delete</span>[] <span class="keyword">this</span>-&gt;pAddress;</span><br><span class="line">            <span class="keyword">this</span>-&gt;pAddress = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    T * pAddress; <span class="comment">//指针指向堆区开辟的真实数组</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_Capacity; <span class="comment">//数组容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> m_Size; <span class="comment">// 数组大小</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;MyArray.hpp&quot;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printIntArray</span><span class="params">(MyArray &lt;<span class="keyword">int</span>&gt;&amp; arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.getSize(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arr[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyArray&lt;<span class="keyword">int</span>&gt; <span class="title">arr1</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i ++)&#123;</span><br><span class="line">        arr1.Push_Back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的打印输出: &quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    printIntArray(arr1);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的容量为: &quot;</span> &lt;&lt;arr1.getCapacity() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr1的大小为: &quot;</span> &lt;&lt;arr1.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    MyArray&lt;<span class="keyword">int</span> &gt;arr2(arr1);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的打印输出为: &quot;</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    printIntArray(arr2);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//尾删</span></span><br><span class="line">    arr2.Pop_Back();</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2尾删后:&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的容量为: &quot;</span> &lt;&lt;arr2.getCapacity() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr2的大小为: &quot;</span> &lt;&lt;arr2.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    MyArray&lt;int&gt; arr2(arr1);</span></span><br><span class="line"><span class="comment">//    MyArray&lt;int &gt;arr3(100);</span></span><br><span class="line"><span class="comment">//    arr3 = arr1;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Person()&#123;&#125;;</span><br><span class="line">    Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age )&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Name = name;</span><br><span class="line">        <span class="keyword">this</span>-&gt;m_Age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">string</span> m_Name;</span><br><span class="line">    <span class="keyword">int</span> m_Age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(MyArray&lt;Person&gt; &amp;arr)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; arr.getSize(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&quot;姓名: &quot;</span> &lt;&lt; arr[i].m_Name &lt;&lt; <span class="string">&quot;年龄: &quot;</span> &lt;&lt; arr[i].m_Age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function">MyArray&lt;Person&gt; <span class="title">arr</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p1</span><span class="params">(<span class="string">&quot;孙悟空&quot;</span> ,<span class="number">999</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">&quot;韩信&quot;</span>,<span class="number">30</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">&quot;妲己&quot;</span>,<span class="number">20</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">&quot;赵云&quot;</span>,<span class="number">25</span>)</span></span>;</span><br><span class="line">    <span class="function">Person <span class="title">p5</span><span class="params">(<span class="string">&quot;安其拉&quot;</span>,<span class="number">27</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将数据插入到数组中</span></span><br><span class="line">    arr.Push_Back(p1);</span><br><span class="line">    arr.Push_Back(p2);</span><br><span class="line">    arr.Push_Back(p3);</span><br><span class="line">    arr.Push_Back(p4);</span><br><span class="line">    arr.Push_Back(p5);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组</span></span><br><span class="line">    printArray(arr);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印数组容量和大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr的容量为: &quot;</span> &lt;&lt; arr.getCapacity() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;arr大小为: &quot;</span> &lt;&lt; arr.getSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//    test01();</span></span><br><span class="line">    test02();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;函数模板&quot;&gt;&lt;a href=&quot;#函数模板&quot; class=&quot;headerlink&quot; title=&quot;函数模板&quot;&gt;&lt;/a&gt;函数模板&lt;/h2&gt;&lt;h3 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Rust学习笔记(二)</title>
    <link href="http://blog.isk.ink/2021/05/07/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://blog.isk.ink/2021/05/07/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/</id>
    <published>2021-05-07T12:09:09.000Z</published>
    <updated>2021-05-08T15:01:07.278Z</updated>
    
    <content type="html"><![CDATA[<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><ul><li><p>所有权可以说是Rust中最为独特的一个功能了,正是有权概念和相关工具的引入,Rust才能够在没有垃圾回收机制的前提下保障内存安全.</p><h3 id="什么是所有权"><a href="#什么是所有权" class="headerlink" title="什么是所有权"></a>什么是所有权</h3><p>有些语言需要手动地分配和释放内存,有些自带垃圾回收机制,Rust则采用第三种方法:它使用特定规则的所有权系统来管理内存,这套规则允许编译器在执行中执行检查工作,而不会产生任何的运行时开销.</p><ul><li><p>堆与栈</p><p>栈会以我们放入值的顺序来存储他们,并以相反的顺序将值取出,这就是后进先出原则.</p><p>而那些无法确定大小的数据,你就只能将他们储存在堆中了.</p></li></ul></li></ul><h3 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3><ul><li><p>Rust中的每一个值都有一个对应的变量作为它的所有者</p></li><li><p>同一时间内,值有且仅有一个所有者</p></li><li><p>当所有者离开自己的作用域时,他持有的值就会被释放掉.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;                      <span class="comment">//变量s还未被声明,不可用</span></span><br><span class="line">    <span class="keyword">let</span> s = <span class="string">&quot;hello&quot;</span>;<span class="comment">//声明,变量s变得可用</span></span><br><span class="line">    <span class="comment">//这里可以执行s相关的操作</span></span><br><span class="line">    </span><br><span class="line">&#125; <span class="comment">//作用域到这里结束</span></span><br></pre></td></tr></table></figure><ul><li><p>s 进入作用域后变的有效</p></li><li><p>他会保持自己的有效性直到自己离开作用域为止</p></li></ul></li></ul><h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="comment">//这里的(::)运算符允许我们调用置于String命名空间下面的特定from函数</span></span><br></pre></td></tr></table></figure><ul><li><p>字符串对象能够被声明为可变的</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = Sting::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">s.push_str(<span class="string">&quot;,world!&quot;</span>);<span class="comment">//push_str()函数向String空间的</span></span><br><span class="line"><span class="comment">//添加了一段字面量</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,s); <span class="comment">//这里会输出完整的hello,world!</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="内存与分配"><a href="#内存与分配" class="headerlink" title="内存与分配"></a>内存与分配</h3><p>Rust提供一套解决方案: 内存会自动地在拥有它的变量离开作用域后进行释放</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">//这里开始s变的有效</span></span><br><span class="line">    <span class="comment">//执行与s相关的操作</span></span><br><span class="line">&#125; <span class="comment">//作用域到这里结束,变量s失效</span></span><br></pre></td></tr></table></figure><ul><li><p>String类型的作者可以在这个函数中释放内存的代码,记住Rust会在作用域结束的地方及{}处自动调用drop函数.</p></li><li><p>Rust 永远不会自动创建数据的深度拷贝.因此任何的自动赋值都可以被视为高效的,</p></li><li><p>当你确实需要去拷贝String堆上的数据,而不仅仅是栈数据时,就可以使用一个名为clone的方法.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s1 =<span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> s2 =s1.clone();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;s1 =&#123;&#125;,s2=&#123;&#125;&quot;</span>,s1,s2);  <span class="comment">//复制了堆上的数据</span></span><br></pre></td></tr></table></figure></li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">let</span> y = x;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;X = &#123;&#125;,y =&#123;&#125;&quot;</span>,x,y);</span><br><span class="line"><span class="comment">//以上内容合理,对于整型等类型,深度拷贝和浅度拷贝没有任何本质的区别.发生在栈上,而</span></span><br><span class="line"><span class="comment">//String的clone发生在堆上</span></span><br></pre></td></tr></table></figure><ul><li>一但某种类型拥有了Copy这种trait,那么它的变量就可以在复制给其他变量之后保持可用性.</li><li>下面是拥有Copy这种trait的类型<ul><li>所有的整数类型,如u32</li><li>仅有两种值(true和false)的布尔类型:bool</li><li>字符类型:char</li><li>所有的浮点类型,诸如f64</li><li>如果元组中的所有字段的类型都是Copy的,那么这个元组也是Copy的,例如(i32,i32)是Copy的,但(i32,String)则不是</li></ul></li></ul><h3 id="所有权与函数"><a href="#所有权与函数" class="headerlink" title="所有权与函数"></a>所有权与函数</h3><ul><li><p>将值传递给函数在语义上类似于对变量进行赋值,将变量传递给函数会触发移动或复制,就像是赋值语句一样.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">//变量s进入作用域</span></span><br><span class="line">    </span><br><span class="line">    takes_ownership(s);   <span class="comment">//s的值被移动进了函数</span></span><br><span class="line">     <span class="comment">//所以它从这里开始不在有效  string失效</span></span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;      <span class="comment">//变量x进入作用域</span></span><br><span class="line">    </span><br><span class="line">    makes_copy(x);   <span class="comment">//变量x同样被传递进了函数</span></span><br><span class="line">    <span class="comment">//但是由于i32是Copy的,所以我们依然可以在此之后使用x</span></span><br><span class="line">&#125;<span class="comment">//x首先离开作用域,随后是s.</span></span><br><span class="line"><span class="comment">//但由于s的值已经发生了移动,所以没有什么事情发生.</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>)&#123; <span class="comment">//some_string进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,some_string);</span><br><span class="line">&#125;<span class="comment">//some_string在这里离开作用域,drop函数被自动调用</span></span><br><span class="line"><span class="comment">//some_string所占用的内存也就随之被释放掉了</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">makes_copy</span></span>(some_integer: <span class="built_in">i32</span>)&#123;  <span class="comment">//some_integer进入作用域</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>,some_integer); </span><br><span class="line">&#125;<span class="comment">//some_integer在这里离开了作用域,没有什么特别的事情发生.</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="返回值于作用域"><a href="#返回值于作用域" class="headerlink" title="返回值于作用域"></a>返回值于作用域</h3><ul><li><p>函数在返回值的过程中也会发生所有权的转移</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = gives_ownership(); <span class="comment">//gives_ownership将它的返回值移动到</span></span><br><span class="line">                                <span class="comment">//s1中</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">//s2进入作用域</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> s3 =takes_and_gives_back(s2);  <span class="comment">//s2被移动进函数</span></span><br><span class="line">    <span class="comment">//takes_and_gives_back中,而这个函数的返回值又被移动到了变量s3上</span></span><br><span class="line">&#125;<span class="comment">//s3在这里离开作用域并被销毁.由于s2已经移动了</span></span><br><span class="line"><span class="comment">//所以他不会在离开作用域时发生任何事情,s1最后离开作用域并被销毁</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gives_ownership</span></span>() -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="comment">//gives_ownership会将返回值移动到调用它的函数内</span></span><br><span class="line">    <span class="keyword">let</span> some_string = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);<span class="comment">//some_string进入作用域</span></span><br><span class="line">    some_string <span class="comment">//some_string作为返回值移动</span></span><br><span class="line">    <span class="comment">//至调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//takes_and_gives_back将取得一个String的所有权并将它作为结果返回</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_and_gives_back</span></span>(a_string: <span class="built_in">String</span>)  -&gt; <span class="built_in">String</span>&#123;</span><br><span class="line">                                           <span class="comment">//a_string 进入作用域</span></span><br><span class="line">    a_string                           <span class="comment">//a_string作为返回值移动至调用函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="函数在返回值时所有权的转移过程"><a href="#函数在返回值时所有权的转移过程" class="headerlink" title="函数在返回值时所有权的转移过程"></a>函数在返回值时所有权的转移过程</h4><ul><li><p>当一个持有堆数据的变量离开作用域时,他的数据就会被drop清理回收,除非这些数据的所有权移动到另一个变量上</p></li><li><p>利用元组来返回多个值                </p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> (s2,len) = calculate_length(s1);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>,s2,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_langth</span></span>(s: <span class="built_in">String</span>) -&gt; (<span class="built_in">String</span>, <span class="built_in">usize</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> length = s.len();         <span class="comment">//len()会返回当前字符串的长度</span></span><br><span class="line">    </span><br><span class="line">    (s,length)</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure></li></ul><h3 id="借用与引用"><a href="#借用与引用" class="headerlink" title="借用与引用"></a>借用与引用</h3><ul><li><p>新的函数签名使用了String的引用作为参数而没有直接转移的所有权</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">  <span class="keyword">let</span> s1 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> len = calculate_length(&amp;s1);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The length of &#x27;&#123;&#125;&#x27; is &#123;&#125;.&quot;</span>,s1,len);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span> ) -&gt; <span class="built_in">usize</span> &#123;</span><br><span class="line">    s.len()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>同理签名中的&amp;用来表示参数s的类型是一个引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">calculate_length</span></span>(s: &amp;<span class="built_in">String</span>) -&gt; <span class="built_in">usize</span>&#123; <span class="comment">//s是指向String的引用</span></span><br><span class="line">    s.len()</span><br><span class="line">&#125;<span class="comment">//到这里,s离开作用域.但是由于它并不持有自己指向值的所有权</span></span><br><span class="line"><span class="comment">//所以没有什么特殊的事情发生</span></span><br><span class="line"><span class="comment">//变量s的作用域与其他函数参数一样,唯一不同的是,他不会在离开自己的</span></span><br><span class="line"><span class="comment">//作用域时销毁其指向的数据,因为它并不拥有该数据的所有权</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>与变量类似,引用是默认不可变的,Rust不允许我们去修改引用指向的值</li></ul><h3 id="可变引用"><a href="#可变引用" class="headerlink" title="可变引用"></a>可变引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s =<span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    change(&amp;<span class="keyword">mut</span> s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">change</span></span>(some_string: &amp;<span class="keyword">mut</span> <span class="built_in">String</span>)&#123;</span><br><span class="line">    some_string.push_str(<span class="string">&quot;,world&quot;</span>);</span><br><span class="line">&#125;<span class="comment">//注意将变量s声明为mut,即可变的</span></span><br></pre></td></tr></table></figure><ul><li><p>限制: 对于特定作用域中的特定数据来说,一次只能声明一个变量.下边是个错误示范:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line"><span class="comment">//错误,因为声明了两个变量  r1 和 r2</span></span><br></pre></td></tr></table></figure><p>修正:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> r1 = &amp;<span class="keyword">mut</span> s;</span><br><span class="line">&#125;<span class="comment">//由于r1在这里离开了作用域,所以我们可以合法的再创建一个可变引用</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;<span class="keyword">mut</span> s;</span><br></pre></td></tr></table></figure></li><li><p>约束: 我们不能在拥有可变引用的同时创建可变引用</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;s;  <span class="comment">//没问题</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;s;   <span class="comment">//没问题</span></span><br><span class="line"><span class="keyword">let</span> r3 = &amp;<span class="keyword">mut</span> s;  <span class="comment">//错误</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="垂直引用"><a href="#垂直引用" class="headerlink" title="垂直引用"></a>垂直引用</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> reference_to_mothing = dangle();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123;  <span class="comment">//dangle会返回一个指向String的引用</span></span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);<span class="comment">//s被绑定到新的String上</span></span><br><span class="line">    </span><br><span class="line">    &amp;s<span class="comment">//我们指向s的引用返回给调用者</span></span><br><span class="line">&#125;<span class="comment">//变量s在这里离开作用域并随之被销毁,它指向的内存自然也不再有效</span></span><br><span class="line"><span class="comment">//危险!!</span></span><br></pre></td></tr></table></figure><p>解决:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">no_dangle</span></span>()  -&gt;<span class="built_in">String</span>&#123;</span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>:from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    s</span><br><span class="line">&#125;<span class="comment">//所有权被移出函数,自然就不会涉及释放操作了</span></span><br></pre></td></tr></table></figure><h3 id="切片"><a href="#切片" class="headerlink" title="切片"></a>切片</h3><h4 id="字符串切片"><a href="#字符串切片" class="headerlink" title="字符串切片"></a>字符串切片</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> hello = &amp;s[<span class="number">0</span>..<span class="number">5</span>];</span><br><span class="line"><span class="keyword">let</span> world = &amp;s[<span class="number">6</span>..<span class="number">11</span>];</span><br></pre></td></tr></table></figure><ul><li><p>语法糖</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">0</span>..<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[..<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> len = s.len();</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">3</span>..len];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">3</span>..];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[<span class="number">0</span>..len];</span><br><span class="line"><span class="keyword">let</span> slice = &amp;s[..];</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s:&amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(i,&amp;item) <span class="keyword">in</span> bytes.iter().enumerate()&#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一但搜索成功,就返回一个从首字母到开始这个索引位置结束的字符串切片</span></span><br><span class="line"><span class="comment">//字符串切片的类型写作&amp;str</span></span><br></pre></td></tr></table></figure><h4 id="将字符串切片作为参数"><a href="#将字符串切片作为参数" class="headerlink" title="将字符串切片作为参数"></a>将字符串切片作为参数</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_world</span></span>(s:&amp;<span class="built_in">String</span>) -&gt; &amp;<span class="built_in">str</span>&#123;&#125;</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_world</span></span>(s: &amp;<span class="built_in">str</span>)  -&gt; &amp;<span class="built_in">str</span>&#123;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> my_string = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">    <span class="comment">//first_world可以接收String对象的切片作为参数</span></span><br><span class="line">    <span class="keyword">let</span> word = first_world(&amp;my_string[..]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> my_string_literal = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//first_world 可以接收字符串字面量的切片作为参数</span></span><br><span class="line">    <span class="keyword">let</span> word = first_world(&amp;my_string_literal[..]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//由于字符串字面量本身就是切片,所以我们可以在这里直接将他它传入函数</span></span><br><span class="line">    <span class="comment">//而不需要使用额外的切片语法</span></span><br><span class="line">    <span class="keyword">let</span> word = first_word(my_string_literal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;所有权&quot;&gt;&lt;a href=&quot;#所有权&quot; class=&quot;headerlink&quot; title=&quot;所有权&quot;&gt;&lt;/a&gt;所有权&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;所有权可以说是Rust中最为独特的一个功能了,正是有权概念和相关工具的引入,Rust才能够在没有垃圾回收机制的前提
      
    
    </summary>
    
    
    
      <category term="Rust" scheme="http://blog.isk.ink/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Rust学习笔记(一)</title>
    <link href="http://blog.isk.ink/2021/05/05/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://blog.isk.ink/2021/05/05/Rust%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/</id>
    <published>2021-05-04T17:03:04.000Z</published>
    <updated>2021-05-06T07:41:38.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Hello-Cargo"><a href="#Hello-Cargo" class="headerlink" title="Hello, Cargo!"></a>Hello, Cargo!</h2><p>Cargo是Rust工具链中内置的构建系统及包管理器.</p><ul><li><p>使用Cargo创建项目</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo new hello_cargo   <span class="comment">//会创建一个hello_cargo项目</span></span><br><span class="line">cd hello_cargo</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>使用Cargo构建和运行项目</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cargo build   </span><br></pre></td></tr></table></figure><p>会生成可执行程序到路径<code>target/debug/hello_cargo</code>下(或者Windows系统下<code>target/debug/hello_cargo.exe</code>下)</p></li></ul><ul><li><p>使用cargo run命令来依次完成编译和运行任务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cargo run   &#x2F;&#x2F;编译运行</span><br><span class="line">cargo check  &#x2F;&#x2F;编译</span><br></pre></td></tr></table></figure></li></ul><h2 id="通用编程概念"><a href="#通用编程概念" class="headerlink" title="通用编程概念"></a>通用编程概念</h2><h3 id="变量与可见性"><a href="#变量与可见性" class="headerlink" title="变量与可见性"></a>变量与可见性</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">    x = <span class="number">6</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210505012155.png" alt="image-20210505012148755"></p><p>变量默认不可变,但你可以通过声明的变量名称前添加mut关键字来使其可变,出了使变量的值可变,mut还会向阅读的人暗示其他代码可能会改变这个变量的值.</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="整数"><a href="#整数" class="headerlink" title="整数"></a>整数</h4><table><thead><tr><th>长度</th><th>有符号</th><th>无符号</th></tr></thead><tbody><tr><td>8-bit</td><td>i8</td><td>u8</td></tr><tr><td>16-bit</td><td>i16</td><td>u16</td></tr><tr><td>32-bit</td><td>i32</td><td>u32</td></tr><tr><td>64-bit</td><td>i64</td><td>u64</td></tr><tr><td>arch</td><td>isize</td><td>usize</td></tr></tbody></table><ul><li><p>无符号整数永远为正,有符号可以为负.</p></li><li><p>isize和usize的长度取决于,程序运行的目标平台.64位架构 就是64位的.32位就是32位.</p></li><li><p>除了Byte,其余所有的字面量都可以使用类型后缀,比如57u8,代表一个使用了u8类型的整数57.</p></li></ul><h4 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h4><p>浮点数有f32和f64,他们分别占用32位和64位空间.运行效率相差无几,默认f64</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fn main()&#123;</span><br><span class="line">let x &#x3D; 2.0 &#x2F;&#x2F;f64</span><br><span class="line">let y:f32 &#x3D; 3.0 &#x2F;&#x2F;f32</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h3><h4 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> tup:(<span class="built_in">i32</span>,<span class="built_in">f64</span>,<span class="built_in">u8</span>) = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//模式匹配</span></span><br><span class="line">    <span class="keyword">let</span> tup1 = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> (x,y,z) = tup1;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>索引,使用点号(.)来访问</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line"><span class="keyword">let</span> x:(<span class="built_in">i32</span>,<span class="built_in">f64</span>,<span class="built_in">u8</span>) = (<span class="number">500</span>,<span class="number">6.4</span>,<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">let</span> five_hundred = x.<span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> six_point_four = x.<span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> one  = x.<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><ul><li><p>Rust中的数组拥有多个固定的长度,一但声明就不能随意改变大小,这与其他语言不同.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//i32是所有元素的类型,5表明有五个元素</span></span><br><span class="line">    <span class="keyword">let</span> a:[<span class="built_in">i32</span>;<span class="number">5</span>] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//等价于let a = [3,3,3,3,3];</span></span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">3</span>;<span class="number">5</span>];</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    another_function(<span class="number">5</span>,<span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">another_function</span></span>(x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span>)&#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is : &#123;&#125;&quot;</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果 The value of x is : 5</span></span><br><span class="line"><span class="comment">//输出结果 The value of x is : 6</span></span><br></pre></td></tr></table></figure><h4 id="函数表达式"><a href="#函数表达式" class="headerlink" title="函数表达式"></a>函数表达式</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">let</span> y = &#123;    <span class="comment">//二.表达式是一个代码块</span></span><br><span class="line">       <span class="keyword">let</span> x = <span class="number">3</span>;   </span><br><span class="line">        x + <span class="number">1</span>      </span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of y is : &#123;&#125;&quot;</span>,y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果 The value of  y is : 4</span></span><br></pre></td></tr></table></figure><p>注意: </p><ul><li><p><code>x+1</code> 后没有添加分号,这与我们之前见过的大多数代码不同,假如我们在表达式的末尾添加上括分号,这一段代码就变成了语句而不会返回任何值.</p></li><li><p>在Rust中函数的返回值等同于函数体的最后一个表达式的值.</p></li></ul><h4 id="函数的返回值"><a href="#函数的返回值" class="headerlink" title="函数的返回值"></a>函数的返回值</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">five</span></span>() -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = five();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果 The value of x is : 5</span></span><br></pre></td></tr></table></figure><p>在以上的five函数中,除了数字5,没有任何其他的函数调用,甚至let 语句,但它在Rust中是一个有效的函数,函数的返回值通过<code>-&gt;i32</code>被指定了.</p><p>但是:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出结果为 The value of x  is : 6;</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> x = plus_one(<span class="number">5</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of x is : &#123;&#125;&quot;</span>,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">plus_one</span></span>(x:<span class="built_in">i32</span>) -&gt; <span class="built_in">i32</span>&#123;</span><br><span class="line">    x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//当给 x+1后加分号后,x+1就变成语句,并非返回值,</span></span><br><span class="line"><span class="comment">//编译器提示错误mismatched types(类型不匹配)</span></span><br><span class="line"><span class="comment">//语句不会产生返回值,返回值后不打分号</span></span><br></pre></td></tr></table></figure><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if表达式"><a href="#if表达式" class="headerlink" title="if表达式"></a>if表达式</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number  = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> number &lt; <span class="number">5</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was true&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;condition was false&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出: condition was true </span></span><br></pre></td></tr></table></figure><ul><li><p>代码表达式必须产生一个bool类型的值,否则就会触发编译错误.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> number &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number was three&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 编译错误, expected type &#x27;bool&#x27;</span></span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">if</span> number != <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number was something other than zero&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多重判断</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="number">6</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">2</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 2&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4,3,or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: number is divisble by 3</span></span><br><span class="line"><span class="comment">//虽然也能被2整除,但是Rust仅会之星第一个条件的代码块,一但满足就不检查剩余的</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>在let 中使用if</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="number">6</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is : &#123;&#125;&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: The value of number is : 5</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>代码块输出的值就是其中最后一个表达式的值,另外,数字本身也可以作为一个表达式使用.</p></li><li><p>所有if的返回值都必须是同一种类型的例如:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> condition = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123;</span><br><span class="line">        <span class="number">5</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="string">&quot;six&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The value of number is : &#123;&#125;&quot;</span>,number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//编译错误,因为else 的返回值是字符串类型,if 的 返回值是 整数</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><ul><li><p>Rust提供了三种循环: loop,while和for.</p><h4 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h4></li><li><p>我们可以使用loop关键字来指示Rust反复执行某一块代码,直到我们退出为止,</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">loop</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果: again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//   again!</span></span><br><span class="line"><span class="comment">//    直到使用Ctrl + c 中断</span></span><br></pre></td></tr></table></figure></li><li><p>从loop循环中返回值</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> counter = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> result  = <span class="keyword">loop</span>&#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span>&#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;The result is &#123;&#125;&quot;</span>,result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果 The result is 20</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> number = <span class="number">3</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">0</span>&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>,number);</span><br><span class="line">        number = number - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果:  3</span></span><br><span class="line"><span class="comment">//      2</span></span><br><span class="line"><span class="comment">//      1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>,<span class="number">50</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> element <span class="keyword">in</span> a.iter()&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is : &#123;&#125;&quot;</span>,element);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line"><span class="comment">//结果: the value is : 10</span></span><br><span class="line"><span class="comment">//     the value is : 20</span></span><br><span class="line"><span class="comment">//     the value is : 30</span></span><br><span class="line"><span class="comment">//     the value is : 40</span></span><br><span class="line"><span class="comment">//     the value is : 50</span></span><br></pre></td></tr></table></figure><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>()&#123;</span><br><span class="line">    <span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev()&#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>,number);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;LIFTOFF!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Hello-Cargo&quot;&gt;&lt;a href=&quot;#Hello-Cargo&quot; class=&quot;headerlink&quot; title=&quot;Hello, Cargo!&quot;&gt;&lt;/a&gt;Hello, Cargo!&lt;/h2&gt;&lt;p&gt;Cargo是Rust工具链中内置的构建系统及包管理器.&lt;/p
      
    
    </summary>
    
    
    
      <category term="Rust" scheme="http://blog.isk.ink/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>git push超时问题解决方法</title>
    <link href="http://blog.isk.ink/2021/05/01/git-push%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
    <id>http://blog.isk.ink/2021/05/01/git-push%E8%B6%85%E6%97%B6%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</id>
    <published>2021-05-01T11:13:14.000Z</published>
    <updated>2021-05-01T12:27:41.985Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>git push经常出现443错误,上传超时.修改多次后只能当时有效,所以解决后来记录下.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h3><p>今天上传要不是443错误,要不就是10054错误,10054产生原因:</p><p> 一般是因为服务的SSL证书没有经过第三方机构的签署.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access &#39;https:&#x2F;&#x2F;github.com&#x2F;.......&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</span><br></pre></td></tr></table></figure><p>一般解决方法是:接触ssl验证后,再次git</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify &quot;false&quot;</span><br></pre></td></tr></table></figure><p>但是这种方法前几次还有效果,但是今天就没用了</p><p>一般和443错误轮流出现.</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>方法一:</p><ul><li><p>如果开启vpn等翻墙工具,或者代理工具全局代理.因为代理的问题会出现上传超时等问题.比如我用的是clash,默认端口号是7890</p></li><li><p>所以在git bash命令中输出以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br><span class="line">git config --global http.proxy 127.0.0.1:7890</span><br></pre></td></tr></table></figure><p>如果你以前已经设置过了上述配置,则使用如下命令取消再进行配置即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset http.proxy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#查看git的http代理设置</span><br><span class="line">git config --global http.proxy</span><br><span class="line">#查看git的https代理设置</span><br><span class="line">git config --global http.proxy</span><br><span class="line">#查看git的所有配置</span><br><span class="line">git config --global -l</span><br></pre></td></tr></table></figure></li></ul><p>方法二:</p><ul><li><p>修改hosts文件,把github的ip特殊照顾</p></li><li><p>打开<a href="https://github.com.ipaddress.com/">https://github.com.ipaddress.com/</a> 记录IP Address</p></li><li><p>打开<a href="https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo记录IP">https://fastly.net.ipaddress.com/github.global.ssl.fastly.net#ipinfo记录IP</a> Address</p></li><li><p>打开<a href="https://github.com.ipaddress.com/assets-cdn.github.com记录IP">https://github.com.ipaddress.com/assets-cdn.github.com记录IP</a> Address,注意这里会有三个,全部记录</p></li><li><p>打开电脑的hosts文件添加到最后,Windows的hosts文件在<code>C:\Windows\System32\drivers\etc</code>里,使用记事本打开,添加到最后</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210501195843.png" alt="image-20210501195836082"></p></li></ul><p>然后使用管理员权限打开Window poweShell输出ipconfig /flushdns</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210501200119.png" alt="image-20210501200048322"></p><p>这时候一般git push就不会出现超时问题了</p><h2 id="附加"><a href="#附加" class="headerlink" title="附加"></a>附加</h2><p>实在不行就换个通道吧.别用https了。墙内墙外http,https通道不仅速度慢，也都有失败风险的。访问不到就返回空了。具体做法如下：</p><p>比如现在你的repo地址是：<br>https: //<a href="https://link.zhihu.com/?target=http%3A//github.com/xxx/xxx.github.io.git">http://github.com/xxx/xxx.github.io.git</a><br>那就把https://换成git@，如下：<br><a href="mailto:git@github.com">git@github.com</a>:xxx/xxx.github.io.git</p><p>xxx是你的github名称。</p><p>方法如下: </p><p>方法一: 通过命令直接修改远程仓库地址,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote #查看所有远程仓库</span><br><span class="line">git remote  xxx #查看指定远程仓库地址,xxx是你远程仓库的地址</span><br><span class="line">git remote set-url origin xxx  #xxx是你新的远程仓库地址</span><br></pre></td></tr></table></figure><p>方法二:先删除在添加你的远程仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git remote rm origin </span><br><span class="line">git remote rm add origin xxx ## xxx是你的远程仓库地址</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;git push经常出现443错误,上传超时.修改多次后只能当时有效,所以解决后来记录下.&lt;/p&gt;
&lt;h2 id=&quot;正文&quot;&gt;&lt;a href=
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://blog.isk.ink/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>浅谈C++ STL的容器</title>
    <link href="http://blog.isk.ink/2021/04/22/%E6%B5%85%E8%B0%88C-STL%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
    <id>http://blog.isk.ink/2021/04/22/%E6%B5%85%E8%B0%88C-STL%E7%9A%84%E5%AE%B9%E5%99%A8/</id>
    <published>2021-04-22T13:08:06.000Z</published>
    <updated>2021-05-14T12:27:22.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>C++ 中有许多好用的容器,在开发和算法中不可缺少.</p><p>首先理解一下,什么是容器,在C++中容器被定义为: 在数据存储上,有一种,对象类型,它可以持有其他对象,或者其他对象的指针,这种对象类型就叫容器.</p><p>容器有个特点就是可以自行扩展.在解决问题中,我们常常不知道我们要存储多少个对象,也就是说,我们不知到应该创建多大的内存空间来保存我们的对象.这里是对比数组,就体现了容器的优势.</p><p>几乎在所有的面向对象的语言中都伴随着一个容器集,在C++中,就是标准模板库(STL).</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h3 id="C-STL之动态数组vector的使用"><a href="#C-STL之动态数组vector的使用" class="headerlink" title="C++ STL之动态数组vector的使用"></a>C++ STL之动态数组vector的使用</h3><p>C++里有一个能完全代替数组的动态数组vector,优点是能在运行阶段设置数组的长度,在末尾增加新的数据,在中间插入新的值,长度任意改变.</p><p>vector,stack,quenue,map,set这些C++容器,都可以使用.size()获取到容器的大小,就像string       s的长度用s.length()获取一样(string其实也可以用s.size(),不过,对于容器我们一般讨论它的大小,字符串一般讨论长度.)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;     <span class="comment">//定义一个vector v1,定义时没有分配大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v1.size();   <span class="comment">//输出vector v1的大小,此处应该为0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//直接定义长度为10的int数组,默认10个元素都为0</span></span><br><span class="line">    <span class="comment">//或者</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;   </span><br><span class="line">    v1.resize(<span class="number">8</span>);      <span class="comment">//先定义一个vector变量v2,然后将长度resize为8,8个元素默认为0;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义的时候就可以对vector变量进行初始化</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">v3</span><span class="params">(<span class="number">100</span>,<span class="number">9</span>)</span></span>; <span class="comment">//将100长度的数组中所有的值都初始化为9</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//访问的时候像数组一样直接用[]下表访问即可~或者迭代器访问</span></span><br><span class="line">    v[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; v[<span class="number">0</span>];</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常用vector方法:</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;    <span class="comment">//注意,定义的时候未指定vector的大小</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这个时候size是0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i ++)&#123;</span><br><span class="line">        a.push_back(i);  <span class="comment">//在vector a 的末尾添加一个元素i;</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; a.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这时候发现a的大小变成了10</span></span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">b</span><span class="params">(<span class="number">15</span>)</span></span>;   <span class="comment">//定义的时候指定vector的大小,默认b里面的元素都是0</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; b.size() &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 输出b的大小发现是15</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i ++)&#123;</span><br><span class="line">        b[i] = <span class="number">15</span>;          <span class="comment">//将每个数都定义为15,原来默认为0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.size(); i ++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//打印出来是15个15 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">c</span><span class="params">(<span class="number">20</span>,<span class="number">2</span>)</span>    <span class="comment">//定义的时候指定vector的大小并把所有的元素夫一个指定的值</span></span></span><br><span class="line"><span class="function">    <span class="title">for</span><span class="params">(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; c.size(),i ++)</span></span>&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; c[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = c.begin(); it != c.<span class="built_in">endl</span>(); it ++)&#123;  <span class="comment">//使用迭代器的方法访问vector,auto相当于vector&lt;int&gt;::iterator</span></span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>; <span class="comment">//访问元素的值要对it指针取值,所以要在前面加星号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-STL之集合set的使用"><a href="#C-STL之集合set的使用" class="headerlink" title="C++STL之集合set的使用"></a>C++STL之集合set的使用</h3><p>set是集合,一个set里面的各元素是各不相同的,而且,set会按照元素进行从大到小排序(自动排序),自动排序利用的是平衡二叉搜索树,也就是红黑树维护.不仅能实现对数字的排序,还能实现对字母的排序(稍后会有演示代码).</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;  <span class="comment">//定义一个空集合s</span></span><br><span class="line">    s.insert(<span class="number">1</span>); <span class="comment">//向集合s里面插入一个1,会自动给你排序</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; *(s.begin()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//输出集合s的第一个元素(前面的星号表示要对指针取值)</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i  = <span class="number">0</span>; i &lt; <span class="number">6</span> ; i ++)&#123;</span><br><span class="line">        s.insert(i);    <span class="comment">//向集合s里面插入i</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用迭代器遍历集合s里面的每一个元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = s.begin(); it != s.end(); it++)&#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;   <span class="comment">//访问元素的值要对it指针取值,所以加星号</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;  <span class="built_in">endl</span> &lt;&lt; (s.find(<span class="number">2</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//查找元素s的值,如果结果等于s.end()表示为找到.(因为s.end()表示s的最后一个元素的下一个元素所在的位置)</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;  (s.find(<span class="number">10</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// s.find(10) != s.end()表示能找到10这个元素.</span></span><br><span class="line">    s.erase(<span class="number">1</span>); <span class="comment">// 删除集合s中的1这个元素</span></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; (s.fine(<span class="number">1</span>) != s.end()) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 这时候元素1就应该找不到了</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>set集合对字母排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; st1;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt;::iterator it1;</span><br><span class="line">    st1.insert(<span class="string">&quot;abc&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;bca&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;ab&quot;</span>);</span><br><span class="line">    st1.insert(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(it1=st1.begin(); it1!=st1.end(); it1++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;*it1&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423100643.png" alt="image-20210423100643852"></p><h2 id="C-STL之栈stack的使用"><a href="#C-STL之栈stack的使用" class="headerlink" title="C++ STL之栈stack的使用"></a>C++ STL之栈stack的使用</h2><p>栈stack在头文件#include<stack>中,是数据结构里面的栈</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; s;   <span class="comment">//定义一个空栈</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span>;i ++)&#123;</span><br><span class="line">        s.push(i);    <span class="comment">//将元素压入栈中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; s.top() &lt;&lt; <span class="built_in">endl</span>;   <span class="comment">//访问s的栈顶元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;s.size() &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//输出s的元素个数</span></span><br><span class="line">   s.pop(); <span class="comment">//移除栈顶元素</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="C-STL之队列quenu的使用"><a href="#C-STL之队列quenu的使用" class="headerlink" title="C++ STL之队列quenu的使用"></a>C++ STL之队列quenu的使用</h2><p>队列queue在头文件#include<quenue>中,是数据结构中的队列</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;   <span class="comment">//定义一个空队列</span></span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++)&#123;</span><br><span class="line">        q.push(i);    <span class="comment">//将i的值依次压入队列q中</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; q.front() &lt;&lt;<span class="string">&quot; &quot;</span> &lt;&lt;q.back() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//访问队列的队首和队尾元素</span></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt;q.size() &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//输出队列的元素个数</span></span><br><span class="line">    q.pop(); <span class="comment">//移除队列的队首元素</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;C++ 中有许多好用的容器,在开发和算法中不可缺少.&lt;/p&gt;
&lt;p&gt;首先理解一下,什么是容器,在C++中容器被定义为: 在数据存储上,有一种
      
    
    </summary>
    
    
    
      <category term="C++ ,STL" scheme="http://blog.isk.ink/tags/C-STL/"/>
    
  </entry>
  
  <entry>
    <title>关于过去一个月的小总结</title>
    <link href="http://blog.isk.ink/2021/04/19/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.isk.ink/2021/04/19/%E5%85%B3%E4%BA%8E%E8%BF%87%E5%8E%BB%E4%B8%80%E4%B8%AA%E6%9C%88%E7%9A%84%E5%B0%8F%E6%80%BB%E7%BB%93/</id>
    <published>2021-04-19T15:16:06.000Z</published>
    <updated>2021-04-23T02:11:33.227Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>过去一个月多,没有更新博客,今天特意回来瞅瞅,原以为我的好友们一定更新了不少文章,结果都在摸鱼. 好家伙!  不过有位大佬的博客 又停了,可能是谈恋爱了.没时间维护,嗯,没错就是这样.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><p>最近去整蓝桥杯算法竞赛去了,不过,我是真的菜,昨天考完,估计省三是没戏了,我莽了,而且白给了.不过不要紧,至少,我还是学到了东西的. 不过也失去了一些,但是问题不大. 忙忙碌碌一个月,也不是没有收获. 而且一个月内 ,没时间学自己感兴趣的东西就有点遗憾.</p><h2 id="关于爱情"><a href="#关于爱情" class="headerlink" title="关于爱情"></a>关于爱情</h2><p>我收到了我初中同桌送的一个手工玩偶,是她亲手做的,她一定是喜欢我(人生十大错觉),不得不说,那个小东西还挺别致,等有时间了,补一张照片,挂在我的小米双肩包上刚刚好. 希望爱情别像算法那么难,要不然我的人生就太过悲惨了,菜鸡和舔狗终将一无所有.    </p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423073917.jpg" alt=""></p><p>我和她应该也算比较好的朋友,嗯…我单方面觉得,毕竟联系比较多(相对其他人来说),类似于友人以上,恋人未满的状态,这种情况,很难抉择,毕竟可能不表白没事,一表白就 :” 好家伙! 我把你当好朋友,你居然想泡我 “ 或者  “其实我也喜欢你很久了! 我们交往吧!”  第二种情况大概率不会发生,所以就错付了.</p><h2 id="关于折腾"><a href="#关于折腾" class="headerlink" title="关于折腾"></a>关于折腾</h2><p>最近在这个显卡价格起飞的时候,我组装了一台电脑,没错,我脑子坏掉了,然而我其实并不需要的,但是就是想捡垃圾.  配置 是 志强 x5645 ,x58丐板, RX 370显卡,8g三星内存条,前前后后大概一千左右,  这里就不得不说,我那颗牛逼的cup, 淘宝22块还包邮,是买主板的时候,咸鱼卖家送我的,用着还不错,至少 作为一个22块的cup它尽力了,万一用了一个星期,报废了,我还能拿来当挂坠,欸嘿,我真是个天才. </p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423074100.jpg" alt=""></p><p> 22块,性价比超级高的好吗?</p><p>洋垃圾真香!</p><p>希望电脑没事,毕竟我花了200软妹币买了好的电源,希望不要爆炸,阿弥陀佛..</p><h2 id="关于老婆"><a href="#关于老婆" class="headerlink" title="关于老婆"></a>关于老婆</h2><p>最近成为了Akie秋绘的粉丝,就是网易云唱歌的那个,在B站直播呢,所以我就去关注了,见人就喊老婆,谁还不是个DD呢?  上一年B站付定金的手办到了,结了尾款,加藤惠老婆真可爱,放在书架上真不错,二次元宅男不好吗? 要什么三次元老婆,不过最近由于忙着上课和准备比赛,所以没有很多时间看动漫和打游戏,所以,现在比赛结束了,适当抽个时间出校门放松下.</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210423073928.jpg" alt=""></p><p>感受下 人间的四月天 , 虽然快五月了,这不重要.</p><h2 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h2><p>最近瘦了不少,脸上的痘痘也没了不少,发际线又高了,依旧是单身,编程还是那么菜,不过买了个小米显示器挂灯,这让最近在电脑前写字舒服了不少.</p><p>爱情依旧没来,</p><p>人生还要继续,</p><p>哪怕我想成为舔狗,</p><p>都没人让我舔,</p><p>没有目标,没有动力,</p><p>我果然是废物.</p><p>感觉怎么不对,原来十二点十分了,网易云综合征犯了,不能写了. 故事不长.也不难讲(bushi)</p><p>下次想起来接着写…..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;过去一个月多,没有更新博客,今天特意回来瞅瞅,原以为我的好友们一定更新了不少文章,结果都在摸鱼. 好家伙!  不过有位大佬的博客 又停了,可
      
    
    </summary>
    
    
    
      <category term="总结" scheme="http://blog.isk.ink/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Linux下使用Clash翻墙</title>
    <link href="http://blog.isk.ink/2021/03/20/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Clash%E7%BF%BB%E5%A2%99/"/>
    <id>http://blog.isk.ink/2021/03/20/Linux%E4%B8%8B%E4%BD%BF%E7%94%A8Clash%E7%BF%BB%E5%A2%99/</id>
    <published>2021-03-20T15:45:44.000Z</published>
    <updated>2021-05-16T05:00:16.596Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于最近在Ubuntu下编程,但是要用到Google搜索,毕竟我是面向浏览器编程,所以解决问题全都要Google,而且进入github也需要翻墙.</p><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>首先 我所使用的是clash小猫咪,个人觉得这个软件比较好用,虽然英文版开始有点不熟悉.</p><ol><li><p>执行 <code>cd &amp;&amp; mkdir clash</code> 在用户目录下创建 clash 文件夹。</p><p>下载适合的 Clash 二进制文件并解压重命名为 <code>clash</code></p><p>一般个人的64位电脑下载 clash-linux-amd64.tar.gz 即可。</p><p>下载clash  <a href="https://github.com/Dreamacro/clash/releases">https://github.com/Dreamacro/clash/releases</a></p></li></ol><p>   <img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321004357.png" alt="image-20210321004350458"></p><ol start="2"><li>解压并运行它代码如下</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo gunzip clash-linux-arm64-v1.4.2.gz   </span><br><span class="line">mv clash-linux-arm64-v1.4.2 clash</span><br><span class="line">chmod +x clash</span><br></pre></td></tr></table></figure><p>对以上代码解释:</p><p>​                第一行: 解压gz文件</p><p>​                第二行: 给文件改名为clash,文件名太长很麻烦</p><p>​                第三行: 给文件权限</p><ol start="3"><li>在终端 <code>cd</code> 到 Clash 二进制文件所在的目录，执行 <code>wget -O config.yml *******************************?clash=1&amp;log-level=info</code> 下载 Clash 配置文件(上面*处是商机给你的链接)<img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321005846.png" alt="image-20210321005846119"></li></ol><p>​    此时会在clash文件下生成config.yml文件,这是配置文件</p><ol start="4"><li><p>在管理员权限下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;clash -d .</span><br></pre></td></tr></table></figure><p>此时出现<img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010135.png" alt="image-20210321010135107"></p></li><li><p>接着使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm config.yaml</span><br></pre></td></tr></table></figure><p>即删除它自动生成的config.yaml配置文件</p><p>再把原来商家给你下载的config.yml文件改名为config.yaml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv config.yml config.yaml</span><br></pre></td></tr></table></figure><p>此时只有三个文件,即clash   和config.yaml 和Country.mmdb</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010534.png" alt="image-20210321010534845"></p></li><li><p>接着再在管理员权限下执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;clash -d .</span><br></pre></td></tr></table></figure></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010731.png" alt="image-20210321010731527"></p><p>如果没有警告那就成功了一半</p><ol start="7"><li><p>在系统设置里面设置网络代理,改为手动 改成下图所演示,一点不差</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321010819.png" alt="img"></p></li><li><p>打开浏览器,输入clash.razord.top</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321011042.png" alt="image-20210321011042174"></p><p>在这里可以测速,和修改节点代理.</p><ol start="9"><li>好了,登录谷歌试试吧</li><li><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210321011234.png" alt="image-20210321011234337"></li></ol></li></ol><p>如果不想代理就把网络代理设置为”已禁用”.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于最近在Ubuntu下编程,但是要用到Google搜索,毕竟我是面向浏览器编程,所以解决问题全都要Google,而且进入github也需要
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://blog.isk.ink/categories/Linux/"/>
    
    
      <category term="Clash" scheme="http://blog.isk.ink/tags/Clash/"/>
    
  </entry>
  
  <entry>
    <title>无界面启动虚拟机通过VScode远程连接</title>
    <link href="http://blog.isk.ink/2021/02/01/%E6%97%A0%E7%95%8C%E9%9D%A2%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
    <id>http://blog.isk.ink/2021/02/01/%E6%97%A0%E7%95%8C%E9%9D%A2%E5%90%AF%E5%8A%A8%E8%99%9A%E6%8B%9F%E6%9C%BA%E9%80%9A%E8%BF%87VScode%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</id>
    <published>2021-02-01T02:01:48.000Z</published>
    <updated>2021-05-07T15:42:55.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前几天突然闲的无聊,看了下自己装的Ubuntu虚拟机,觉得把所有开发环境丢进去,这样无论什么编程语言都能在虚拟机上运行,通过远程连接虚拟机,一个vscode就可以写各种代码,感觉十分方便啊,因为要开虚拟机所以尽量把电脑的负载降到最小,所以选择无界面启动,编程时都是在win10上写代码.也不需要Ubuntu的图形界面.</p><h2 id="无界面启动VMware中的Ubuntu"><a href="#无界面启动VMware中的Ubuntu" class="headerlink" title="无界面启动VMware中的Ubuntu"></a>无界面启动VMware中的Ubuntu</h2><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201100806.png" alt="image-20210201100759409"></p><ul><li>找到上图所示的vmrun.exe所在位置,通过cmd打开</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101009.png" alt="image-20210201101009371"></p><ul><li>再找到你要无界面开启的虚拟机,比如我的Ubuntu 64位.vmx</li></ul><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101105.png" alt="image-20210201101105236"></p><p>在上上图所示的有vmrun的目录前,</p><ul><li>通过命令<code>vmrun -T ws start &quot;E:\VM_2\Ubuntu 64位 .vmx&quot; nogui</code></li></ul><p>无界面启动Ubuntu 64位.vmx,如何判断启动成功呢?输入<code>vmrun  list</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101410.png" alt="image-20210201101410229"></p><p>可以看到,启动的虚拟机数量为1,并列出启动的虚拟机名称</p><p>同样的,关机为<code>vmrun stop &quot;E:\VM_2\Ubuntu 64位 .vmx&quot; hard</code></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20210201101615.png" alt="image-20210201101615730"></p><h3 id="脚本启动"><a href="#脚本启动" class="headerlink" title="脚本启动"></a>脚本启动</h3><p>那么每次启动虚拟机都这么麻烦,有没有快的方法呢?</p><p>当然.可以写个脚本呀</p><p>附上我的代码</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">chcp</span> <span class="number">65001</span></span><br><span class="line"></span><br><span class="line">::<span class="built_in">start</span> vmware </span><br><span class="line"></span><br><span class="line">@<span class="built_in">echo</span> s:<span class="built_in">start</span> vmware p:stop vmware</span><br><span class="line">@<span class="built_in">set</span> /p select=shuru:</span><br><span class="line">@<span class="keyword">if</span> &quot;<span class="variable">%select%</span>&quot; == &quot;s&quot; <span class="keyword">goto</span> <span class="built_in">start</span></span><br><span class="line">@<span class="keyword">if</span> &quot;<span class="variable">%select%</span>&quot; == &quot;p&quot; <span class="keyword">goto</span> stop</span><br><span class="line"></span><br><span class="line">:stop</span><br><span class="line"><span class="function">    E: </span></span><br><span class="line"><span class="function">    <span class="title">cd</span> <span class="title">VM_1</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> <span class="title">stop</span> &quot;<span class="title">E</span>:\<span class="title">VM_2</span>\<span class="title">Ubuntu</span> 64位 .<span class="title">vmx</span>&quot; <span class="title">hard</span></span></span><br><span class="line"><span class="function">    @<span class="title">echo</span> <span class="title">stop</span> <span class="title">succeed</span>!</span></span><br><span class="line"><span class="function">    <span class="title">pause</span></span></span><br><span class="line"><span class="function">    <span class="title">exit</span></span></span><br><span class="line"><span class="function">:<span class="title">start</span></span></span><br><span class="line"><span class="function">    <span class="title">E</span>: </span></span><br><span class="line"><span class="function">    <span class="title">cd</span> <span class="title">VM_1</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> <span class="title">list</span></span></span><br><span class="line"><span class="function">    <span class="title">vmrun</span> -<span class="title">T</span> <span class="title">ws</span> <span class="title">start</span> &quot;<span class="title">E</span>:\<span class="title">VM_2</span>\<span class="title">Ubuntu</span> 64位 .<span class="title">vmx</span>&quot; <span class="title">nogui</span></span></span><br><span class="line"><span class="function">    <span class="title">tasklist</span>|<span class="title">findstr</span> <span class="title">vmware</span></span></span><br><span class="line"><span class="function">    @<span class="title">echo</span> <span class="title">start</span> <span class="title">succeed</span>!</span></span><br><span class="line"><span class="function">    <span class="title">pause</span></span></span><br><span class="line"><span class="function">    <span class="title">exit</span></span></span><br></pre></td></tr></table></figure><p>对以上代码的解释,</p><ul><li><p>chcp 65001  是防止中文乱码,毕竟我有个”64位”,会出现乱码,以防万一</p></li><li><p>s:start vmware p:stop vmware   输入s,执行start后的所有命令,包括从C盘进入E盘.进入文件夹VM_1,输入p关闭虚拟机,只是将上面的许多DOS命令集合到一起运行.</p></li></ul><p>使用方法:</p><ul><li>在桌面上新建文件夹,改为bat后缀,把以上内容复制上去,自行修改内容,文件地址等.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前几天突然闲的无聊,看了下自己装的Ubuntu虚拟机,觉得把所有开发环境丢进去,这样无论什么编程语言都能在虚拟机上运行,通过远程连接虚拟机,
      
    
    </summary>
    
    
    
      <category term="VS code Linux" scheme="http://blog.isk.ink/tags/VS-code-Linux/"/>
    
  </entry>
  
  <entry>
    <title>Vim备忘录</title>
    <link href="http://blog.isk.ink/2021/01/12/Vim%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    <id>http://blog.isk.ink/2021/01/12/Vim%E5%A4%87%E5%BF%98%E5%BD%95/</id>
    <published>2021-01-12T01:35:28.000Z</published>
    <updated>2021-02-04T03:13:56.393Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vim备忘单"><a href="#Vim备忘单" class="headerlink" title="Vim备忘单"></a>Vim备忘单</h1><h2 id="全局"><a href="#全局" class="headerlink" title="全局"></a>全局</h2><ul><li><strong>:h[elp]</strong> <strong>关键字</strong> - 打开关键字帮助</li><li><strong>:sav[eas]</strong> <strong>文件名</strong> - 另存为</li><li><strong>:clo[se]</strong> - 关闭当前窗口</li><li><strong>:ter[minal]</strong> -打开终端窗口</li><li><strong>K</strong> - 打开光标所在单词的man页面</li></ul><p><strong>提示**</strong>vimtutor**在终端上运行以学习第一个Vim命令。</p><h2 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h2><ul><li><strong>h</strong> - 左移光标</li><li><strong>j</strong> - 下移光标</li><li><strong>k</strong> - 上移光标</li><li><strong>l</strong> - 右移光标</li><li><strong>H</strong> - 移动到当前页面顶部</li><li><strong>M</strong> - 移动到当前页面中间</li><li><strong>L</strong> - 移动到当前页面底部</li><li><strong>w</strong> - 移动到下个单词开头</li><li><strong>W</strong> - 移动到下个单词开头(单词含标点)</li><li><strong>e</strong> - 移动到下个单词结尾</li><li><strong>E</strong> - 移动到下个单词结尾(单词含标点)</li><li><strong>b</strong> - 移动到上个单词开头</li><li><strong>B</strong> - 移动到上个单词开头(单词含标点)</li><li><strong>%</strong> - 跳转到配对的符号(默认支持的配对符号组:: ‘()’,     ‘{}’, ‘[]’ - 在vim中使用 :h matchpairs 获得更多信息)</li><li><strong>0</strong> - 移动到行首</li><li><strong>^</strong> - 移动到行首的非空白符</li><li><strong>$</strong> - 移动到行尾</li><li><strong>g_</strong> - 移动到行内最后一个非空白符</li><li><strong>gg</strong> - 移动到文件第一行</li><li><strong>G</strong> - 移动到文件最后一行</li><li><strong>5gg</strong> or <strong>5G</strong> - 移动到第五行</li><li><strong>fx</strong> - 移动到字符 x 下次出现的位置</li><li><strong>tx</strong> - 移动到字符 x 下次出现的位置的前一个字符</li><li><strong>Fx</strong> - 移动到字符 x 上次出现的位置</li><li><strong>Tx</strong> - 移动到字符 x 上次出现的位置的后一个字符</li><li><strong>;</strong> - 重复之前的f、t、F、T操作</li><li><strong>,</strong> - 反向重复之前的f、t、F、T操作</li><li><strong>}</strong> - 移动到下一个段落 (当编辑代码时则为函数／代码块)</li><li><strong>{</strong> - 移动到上一个段落 (当编辑代码时则为函数／代码块)</li><li><strong>zz</strong> - 移动屏幕使光标居中</li><li><strong>Ctrl</strong> + <strong>e</strong> - 向下移动屏幕一行(保持光标不动)</li><li><strong>Ctrl</strong> + <strong>y</strong> - 向上移动屏幕一行(保持光标不动)</li><li><strong>Ctrl</strong> + <strong>b</strong> - 向上滚动一屏</li><li><strong>Ctrl</strong> + <strong>f</strong> - 向下滚动一屏</li><li><strong>Ctrl</strong> + <strong>d</strong> - 向下滚动半屏</li><li><strong>Ctrl</strong> + <strong>u</strong> - 向上滚动半屏</li></ul><p><strong>Tip</strong> 命令前追加数字表示命令的重复次数, 比如 <strong>4j</strong> 表示向下移动四行</p><h3 id="插入模式-插入-追加文本"><a href="#插入模式-插入-追加文本" class="headerlink" title="插入模式 - 插入/追加文本"></a>插入模式 - 插入/追加文本</h3><ul><li><p><strong>i</strong> - 从光标前开始插入字符</p></li><li><p><strong>I</strong> - 从行首开始插入字符</p></li><li><p><strong>a</strong> - 从光标后开始插入字符</p></li><li><p><strong>A</strong> - 从行尾开始插入字符</p></li><li><p><strong>o</strong> - 在当前行之下另起一行, 开始插入字符</p></li><li><p><strong>O</strong> - 在当前行之上另起一行, 开始插入字符</p></li><li><p><strong>ea</strong> - 从当前单词末尾开始插入</p></li><li><p><strong>Ctrl</strong> + <strong>h</strong> - 在插入模式下，删除光标前的字符</p></li><li><p><strong>Ctrl</strong> + <strong>w</strong> - 在插入模式下，删除光标前的单词</p></li><li><p><strong>Ctrl</strong> + <strong>j</strong> - 在插入模式下，另起一行</p></li><li><p><strong>Ctrl</strong> + <strong>t</strong> - 在插入模式下，向右缩进，宽度由 shiftwidth 控制</p></li><li><p><strong>Ctrl</strong> + <strong>d</strong> - 在插入模式下，向左缩进，宽度由 shiftwidth 控制</p></li><li><p><strong>Ctrl</strong> + <strong>n</strong> - 在插入模式下，在光标之前插入自动补全的下一个匹配项</p></li><li><p><strong>Ctrl</strong> + <strong>p</strong> - 在插入模式下，在光标之前插入自动补全的上一个匹配项</p></li><li><p><strong>Ctrl</strong>+ <strong>rx</strong>-插入寄存器x的内容</p></li><li><p><strong>Esc</strong> - 退出插入模式</p></li><li><p>222<strong>r</strong> - 替换当前字符</p></li><li><p><strong>J</strong> - 将下一行合并到当前行, 并在两部分文本之间插入一个空格</p></li><li><p><strong>gJ</strong> - 将下一行合并到当前行, 两部分文本之间不含空格</p></li><li><p><strong>gwip</strong> - 重新调整段落</p></li><li><p><strong>gu</strong> -更改为小写字母</p></li><li><p><strong>gU</strong> -更改为大写字母</p></li><li><p><strong>cc</strong> - 将光标所在的行删除, 然后进入插入模式</p></li><li><p><strong>C</strong> - 将光标处到行尾删除, 然后进入插入模式</p></li><li><p><strong>c$</strong> - 将光标处到行尾删除, 然后进入插入模式</p></li><li><p><strong>ciw</strong> - 将光标所在的单词删除, 然后进入插入模式</p></li><li><p><strong>cw</strong> - 从光标位置开始, 修改单词</p></li><li><p><strong>s</strong> - 删除当前字符, 然后进入插入模式</p></li><li><p><strong>S</strong> - 清空当前行, 然后进入插入模式 (同<kbd>cc</kbd>)</p></li><li><p><strong>xp</strong> - 当前字符后移</p></li><li><p><strong>u</strong> - 撤销</p></li><li><p><strong>U</strong> -恢复（撤消）上次更改的行</p></li><li><p><strong>Ctrl</strong> + <strong>r</strong> - 重复</p></li><li><p><strong>.</strong> - 再次执行上个命令</p></li></ul><h3 id="选择文本（可视化模式）"><a href="#选择文本（可视化模式）" class="headerlink" title="选择文本（可视化模式）"></a>选择文本（可视化模式）</h3><ul><li><strong>v</strong> - 进入可视化模式, 移动光标高亮选择, 然后可以对选择的文本执行命令(比如<kbd>y</kbd>-复制)</li><li><strong>V</strong> - 进入可视化模式(行粒度选择)</li><li><strong>o</strong> - 切换光标到选择区开头/结尾</li><li><strong>Ctrl</strong> + <strong>v</strong> - 进入可视化模式(矩阵选择)</li><li><strong>O</strong> - 切换光标到选择区的角</li><li><strong>aw</strong> - 选择当前单词</li><li><strong>ab</strong> - 选择被 () 包裹的区域(含括号)</li><li><strong>aB</strong> - 选择被 {} 包裹的区域(含花括号)</li><li><strong>at</strong> - 选择被 &lt;&gt; 标签包裹的区域(含&lt;&gt;标签)</li><li><strong>ib</strong> - 选择被 () 包裹的区域(不含括号)</li><li><strong>iB</strong> - 选择被 {} 包裹的区域(不含花括号)</li><li><strong>it</strong> - 选择被 &lt;&gt; 标签包裹的区域(不含&lt;&gt;标签)</li><li><strong>Esc</strong> - 退出可视化模式</li></ul><p><strong>Tip</strong> 也可以使用 <strong>(</strong> 和 <strong>{</strong> 分别代替 <strong>b</strong> 和 <strong>B</strong></p><h2 id="可视化模式命令"><a href="#可视化模式命令" class="headerlink" title="可视化模式命令"></a>可视化模式命令</h2><ul><li><strong>&gt;</strong> - 向右缩进</li><li><strong>&lt;</strong> - 向左缩进</li><li><strong>y</strong> - 复制</li><li><strong>d</strong> - 剪切</li><li><strong>~</strong> - 大小写切换</li><li><strong>u</strong> - 将选中文本转换为小写</li><li><strong>U</strong> - 将选中文本转换为大写</li></ul><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><ul><li><strong>:reg[isters]</strong> - 显示寄存器内容</li><li><strong>“xy</strong> - 复制内容到寄存器 x</li><li><strong>“xp</strong> - 粘贴寄存器 x 中的内容</li><li><strong>“+y</strong> - 复制内容到系统剪贴板寄存器</li><li><strong>“+p</strong> - 粘贴系统剪贴板寄存器的内容</li></ul><p><strong>Tip</strong> 寄存器被存储在 ~/.viminfo 中, 在下次重启vim时仍会加载</p><p><strong>Tip</strong> 特殊寄存器：</p><p> <strong>0</strong> - 上次复制<br> <strong>“</strong> - 未命名寄存器，上次复制或删除<br> <strong>%</strong> - 当前文件名<br> <strong>#</strong> - 轮换文件名<br> <strong>*** - 剪贴板内容 (X11 primary)<br> **+</strong> - 剪贴板内容 (X11 clipboard)<br> <strong>/</strong> - 上次搜索的pattern<br> <strong>:</strong> - 上次执行的命令<br> <strong>.</strong> - 上次插入的文本<br> <strong>-</strong> - 上次剪切的短于一行的文本<br> <strong>=</strong> - 表达式寄存器<br> <strong>_</strong> - 黑洞寄存器</p><h2 id="标记"><a href="#标记" class="headerlink" title="标记"></a>标记</h2><ul><li><strong>:marks</strong> - 标记列表</li><li><strong>ma</strong> - 设置当前位置为标记 a</li><li><strong>`a</strong> - 跳转到标记 a 的位置</li><li><strong>y`a</strong> - 复制当前位置到标记 a 的内容</li><li><strong>`0</strong> -转到先前退出Vim的位置</li><li><strong>`”</strong> -转到最后编辑此文件的位置</li><li><strong>`.</strong> -转到此文件中最后更改的位置</li><li><strong>``</strong> -跳到最后一跳之前的位置</li><li><strong>:ju[mps]</strong> -跳跃清单</li><li><strong>Ctrl</strong>+ <strong>i</strong>-跳转到跳转列表中的较新位置</li><li><strong>Ctrl</strong>+ <strong>o</strong>-在跳转列表中转到较旧的位置</li><li><strong>:changes</strong> -变更清单</li><li><strong>g,</strong> -转到更改列表中的较新位置</li><li><strong>g;</strong> -转到更改列表中的较旧位置</li><li><strong>Ctrl</strong>+ <strong>]</strong>-跳至光标下方的标签</li></ul><p><strong>提示</strong>要跳至标记，可以使用反引号（<strong>`</strong>）或撇号（<strong>‘</strong>）。使用撇号将跳转到持有该标记的行的开头（第一个非黑色）。</p><h2 id="宏"><a href="#宏" class="headerlink" title="宏"></a>宏</h2><ul><li><strong>qa</strong> - 录制宏 a</li><li><strong>q</strong> - 停止录制宏</li><li><strong>@a</strong> - 执行宏 a</li><li><strong>@@</strong> - 重新执行上次执行的宏</li></ul><h2 id="剪切-复制-粘贴"><a href="#剪切-复制-粘贴" class="headerlink" title="剪切, 复制, 粘贴"></a>剪切, 复制, 粘贴</h2><ul><li><strong>yy</strong> - 复制当前行</li><li><strong>2yy</strong> - 复制 2 行</li><li><strong>yw</strong> - 复制当前单词</li><li><strong>y$</strong> - 复制, 从光标位置到行末</li><li><strong>p</strong> - 在光标后粘贴</li><li><strong>P</strong> - 在光标前粘贴</li><li><strong>dd</strong> - 剪切当前行</li><li><strong>2dd</strong> - 剪切 2 行</li><li><strong>dw</strong> - 剪切当前单词</li><li><strong>D</strong> - 剪切, 从光标位置到行末</li><li><strong>d$</strong> - 剪切, 从光标位置到行末 (同<kbd>D</kbd>)</li><li><strong>x</strong> - 剪切当前字符</li></ul><h2 id="文字缩进"><a href="#文字缩进" class="headerlink" title="文字缩进"></a>文字缩进</h2><ul><li><strong>&gt;&gt;</strong> - 将当前行向右缩进，宽度由 shiftwidth 控制</li><li><strong>&lt;&lt;</strong> - 将当前行向左缩进，宽度由 shiftwidth 控制</li><li><strong>&gt;%</strong> - 向右缩进 () 或 {} 内的区域 (光标需置于括号上)</li><li><strong>&gt;ib</strong> - 向右缩进 () 内的区域</li><li><strong>&gt;at</strong> - 向右缩进 &lt;&gt; 标签内的区域</li><li><strong>3==</strong> - 自动缩进 3 行</li><li><strong>=%</strong> - 自动缩进 () 或 {} 内的区域 (光标需置于括号上)</li><li><strong>=iB</strong> - 自动缩进 {} 内的区域 (光标需置于括号上)</li><li><strong>gg=G</strong> - 自动缩进整个缓冲区</li><li><strong>]p</strong> - 粘贴并调整缩进至当前行</li></ul><h2 id="退出"><a href="#退出" class="headerlink" title="退出"></a>退出</h2><ul><li><strong>:w</strong> - 保存</li><li><strong>:w !sudo tee %</strong> - 使用 sudo 保存当前文件</li><li><strong>:wq</strong> or <strong>:x</strong> or <strong>ZZ</strong> - 保存并退出</li><li><strong>:q</strong> - 退出(修改未保存时警告)</li><li><strong>:q!</strong> or <strong>ZQ</strong> - 不保存强制退出</li><li><strong>:wqa</strong> - 保存所有标签页并全部退出</li></ul><h2 id="查找-替换"><a href="#查找-替换" class="headerlink" title="查找/替换"></a>查找/替换</h2><ul><li><strong>/pattern</strong> - 查找<kbd>pattern</kbd></li><li><strong>?pattern</strong> - 向上查找<kbd>pattern</kbd></li><li><strong>\vpattern</strong> - <kbd>pattern</kbd> 中的非字母数字字符被视为正则表达式特殊字符 (不需转义字符)</li><li><strong>n</strong> - 查找下一个</li><li><strong>N</strong> - 查找上一个</li><li><strong>:%s/old/new/g</strong> - 替换全部</li><li><strong>:%s/old/new/gc</strong> - (逐个)替换</li><li><strong>:noh[lsearch]</strong> - 移除搜索结果的高亮显示</li></ul><h2 id="多文件搜索"><a href="#多文件搜索" class="headerlink" title="多文件搜索"></a>多文件搜索</h2><ul><li><strong>:vim[grep] /pattern/ {<code>&#123;file&#125;</code>}</strong> - 在多个文件中搜索 <kbd>pattern</kbd></li></ul><p>例如 <strong>:vim[grep] /foo/ \</strong>/***</p><ul><li><strong>:cn[ext]</strong> - 移动至下一个</li><li><strong>:cp[revious]</strong> - 移动至上一个</li><li><strong>:cope[n]</strong> - 打开搜索结果列表</li><li><strong>:ccl[ose]</strong> -关闭快速修复窗口</li></ul><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><ul><li><strong>:tabnew</strong> or <strong>:tabnew {page.words.file}</strong> - 在新标签中打开文件</li><li><strong>Ctrl</strong> + <strong>wT</strong> - 将窗口变成标签</li><li><strong>gt</strong> or <strong>:tabn[ext]</strong> - 切换到下一个标签</li><li><strong>gT</strong> or <strong>:tabp[revious]</strong> - 切换到上一个标签</li><li><strong>#gt</strong> - 切换到第 <kbd>#</kbd> 个标签</li><li><strong>:tabm[ove] #</strong> - 移动标签到第 <kbd>#</kbd> 位(下标从 0 开始)</li><li><strong>:tabc[lose]</strong> - 关闭当前标签</li><li><strong>:tabo[nly]</strong> - 关闭其他标签</li><li><strong>:tabdo</strong> command - 在所有标签中执行命令 (例如 <strong>:tabdo q</strong> 关闭所有标签)</li></ul><h2 id="多文件编辑"><a href="#多文件编辑" class="headerlink" title="多文件编辑"></a>多文件编辑</h2><ul><li><strong>:e[dit]</strong> <strong>文件名</strong> - 新建缓冲区打开 filename</li><li><strong>:bn[ext]</strong> - 切换到下个缓冲区</li><li><strong>:bp[revious]</strong> - 切换到上个缓冲区</li><li><strong>:bd[elete]</strong> - 关闭缓冲区</li><li><strong>:b[uffer]#</strong> -通过＃进入缓冲区</li><li><strong>:b[uffer] file</strong> -按文件转到缓冲区</li><li><strong>:ls</strong> or <strong>:buffers</strong> - 列出所有打开的缓冲区</li><li><strong>:sp[lit]</strong> <strong>文件名</strong> - 新建缓冲区打开 filename 并水平分割窗口</li><li><strong>:vs[plit]</strong> <strong>文件名</strong> - 新缓冲区打开 filename 并垂直分割窗口</li><li><strong>:vert[ical] ba[ll]</strong> -将所有缓冲区编辑为垂直窗口</li><li><strong>:tab ba[ll]</strong> -将所有缓冲区编辑为选项卡</li><li><strong>Ctrl</strong> + <strong>ws</strong> - 水平分割窗口</li><li><strong>Ctrl</strong> + <strong>wv</strong> - 垂直分割窗口</li><li><strong>Ctrl</strong> + <strong>ww</strong> - 在窗口间切换</li><li><strong>Ctrl</strong> + <strong>wq</strong> - 关闭窗口</li><li><strong>Ctrl</strong>+ <strong>wx</strong>-与下一个交换当前窗口</li><li><strong>Ctrl</strong>+ <strong>w=</strong>-使所有窗口的高度和宽度相等</li><li><strong>Ctrl</strong> + <strong>wh</strong> - 切换到左侧窗口</li><li><strong>Ctrl</strong> + <strong>wl</strong> - 切换到右侧窗口</li><li><strong>Ctrl</strong> + <strong>wj</strong> - 切换到下侧窗口</li><li><strong>Ctrl</strong> + <strong>wk</strong> - 切换到上侧窗口</li></ul><h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><ul><li><strong>zf</strong> -手动定义向上折叠</li><li><strong>zd</strong> -删除光标下方的折叠</li><li><strong>za</strong> -在光标下方切换折叠</li><li><strong>zo</strong> -在光标下方打开折叠</li><li><strong>zc</strong> -光标下方折叠</li><li><strong>zr</strong> -将所有折叠减少（打开）一级</li><li><strong>zm</strong> -折叠更多（关闭）所有折叠一级</li><li><strong>zi</strong> -切换折叠功能</li><li><strong>]c</strong> -跳转到下一个更改的开始</li><li><strong>[c</strong> -跳至上一个更改的开始</li><li><strong>do</strong>或<strong>:diffg[et]</strong>-从其他缓冲区获取（获取）差异</li><li><strong>dp</strong>或<strong>:diffpu[t]</strong>-存入差额（至其他缓冲区）</li><li><strong>:diffthis</strong> -使当前窗口成为差异的一部分</li><li><strong>:dif[fupdate]</strong> -更新差异</li><li><strong>:diffo[ff]</strong> -关闭当前窗口的差异模式</li></ul><p><strong>提示</strong>折叠命令（例如<strong>za</strong>）在一级上操作。要在所有级别上操作，请使用大写字母（例如<strong>zA</strong>）。</p><p><strong>提示</strong>要查看文件的差异，可以通过<strong>vimdiff</strong>在终端上运行来直接在diff模式下启动Vim 。甚至可以将其设置为<strong>git difftool</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Vim备忘单&quot;&gt;&lt;a href=&quot;#Vim备忘单&quot; class=&quot;headerlink&quot; title=&quot;Vim备忘单&quot;&gt;&lt;/a&gt;Vim备忘单&lt;/h1&gt;&lt;h2 id=&quot;全局&quot;&gt;&lt;a href=&quot;#全局&quot; class=&quot;headerlink&quot; title=&quot;全局&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Vim" scheme="http://blog.isk.ink/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>我的2020年度总结</title>
    <link href="http://blog.isk.ink/2021/01/04/%E6%88%91%E7%9A%842020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
    <id>http://blog.isk.ink/2021/01/04/%E6%88%91%E7%9A%842020%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</id>
    <published>2021-01-04T14:51:04.000Z</published>
    <updated>2021-02-04T03:12:53.186Z</updated>
    
    <content type="html"><![CDATA[<p>  光阴荏苒，日月如梭,一晃匆匆又是一年.</p><p>2020是我人生重要的转折点.我呆在里整整半年.也在暑假体验了真正的人情世故.学到了许多东西,也认识了更广阔的世界.</p><h2 id="春季"><a href="#春季" class="headerlink" title="春季"></a>春季</h2><p>2020的春节可以说是一切的开始,从学校听到肺炎的开始,我并没有重视这个东西,以为就几个人,很容易控制,可是它却出乎所有人的预料.从学校回到家里,一切的一切都是那么普通,见了几个从小认识的朋友,都没有什么变化.</p><p>现在看来当时我所做的最正确的决定就是,在快递彻底停运前买了两张无限流量卡,这个卡成了我半年内所有的流量来源(我家并没有WIFI,因为我不在家就没办),40块一个月,每天都是手机给笔记本电脑开热点.当时买了两张,另一张给了我一个朋友.每天看直播,看视频,玩游戏,学编程的所有网络来源都来源于这一张小小的流量卡.真不敢想想如果我当时没有买这张卡,等春节快递停运,可能我的网课,和我上半年所有的娱乐都过的小心翼翼,而快递业务直到5月份才恢复.</p><p>因为这时学校也觉得疫情很快就会过去,所以当时还没有全面上网课,只是把一些水课上一上,这也给了我们许多时间去做一些自己的爱好.</p><p>从这时起,我决定这个学校教的东西并不是我想要的那种效果,学了一年软件工程,结果写不出任何东西,基本磨灭了我对计算机的热爱,我以前大概是小学的时候,特别喜欢数学 ,大概是初一的时候,遇到一个老师,教的特别敷衍,根本感受不到任何意义,慢慢的,就失去了对这个学科的热爱,到初二也就成绩平平,我认为也有我的原因,在大学也是这种感觉,我不想再重复这个磨灭热爱的过程,所以我在那段时间开始深入了解IT行业,我以前在高中时,认为已经足够了解了,才选择这个专业,现在发现当时好像什么都不懂,还好没有选错道路.在这个春天,看了许多大佬的视频,都是关于这个行业的发展,包括用什么编程语言能干什么事 ,学习路线,当时看了B站程序羊(CodeSheep)的视频,决定先弄个博客,毕竟前端好入门.</p><p>自己从零开始学习各种东西,首先学会的 就是翻墙,即学会用谷歌,因为国家禁止,所以平时只在手机上去谷歌,推特看看,我在Youtube上找到了别人的翻墙教程,学着在windows电脑上安装使用,感谢那些人一步一步的操作,让我了解了当时我认为很复杂的软件V2ray(现在玩的很溜),买了个速度快的节点,终于不再用老王VPN那个无聊的翻墙软件了.虽然那个开发者是个佛系的人,完全免费,但是就是不好用.我从那时开始上推特,认识了很多大佬,包括阿里P7等很多优秀的程序员,他们每天分享的东西也让我受益匪浅,认识了和我一样年纪的编程大佬,才知道有那么多优秀的同龄人.我也开始向他们学习.</p><p>我很喜欢一首禅诗.</p><p>沿着这样一条道路:</p><p>关注大师,</p><p>跟随大师,</p><p>与大师同行,</p><p>洞察大师,</p><p>成为大师. </p><p>继续说博客哈,当时我就看着CodeSheep的视频自己跟着做,遇到很多问题就在谷歌上查找,不得不说,谷歌真好用.在建博客的同时,遇到了很多朋友,像<code>邢家辉大佬</code>.简直是太他妈牛逼了,我要是女的,我差点就爱上他了.在搭建博客的过程中,也学会了独立解决问题的能力,当时,完全没有任何编程经历,C语言都算学到不好,建博客花了3天才算建好,后来又发现了许多好看的主题,加了一个群开始和一些志同道合的大佬一起聊天.</p><p>建起一个博客并没有花很多时间,在博客的完善中才是真要命,总是会出各种问题,很多都在邢家辉大佬的帮助下解决了,但是很多问题就只能自己去解决了,当时一个问题我可能要花两天时间去解决,因为没有任何经验,后来是真佩服当时的我,还记得那时好几次都想砸电脑,终于懂了,代码本地没问题是一码事,上传上去就看玄学了.</p><p>后来那个春天真的学了很多东西,除了狗娘养的数据结构没学明白,还有线性代数.开学考试没挂科真是谢天谢地了.</p><p>当时学了很多东西,看了半本C primer plus和半本大话数据结构,看了一些C++的视频,git的使用,和DOS命令,后来装了给虚拟机,在虚拟机里学习C语言,学了点Linux,最多的还是前端的处理流程,在慕课网上,学了C的一些东西.也把以前学过的JAVA捡起来一部分,高三毕业后因为兴趣学过一段时间JAVA,但是并不成体系,所以又学了一遍.</p><p>写了几篇博客,重点写了虚拟机的一些东西.</p><h2 id="夏季"><a href="#夏季" class="headerlink" title="夏季"></a>夏季</h2><p>我人生中干的最蠢的事就是在那个暑假去打工当保安.去深圳当了一个月保安,赚了三千多,但失去了更多.</p><p>前半个月上白班,在别人小区门口量体温,太无聊了,条件艰苦,沥青路面上一站站一天,测温枪除了早上能用基本其他任何时候都是43度爆表,量了个寂寞,但是更恶心的是还有人随机过来偷偷看你有没有好好工作,发现一次一天的工资就没了,一次扣一百.还容易得罪人,唯一学到了的东西就是,越是有钱的人(开宝马奥迪的),越容易心平气和的过来主动检查,越是没钱的,你拦他他还不停直接向我撞过来,大多是开一些比较次的车的,比如五菱宏光和摩托,电动车.有钱人的一些涵养确实不同,我一个小保安也得罪不起人,况且是在”异国他乡”,明白了一个道理,有钱人之所以有钱,是因为有高的涵养高的能力,并不会因为你是一个保安就不尊重你的工作,尊重他人,才会有好的人缘,有更多成功的机会.很多时候,大多是下午一点最热的时候,那时没什么人进出,大多是清洁工阿姨叔叔坐在我哪里和我聊天,我有一个遮阳棚,我那里的水是免费的,所以我会打给他们喝,大多他们都不愿意,他们带的也有水,和他们聊家常,也理解了很多人的不容易,我以为我那个保安已经够惨了,一个月3000多,完全不需要什么技术含量,清洁工还不如我,聊到他们的孩子,大多都在上学,叔叔阿姨大多都是来自贵州湖南这些地方,见识颇多.</p><p>实在是没得意义去干了半个月夜班,转到了高速公路路口,这他妈真是我噩梦的开始.我觉得白天很热转到晚上可能会好一点,日了狗了,高速路口,车非常多,一个小时等于我在小区门口一上午的工作量,而且是晚上,八点上班,第二天8点下班,不能睡觉,而且会有生命危险.站在一个地方不停重复一个动作,等他们开车窗,伸手,关车窗.晚上很困不能睡觉是真的难顶,我来后一个星期不到,我有个同事猝死了,40多岁,也是上夜班,不过我在高速路口他在另一个路口,具体是哪里就不清楚了.</p><p>那段时间很幸苦,白天我又不想睡觉,想去上网打游戏,深圳的网吧比我老家网费便宜太多了,配置还好,这能忍?所以基本白天就睡四个小时就去上网,晚上一直站着睡不着特难受,不过后来还好.</p><p>那段时间我特别飘,就没有我不敢拦的车,我管你什么宝马奔驰玛莎拉蒂,最飘的是我拦了不少警车,好家伙够我吹一年的,后来领导实在看不下去了,说让我别拦了,印象最深的是,我半夜拦的一辆奔驰,那个漂亮的女司机给了我一瓶红牛还是乐虎,忘记了,而且她副驾驶上的女儿特别好看(完了暴露我是lsp了),不过当时困得要死,也没怎么在意.</p><p>干了一个月,八月回到家,不想干了,回家继续开始我上半年的无聊生活,但是由于我去了深圳一个月,也把上半年学到东西忘记的差不多了,所以那段时间基本没学到什么东西,就是把博客整理了一下,水了几篇博文.</p><p>那个八月,也是我印象特别深刻的八月,我从来没有在一段时间,一个晚上,真正去做自己想做的事情,看一整晚的星星,天文学,也算我的一个爱好之一,我能清楚的记下来天空中的八十八个星座,而且能在天气好的情况下认出他们,我最喜欢的科学家之一南仁东,他有一首诗我特别喜欢,上高三时看到了南仁东传,从此特别喜欢这个科学家,他有一首诗,是赞美中国五百米口径设点望远镜(天眼fast)的,我现在还会背.</p><p><code>春雨催醒期待的嫩绿,夏露折射万物的欢歌,秋风编制七色锦缎,冬日里的生命乐章延续着它的优雅.大窝凼,大窝凼;时刻给我们惊喜,让我们惊奇.</code> </p><p><code>感官安宁,万籁无声,美丽的宇宙太空,以它的神秘和绚丽,召唤我们踏过平庸,进入到广袤的无垠.-----南仁东</code></p><h2 id="秋季"><a href="#秋季" class="headerlink" title="秋季"></a>秋季</h2><p>开学季,那时一个悲伤的九月,开学考试,还好没挂科.</p><p>开的全是无聊的课,JAVA也没学到什么,全是我自学的东西,web课学会了切图,难怪一些人把前端工程师叫做前端切图仔.</p><p>这段时间基本没弄过博客了,但是,自己又看了一边JAVA的视频,这次整理了笔记,和HTML+CSS的学习笔记.</p><h2 id="没写完-继续更新"><a href="#没写完-继续更新" class="headerlink" title="没写完,继续更新"></a>没写完,继续更新</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  光阴荏苒，日月如梭,一晃匆匆又是一年.&lt;/p&gt;
&lt;p&gt;2020是我人生重要的转折点.我呆在里整整半年.也在暑假体验了真正的人情世故.学到了许多东西,也认识了更广阔的世界.&lt;/p&gt;
&lt;h2 id=&quot;春季&quot;&gt;&lt;a href=&quot;#春季&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Git配置SSH Key</title>
    <link href="http://blog.isk.ink/2020/12/14/Git%E9%85%8D%E7%BD%AESSH-Key/"/>
    <id>http://blog.isk.ink/2020/12/14/Git%E9%85%8D%E7%BD%AESSH-Key/</id>
    <published>2020-12-14T13:35:10.000Z</published>
    <updated>2020-12-14T14:01:25.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>设置git的user name和email</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Yaoguang161&quot;</span><br><span class="line">git config --global user.email &quot;yaoguang161@outlook.com&quot;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>生成ssh key</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;yaoguang161@outlook.com&quot;&#x2F;&#x2F;这里填你设置的邮箱地址</span><br></pre></td></tr></table></figure><p>接着出现： Generating pulbic/private rsa key pair</p><p>​                    Enter file in which to save the key</p><p>然后一直回车</p><p>系统会在用户目录下生成ssh文件</p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214427.png" alt="image-20201214214427300"></p></li><li><p>打开github，登录你的账户，进入设置</p></li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214517.png" alt="image-20201214214517870"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214536.png" alt="image-20201214214536399"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214553.png" alt="image-20201214214553588"></p><ol start="5"><li><p>将id_rsa.pub用记事本打开，复制粘贴到ssh key里</p></li><li><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214214820.png" alt="image-20201214214820879"></p></li><li><p>然后在git中输入命令：</p><p>ssh -T <a href="mailto:git@github.com">git@github.com</a></p><p>然后蹦出一堆话</p><p>输入命令：yes</p><p>回车</p><p>然后就成功了</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;步骤&quot;&gt;&lt;a href=&quot;#步骤&quot; class=&quot;headerlink&quot; title=&quot;步骤&quot;&gt;&lt;/a&gt;步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置git的user name和email&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;ta
      
    
    </summary>
    
    
    
      <category term="git" scheme="http://blog.isk.ink/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>控制台输出乱码问题</title>
    <link href="http://blog.isk.ink/2020/12/14/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>http://blog.isk.ink/2020/12/14/%E6%8E%A7%E5%88%B6%E5%8F%B0%E8%BE%93%E5%87%BA%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/</id>
    <published>2020-12-14T13:24:54.000Z</published>
    <updated>2020-12-14T14:02:34.080Z</updated>
    
    <content type="html"><![CDATA[<p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201214212616.png" alt="image-20201214212609780"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src= &quot;/img/loading.gif&quot; data-lazy-src=&quot;https://image.isk.ink///image/20201214212616.png&quot; alt=&quot;image-20201214212609780&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>GUI编程学习笔记</title>
    <link href="http://blog.isk.ink/2020/12/13/GUI%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.isk.ink/2020/12/13/GUI%E7%BC%96%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-13T07:16:31.000Z</published>
    <updated>2021-02-21T01:26:43.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程</h2><p>组件</p><ul><li><p>窗口</p></li><li><p>弹窗</p></li><li><p>面板</p></li><li><p>文本框</p></li><li><p>列表框</p></li><li><p>按钮</p></li><li><p>图片</p></li><li><p>监听事件</p></li><li><p>鼠标</p></li><li><p>键盘事件</p></li><li><p>破解工具</p></li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gui的核心技术： Swing  AWT ,没流行起来是因为界面不美观，而且需要jre环境！</p><p>为什么要学习？</p><ol><li>可以写出自己心中想要的一些小工具</li><li>工作时候，也可能需要维护到swing界面，概率极小！</li><li>了解MVC架构，了解监听器！</li></ol><h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><h3 id="awt介绍"><a href="#awt介绍" class="headerlink" title="awt介绍"></a>awt介绍</h3><ol><li>包含了很多类和接口！ GUI</li><li>元素：窗口，按钮，文本框</li><li>java.awt</li></ol><h2 id="第一个Frame窗口"><a href="#第一个Frame窗口" class="headerlink" title="第一个Frame窗口"></a>第一个Frame窗口</h2><h3 id="组件和容器"><a href="#组件和容器" class="headerlink" title="组件和容器"></a>组件和容器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2020/12/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//GUI的第一个界面</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Frame.JDL. 看源码</span></span><br><span class="line">        Frame frame=<span class="keyword">new</span> Frame(<span class="string">&quot;我的第一个JAVA图形界面&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要设置可见性  宽 高</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置背景颜色 color</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">85</span>,<span class="number">150</span>,<span class="number">68</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201215205902.png" alt="image-20201215205855202"></p><p>问题：窗口关不掉</p><h3 id="多个窗口"><a href="#多个窗口" class="headerlink" title="多个窗口"></a>多个窗口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by Enzo Cotter on 2020/12/15.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//展示多个窗口 new</span></span><br><span class="line">        MyFrame myFrame1 =<span class="keyword">new</span> MyFrame(<span class="number">100</span>, <span class="number">100</span> ,<span class="number">200</span>,<span class="number">200</span>, Color.blue);</span><br><span class="line">        MyFrame myFrame2 =<span class="keyword">new</span> MyFrame(<span class="number">300</span>, <span class="number">100</span> ,<span class="number">200</span>,<span class="number">200</span>, Color.yellow);</span><br><span class="line">        MyFrame myFrame3 =<span class="keyword">new</span> MyFrame(<span class="number">100</span>, <span class="number">300</span> ,<span class="number">200</span>,<span class="number">200</span>, Color.green);</span><br><span class="line">        MyFrame myFrame4 =<span class="keyword">new</span> MyFrame(<span class="number">300</span>, <span class="number">300</span> ,<span class="number">200</span>,<span class="number">200</span>, Color.magenta);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id =<span class="number">0</span>; <span class="comment">//可能存在多个窗口</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> w,<span class="keyword">int</span> h,Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;Myframe+&quot;</span>+(++id));</span><br><span class="line">        setBackground(color);          <span class="comment">//设置颜色</span></span><br><span class="line">        setBounds(x,y,w,h);      <span class="comment">//设置位置和大小</span></span><br><span class="line">        setVisible(<span class="keyword">true</span>);  <span class="comment">//设置可见</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201215212039.png" alt="image-20201215212039505"></p><h3 id="2-面板panel"><a href="#2-面板panel" class="headerlink" title="2.面板panel"></a>2.面板panel</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GUI编程&quot;&gt;&lt;a href=&quot;#GUI编程&quot; class=&quot;headerlink&quot; title=&quot;GUI编程&quot;&gt;&lt;/a&gt;GUI编程&lt;/h2&gt;&lt;p&gt;组件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;窗口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;弹窗&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Java学习笔记(一)</title>
    <link href="http://blog.isk.ink/2020/12/10/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.isk.ink/2020/12/10/JAVA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-12-10T13:04:24.000Z</published>
    <updated>2021-06-19T09:21:09.583Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>首先必须声明数组变量，才能在程序中使用数组。下面是声明变量的语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dataType[] arrayRefVar; <span class="comment">//首选</span></span><br><span class="line">或者</span><br><span class="line">dataType arrayRefVar[]; <span class="comment">//效果相同，和C语言相似</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//java使用new操作字符来创建数组，语法如下:</span></span><br><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure><p>数组的元素是通过索引访问的，数组索引从0开始</p><p>获取数组长度:  arrays.length</p><p>定义数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] nums;  <span class="comment">//定于数组</span></span><br><span class="line">num =<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>]；  <span class="comment">//这里面可以存10个int类型的数字</span></span><br><span class="line"><span class="comment">//也可以通过下列方式来写</span></span><br><span class="line"><span class="keyword">int</span>[] nums=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br></pre></td></tr></table></figure><h2 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h2><h3 id="JAVA内存"><a href="#JAVA内存" class="headerlink" title="JAVA内存"></a>JAVA内存</h3><ol><li>堆     可以存放new的对象和数组；可以被所有的线程共享，不会存放别的引用</li><li>栈     存放基本变量类型（会包括这个基本类型的具体数值）；引用对象的变量（会存放这个引用在堆里面的具体地址）</li><li>方法区     可以被所有的线程共享；包含了所有的class和static变量</li></ol><h3 id="分析内存"><a href="#分析内存" class="headerlink" title="分析内存"></a>分析内存</h3><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20201210211242.png" alt="img"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201212165652.png" alt="Untitled (2)"></p><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201211180233.png" alt="img"></p><h2 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h2><ol><li>和类名相同</li><li>没有返回值</li></ol><p>作用：</p><ol><li>new 本质是在调用构造方法</li><li>初始化对象的值</li></ol><p>注意点：</p><ol><li>定义有参构造之后，如果想使用无参构造，显示的定义一个无参的构造</li></ol><p>Alt+Insert</p><p>this.=参数传进来的值</p><h2 id="简单小结类和对象"><a href="#简单小结类和对象" class="headerlink" title="简单小结类和对象"></a>简单小结类和对象</h2><ol><li><p>类与对象</p><p>类是一个模板：抽象，对象是一个值。</p></li><li><p>方法</p><p>定义，调用！</p></li><li><p>对应的引用</p><p>引用类型：  基本类型（8）</p><p>对象是通过引用来操作的： 栈—&gt;对象</p></li></ol><p>4.属性 ： 字段Field  成员变量</p><p>​        默认初始化：</p><pre><code>数字： 0  0.0</code></pre><p>​         char： u0000；</p><pre><code>boolean:  false;引用： null</code></pre><p>​        修饰符    属性类型    属性名 = 属性值！</p><ol start="5"><li>方法</li></ol><p>重要的是避免方法的死循环</p><ol start="6"><li>对象的创建和使用</li></ol><p>-必须使用new 关键字创造对象，构造器 Person kuangshen = new Person();</p><p>-对象的属性  kuangshen.name=” liyujing”</p><p>-对象的方法   kuangshen.shot();</p><ol start="7"><li><p>类：</p><p>静态的属性： 属性</p><p> 动态的行为:   方法</p></li></ol><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>继承的本质是对某一批类的抽象，从而实现对现实世界更好的建模</li><li>extands的意思是“ 扩展”。子类是父类的继承</li><li>JAVA中只有单继承，没有多继承 ，一个儿子只有一个爸爸，一个爸爸可以有多个儿子</li><li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖，组合，聚合等</li><li>继承关系的两个类，一个为子类（派生类）；一个为父类（基类）；子类继承父类，使用关键字extends来表示</li><li>子类和父类之间，从意义上讲应该具有“ is   a”的关系</li><li>object类</li><li>super</li><li>方法重写</li><li><strong>父类中私有的东西无法被子类继承</strong></li></ul><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><ul><li>public   公开的</li><li>protected</li></ul><p>具有protected访问控制级别的成员是半公开的，外界无法直接访问这个控制级别的成员，但是派生类的base指针（在c++中也可用引用访问）可以获得访问能力，protected与private基本相似，只有在继承时有较大的区别。继承的类可以访问protected成员，但是不能访问private成员。</p><ul><li>default</li></ul><p>简单说，默认方法就是接口可以有实现方法，而且不需要实现类去实现其方法。</p><p>我们只需在方法名前面加个 default 关键字即可实现默认方法。</p><ul><li>private   私人的</li></ul><p>所有的类都默认直接或间接继承Object类</p><h3 id="Super详解"><a href="#Super详解" class="headerlink" title="Super详解"></a>Super详解</h3><p>在子类中使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">System.out.println(<span class="keyword">super</span>.neme);<span class="comment">//可以调用到父类中的“名字”</span></span><br></pre></td></tr></table></figure><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201211180832.png" alt=""></p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><ol><li>super 调用父类的构造方法，必须在构造方法的第一个。</li><li>super必须只能出现在子类的方法或者构造方法中！</li><li>super和this不能同时调用构造方法！</li></ol><p>Vs this：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">代表的对象不同：</span><br><span class="line"></span><br><span class="line">                 this: 本身调用者这个对象</span><br><span class="line"></span><br><span class="line">                  super： 代表父类对象的应用</span><br><span class="line"></span><br><span class="line"> 前提：</span><br><span class="line"></span><br><span class="line">                this： 没有继承也可以使用</span><br><span class="line"></span><br><span class="line">               super: 只能在继承条件下才可以使用</span><br><span class="line"></span><br><span class="line">  构造方法：</span><br><span class="line"></span><br><span class="line">               this（）； 本类的构造</span><br><span class="line"></span><br><span class="line">               super（）；  父类的构造！</span><br></pre></td></tr></table></figure><h2 id="方法重写（不是方法重载）"><a href="#方法重写（不是方法重载）" class="headerlink" title="方法重写（不是方法重载）"></a>方法重写（不是方法重载）</h2><p><strong>父类的引用指向子类</strong></p><p>对于重载的说明（易混淆）</p><p> 重载是同一个方法的不同参数</p><ol><li>重写都是方法的重写与属性无关</li><li>静态的方法和非静态的方法区别很大！</li><li>静态方法：方法的调用只能和左边，定义的数据类型有关</li><li>非静态  ：重写</li><li>重写的方法不能是私有的</li><li>重写只有继承 才有：子类重写父类的方法</li></ol><h3 id="小总结"><a href="#小总结" class="headerlink" title="小总结"></a>小总结</h3><p>重写：</p><ul><li>需要有继承关系，子类重写父类的方法！2</li></ul><ol><li>方法名必须相同</li><li>参数列表必须相同</li><li>修饰符：范围可以扩大：public&gt;protected&gt;Defult&gt;private.</li><li>抛出的异常： 范围，可以被缩小，但不能扩大;ClassNotFoundException—&gt;Exception(大)</li></ol><p>重写，子类的方法和父类必须一致：方法体不同！</p><p>为什么要重写：</p><ol><li>父类的功能,子类不一定需要，或者不一定满足！</li></ol><p>Alt + Insert : override(重写);</p><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li><p>动态编译： 类型：可扩展性</p></li><li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为类型</p></li><li><p>一个对象的实际类型是确定的，但可以指向对象的引用的类型有很多（父类，有关系的类）</p></li></ul><p>多态存在的条件</p><ul><li>有继承关系</li><li>子类重写父类方法</li><li>父类引用子类对象</li></ul><p>注意： 多态是方法的多态，属性没有多态性</p><p>instanceof    （类型转换）引用类型的转换</p><h3 id="演示"><a href="#演示" class="headerlink" title="演示"></a>演示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个对象的实际类型是确定的</span></span><br><span class="line"><span class="comment">//new Student（）;</span></span><br><span class="line"><span class="comment">//new Person（）；</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main&#123;</span><br><span class="line"><span class="comment">//student能调用的都是自己的或者继承父类的</span></span><br><span class="line">Student s1=<span class="keyword">new</span> Student();   <span class="comment">//同一个Stdent有三种不同的引用</span></span><br><span class="line"><span class="comment">//Person父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">Persion s2=<span class="keyword">new</span> Student();</span><br><span class="line">Object s3=<span class="keyword">new</span> Student();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>子类重写了父类的方法，执行子类的方法</li><li>对象能执行那些方法，主要看对象左边的类型，和右边关系不大。例如</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Student s1 =<span class="keyword">new</span> Student();</span><br><span class="line">Person s2 =<span class="keyword">new</span> Student();</span><br><span class="line">Object s3 =<span class="keyword">new</span> Student();</span><br></pre></td></tr></table></figure><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Person s2=<span class="keyword">new</span> Student();</span><br><span class="line">((Student)s2).eat();  <span class="comment">//强制转换  高转低</span></span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>多态是方法的多态，属性没有多态</li><li>父类和子类  ，有联系 类型转换异常！  报错CLassCastException!</li><li>存在的条件：继承关系；方法需要重写，父类引用指向子类对象！ Father f1 =new Son();</li></ol><p>有些方法不能重写</p><ol><li>static(静态方法)  属于类，它不属于实例</li><li>final 常量；</li><li>privata(私有)方法；</li></ol><h2 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a><strong>static关键字详解</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;   <span class="comment">//静态的变量</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">double</span> score;   <span class="comment">//非静态的变量</span></span><br></pre></td></tr></table></figure><ul><li>非静态方法可以直接去访问类中的静态方法；</li><li>静态方法只能去调用静态方法</li><li>静态方法都可以直接使用</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">  <span class="comment">//第二执行</span></span><br><span class="line">&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;匿名代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一执行</span></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;静态代码块&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">//第三执行</span></span><br><span class="line"><span class="keyword">public</span> Person&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;构造方法&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>static只执行一次</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//一个好玩的代码</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"> System.out.println(Math.random());<span class="comment">//输出一个随机数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//好玩的代码二</span></span><br><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random; </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">System.out.println(random());  <span class="comment">//可以直接用哦</span></span><br><span class="line">System.out.println(PI);        <span class="comment">//同理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>final修饰的类 ，断子绝孙不能被继承</li></ul><h2 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h2><ul><li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法即使抽象方法；如果修饰类，那么该类就是抽象类</li><li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类</li><li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承</li><li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的</li><li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类</li></ul><h3 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h3><ul><li>抽象方法，只有方法名字，没有方法的实现！</li><li>抽象类： 类 extends: 单继承 ~  （接口可以多继承）</li></ul><ol><li>不能new出来，只能靠子类去实现它： 约束！</li><li>抽象类可以写普通的方法~</li><li>抽象方法必须在抽象类中~</li></ol><ul><li>抽象方法，只有方法名字，没有方法的实现！</li><li>抽象类： 类 extends: 单继承 ~  （接口可以多继承）</li></ul><ol><li>不能new出来，只能靠子类去实现它： 约束！</li><li>抽象类可以写普通的方法~</li><li>抽象方法必须在抽象类中~</li></ol><ul><li>抽象方法，只有方法名字，没有方法的实现！</li><li>抽象类： 类 extends: 单继承 ~  （接口可以多继承）</li></ul><ol><li>不能new出来，只能靠子类去实现它： 约束！</li><li>抽象类可以写普通的方法~</li><li>抽象方法必须在抽象类中~</li></ol><h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><ul><li>普通类 ：只有具体实现</li><li>抽象类: 具体方法实现和规范（抽象方法）都有！</li><li>接口：只有规范！自己无法写方法<del>专业的约束！ 约束和实现分离：面向接口编程</del></li><li>接口就是规范,定义的是一组规则，体现了现实生活中的“如果你是。。。”</li><li>接口的本质是契约，就像我们人间的法律一样。指定好有大家都遵守</li><li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口。为什么我们讨论设计模式都只针对具备了抽象能力的语言（比如C++,java,C#等），就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li></ul><p>类声明的关键字是class，声明接口的关键字是interface</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line"><span class="comment">//接口中所有定义其实都是抽象的public abstract</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类可以实现接口 implements 接口</li><li>实现了接口的类，就需要重写接口中的类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> clss UserServiceImpl implements UserService&#123;</span><br><span class="line"><span class="meta">@override</span>重写</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> add&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ol><li>约束</li><li>定义一些方法，让不同的人实现</li><li>public abstract</li><li>public static final</li><li>接口不能实例化~接口中没有构造方法</li><li>implements可以实现多个接口</li><li>必须要重写接口中的方法</li></ol><h2 id="內部类"><a href="#內部类" class="headerlink" title="內部类"></a><strong>內部类</strong></h2><ul><li>內部类就是在一个类的內部再定义一个类，不如在A类中定义一个B类，那么B类相对A类来说就成为内部类，而A类相对于B类来说就是外部类了。</li></ul><ol><li>成员内部类</li><li>静态內部类</li><li>局部内部类</li><li>匿名內部类</li></ol><p><img src= "/img/loading.gif" data-lazy-src="https://image.isk.ink///image/20201211181712.png" alt=""></p><ul><li>一个JAVA文件中可以有多个class类，但是只能有一个public class</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line"><span class="comment">//局部内部类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h2><h3 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h3><ul><li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求，你的程序要打开某个文件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或者硬盘可能满了。等等</li><li>软件程序运行的过程中，非常可能遇到刚刚遇到提到的这些异常问题，我们叫异常，英文是：Exception，意思是例外。，这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃</li><li>异常指程序运行中出现的不期而至的各种情况，如文件找不到。网络连接失败。非法参数等</li><li>异常发生在程序运行期间，它影响了正常文件的程序执行流程</li></ul><p>要理解JAVA异常处理是如何工作的，你需要掌握一下三种类型的异常</p><ol><li>异常性检查：对具代表性的检查异常是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在文件时，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li><li>运行时异常：运行时异常时一个可能被程序员避免的异常，与检查性异常相反，运行时异常可以在编译时被忽略</li><li>错误：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略，例如，当栈溢出时，一个错误就发生了，它们在编译时也检查不到的。</li></ol><h3 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h3><ul><li>JAVA把异常当作对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类</li><li>在JAVA API中已经定义了许多异常类，这些异常类分为两大类，错误Error和异常ExcePtion</li></ul><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul><li>Error类对象由Java虚拟机生成并抛出，大多数代码与代码编写者所执行的操作无关。</li><li>Java虚拟机运行错误（Virtual MachineError） ,当JVM不再有继续执行操作时所需的内存资源时，将出现OutIOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止；</li><li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError），链接错误（LinkageError）。这些错误时不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数时程序运行时不允许出现的状况。</li></ul><h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul><li><p>在Exception分支中有一个重要的子类RuntimeException（运行时异常）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">ArraylndexOutOfBoundsException（数组下标越界）</span><br><span class="line"></span><br><span class="line">NullPointerException（空指针异常）</span><br><span class="line"></span><br><span class="line">ArithmeticException（算术异常）</span><br><span class="line"></span><br><span class="line">MissingResourceException（丢失资源）</span><br><span class="line"></span><br><span class="line">ClassNotFoundException（找不到类）等异常，这些异常都不检查异常，程序中可以选择捕获异常处理，也可以不处理</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>这些异常一般是有程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生；</p></li><li><p>Error和Exception的区别：Error通常是灾难性的致命错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程，Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</p></li></ul><h2 id="自定义异常及经验总结"><a href="#自定义异常及经验总结" class="headerlink" title="自定义异常及经验总结"></a>自定义异常及经验总结</h2><ul><li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需要继承Exception</li><li>在程序中使用自定义异常类，大体可分以下几个步骤：</li></ul><ol><li>创建自定义异常类</li><li>在方法中通过throw关键字抛出异常对象</li><li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处通过throw关键字指明要抛出给方法调用者的异常，继续进行下一步操作</li><li>在出现异常方法的调用者中捕获并处理异常</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义的异常类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line"><span class="comment">//传递数字&gt;10</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.detail = a;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="comment">//toString: 异常的打印信息</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;MyException&#123;&quot;</span> +detail + <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h3><ul><li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理、</li><li>在多重catch块后面，也可以加一个catch（）来处理可能会被遗漏的异常</li><li>对于不确定的代码，也可以加一个try-catch，处理潜在的异常</li><li>尽量去处理异常，切记只是简单地调用printStackTrace（）去打印输出</li><li>具体如何处理异常，要根据不同的业务需求和异常类型去决定</li><li>尽量添加finally语句块去释放占用的内存</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可能存在异常的方法</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">System.out.println(<span class="string">&quot;传递的参数为：&quot;</span> +a );</span><br><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MyException(a); <span class="comment">//抛出</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Sysetm.out.println(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">test(<span class="number">11</span>);</span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line"><span class="comment">//增加一些处理异常的代码~</span></span><br><span class="line">System.out.println(<span class="string">&quot;MyException=&gt;&quot;</span> +e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="持续更新。。"><a href="#持续更新。。" class="headerlink" title="持续更新。。"></a>持续更新。。</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组&quot;&gt;&lt;a href=&quot;#数组&quot; class=&quot;headerlink&quot; title=&quot;数组&quot;&gt;&lt;/a&gt;数组&lt;/h2&gt;&lt;p&gt;首先必须声明数组变量，才能在程序中使用数组。下面是声明变量的语法：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;
      
    
    </summary>
    
    
    
      <category term="Java" scheme="http://blog.isk.ink/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>如何在CLion运行多个main函数</title>
    <link href="http://blog.isk.ink/2020/12/03/%E5%A6%82%E4%BD%95%E5%9C%A8CLion%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AAmain%E5%87%BD%E6%95%B0/"/>
    <id>http://blog.isk.ink/2020/12/03/%E5%A6%82%E4%BD%95%E5%9C%A8CLion%E8%BF%90%E8%A1%8C%E5%A4%9A%E4%B8%AAmain%E5%87%BD%E6%95%B0/</id>
    <published>2020-12-03T13:11:12.000Z</published>
    <updated>2020-12-03T13:32:48.555Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>在写C++的算法题时，经常遇到这样的问题，写了多个cpp文件，在CLion中编译报错不能同时存在多个main函数。</p><p>我上网找到了一个大佬写的很优雅的一个方法，非常简单。就是读字符串写文件，</p><p>直接修改一下CMake自动遍历文件即可。</p><p> <font size=" 5px">在CLion中写完一题，想写下一题，结果发现main函数不能运行</font></p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>在查找谷歌和百度多个大佬不同的方法后找到了一个最简单有效的方法</p><p>直接修改CMakelists.txt</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20201203212413.png" alt="image-20201203212406853"></p><p>下面以我Project的CMakgeList.txt为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.16)</span><br><span class="line">project(untitled1)</span><br><span class="line"></span><br><span class="line">set(CMAKE_CXX_STANDARD 14)</span><br><span class="line"></span><br><span class="line">file (GLOB files *.cpp *&#x2F;*.cpp)</span><br><span class="line">foreach (file $&#123;files&#125;)</span><br><span class="line">    string(REGEX REPLACE &quot;.+&#x2F;(.+)&#x2F;(.+)\\..*&quot; &quot;\\1-\\2&quot; exe $&#123;file&#125;)</span><br><span class="line">    add_executable ($&#123;exe&#125; $&#123;file&#125; )</span><br><span class="line">endforeach ()</span><br></pre></td></tr></table></figure><ol><li><p>在新建对应的xx.cpp文件后，创建main函数，在项目处右击，选择Reload CMake Project</p><p><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20201203212504.png" alt="image-20201203212504319"></p></li></ol><ol start="2"><li>加载完成后就可以看到main函数前面出现了运行按钮，运行列表框也有了对应的运行选项。<img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20201203213142.png" alt="image-20201203213142118"></li></ol><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>这种方法不只是能遍历根目录下的一成，如果根目录下还有文件夹，则里面的cpp文件也会被识别。</p><p>例如</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果你只需要根目录下的 test 文件夹的所有 .cpp 文件</span></span><br><span class="line"><span class="keyword">file</span> (GLOB files <span class="keyword">test</span>/*.cpp)</span><br><span class="line"><span class="comment"># 如果你只有两层目录的话</span></span><br><span class="line"><span class="keyword">file</span> (GLOB files *.cpp */*.cpp)</span><br><span class="line"><span class="comment"># 同理，三层的话</span></span><br><span class="line"><span class="keyword">file</span> (GLOB files *.cpp */*.cpp */*/*.cpp)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 官方提供了一种递归的方法</span></span><br><span class="line"><span class="comment"># 这样在运行框会多一个 CMakeCXXCompilerId，不过无伤大雅</span></span><br><span class="line"><span class="keyword">file</span> (GLOB_RECURSE files *.cpp)</span><br></pre></td></tr></table></figure><p>如果我想在运行框显示 <strong>文件夹/文件名</strong> 应该怎么做，经过测试对于 <code>/</code> 应该是 CMAKE 中使用的符号，不能在其中使用，<code>\\1</code> 和 <code>\\2</code> 之间可以用 <code>.</code> 和 <code>-</code></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">string</span>(REGEX REPLACE ``<span class="string">&quot;.+/(.+)/(.+)\\..*&quot;</span>` `<span class="string">&quot;\\1-\\2&quot;</span>` `exe <span class="variable">$&#123;``file``&#125;</span>)</span><br></pre></td></tr></table></figure><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;在写C++的算法题时，经常遇到这样的问题，写了多个cpp文件，在CLion中编译报错不能同时存在多个main函数。&lt;/p&gt;
&lt;p&gt;我上网找到
      
    
    </summary>
    
    
      <category term="CLion" scheme="http://blog.isk.ink/categories/CLion/"/>
    
    
      <category term="CLion" scheme="http://blog.isk.ink/tags/CLion/"/>
    
  </entry>
  
  <entry>
    <title>Win10+Ubuntu双系统修改grub默认启动项</title>
    <link href="http://blog.isk.ink/2020/11/21/Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9grub%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/"/>
    <id>http://blog.isk.ink/2020/11/21/Win10+Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E4%BF%AE%E6%94%B9grub%E9%BB%98%E8%AE%A4%E5%90%AF%E5%8A%A8%E9%A1%B9/</id>
    <published>2020-11-21T15:38:35.000Z</published>
    <updated>2021-05-07T15:43:18.022Z</updated>
    
    <content type="html"><![CDATA[<p>  由于装了linux之后默认选择进入的是Linux系统，如果要进入win系统每次都要手动选择，真好啊。好个锤子，因为win系统的使用频率又大于Linux系统，所以不能忍，因此我把他默认启动项改成win10</p><p>具体步骤：（以下操作全部是在管理员权限下）</p><ul><li>打开终端（ctrl+alt+T），输入sudo  gedit  /etc/default/grub</li><li>验证密码，grub配置文件被打开</li><li>将弹出的文件中文本“GRUB-DEFAULT=0”中的0修改为2.（注意这里每个人可能不同，注意你选择系统时，如果你的win系统在第三个则修改为2，排序从零开始）</li><li><img src= "/img/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Yaoguang161/image/image/20201004191000.png" alt="win10+ubuntu双系统修复ubuntu启动引导_槑宝包-CSDN博客"></li><li>保存文件。这里可能会弹出警告框，但是一般情况下好像并没什么关系</li><li>在终端输入sudo update-grub以更新配置</li><li>重启即可发现已修改完毕</li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>主要参考链接：</p><ol><li>启动盘制作：<a href="https://www.upandashi.com/upanqidong/">https://www.upandashi.com/upanqidong/</a></li><li>win10下安装ubuntu16.04双系统：<a href="https://blog.csdn.net/s717597589/article/details/79117112/">https://blog.csdn.net/s717597589/article/details/79117112/</a></li><li>分区引导：<a href="https://blog.csdn.net/Houchaoqun_XMU/article/details/72453187">https://blog.csdn.net/Houchaoqun_XMU/article/details/72453187</a></li><li>开机无启动项解决：<a href="https://blog.csdn.net/Houchaoqun_XMU/article/details/72476703">https://blog.csdn.net/Houchaoqun_XMU/article/details/72476703</a></li><li>开机无启动项解决：<a href="https://blog.csdn.net/Houchaoqun_XMU/article/details/72453187">https://blog.csdn.net/Houchaoqun_XMU/article/details/72453187</a></li><li>win10双系统修复：<a href="https://blog.csdn.net/qq_34562959/article/details/81095716">https://blog.csdn.net/qq_34562959/article/details/81095716</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  由于装了linux之后默认选择进入的是Linux系统，如果要进入win系统每次都要手动选择，真好啊。好个锤子，因为win系统的使用频率又大于Linux系统，所以不能忍，因此我把他默认启动项改成win10&lt;/p&gt;
&lt;p&gt;具体步骤：（以下操作全部是在管理员权限下）&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="双系统" scheme="http://blog.isk.ink/categories/%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Ubuntu" scheme="http://blog.isk.ink/tags/Ubuntu/"/>
    
  </entry>
  
  <entry>
    <title>C语言中按位与/或/异或运算笔记</title>
    <link href="http://blog.isk.ink/2020/10/31/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%8C%89%E4%BD%8D%E4%B8%8E-%E6%88%96-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/"/>
    <id>http://blog.isk.ink/2020/10/31/C%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%8C%89%E4%BD%8D%E4%B8%8E-%E6%88%96-%E5%BC%82%E6%88%96%E8%BF%90%E7%AE%97%E7%AC%94%E8%AE%B0/</id>
    <published>2020-10-31T02:14:09.000Z</published>
    <updated>2020-11-28T04:32:14.027Z</updated>
    
    <content type="html"><![CDATA[<p>  按位与（&amp;）和，或（丨），异或（^）运算都是属于位运算符是在二进制形式上进行的一个运算符.</p><p>很简单的三种运算，但是有时候会很容易记反。</p><h2 id="一-按位与运算"><a href="#一-按位与运算" class="headerlink" title="一.按位与运算"></a>一.按位与运算</h2><p>按位与运算口诀:同一则一。</p><p>1.只有当两个二进制数同位上的都是1时才可以为1，否则为0。例子↓</p><p>与（&amp;）运算: 1010   </p><p>​                         0110   </p><p>结果:                0010</p><h2 id="二-按位或运算"><a href="#二-按位或运算" class="headerlink" title="二.按位或运算"></a>二.按位或运算</h2><p>按位或运算口诀:同0则0。</p><p>只有当两个二进制数同位上的都是0时才是0，否则为1。例子↓</p><p>或（丨）运算: </p><p>1010    </p><p>0110  </p><p>结果:               </p><p> 1110</p><h2 id="三-按位异或运算"><a href="#三-按位异或运算" class="headerlink" title="三.按位异或运算"></a>三.按位异或运算</h2><p>按位异或口诀:相同则0,不同则1。</p><p>只有当同位上的两个数都同时为1或者为0时结果是0，否则为1例子↓</p><p>异或运算（^）: </p><p>1010     0110    </p><p>​                            </p><p>1110    1100</p><p>结果:                   </p><p>0100   1010</p><h2 id="结束！"><a href="#结束！" class="headerlink" title="结束！"></a>结束！</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  按位与（&amp;amp;）和，或（丨），异或（^）运算都是属于位运算符是在二进制形式上进行的一个运算符.&lt;/p&gt;
&lt;p&gt;很简单的三种运算，但是有时候会很容易记反。&lt;/p&gt;
&lt;h2 id=&quot;一-按位与运算&quot;&gt;&lt;a href=&quot;#一-按位与运算&quot; class=&quot;headerlin
      
    
    </summary>
    
    
      <category term="C/C++" scheme="http://blog.isk.ink/categories/C-C/"/>
    
    
      <category term="C/C++" scheme="http://blog.isk.ink/tags/C-C/"/>
    
  </entry>
  
</feed>
